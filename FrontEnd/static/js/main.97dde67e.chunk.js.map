{"version":3,"sources":["Structures/PartnerTypes.js","Structures/TransactionOperations.js","Structures/PartnerStates.js","Structures/RechargeCodeStates.js","Structures/ClientStats.js","Apis/GlobalConfig.js","Imgs/logo.svg","Components/StatBox/StatBox.js","Apis/RequestHandler.js","Models/_Model.js","Models/_Station.js","Models/_Clients.js","Models/_Partner.js","Models/_Setting.js","Models/_RechareCode.js","Models/_Transaction.js","Models/_Ad.js","Structures/YitComponent.js","Apis/Notifications.js","Components/DynamicSubmitButton/DynamicSubmitButton.js","Components/YitForm/YitForm.js","Components/YitFragment/YitFragment.js","Pages/Stations/NewStationForm/NewStationForm.js","Components/YitPage/YitPage.js","Components/TransactionsGraph/CharOptions.js","Components/TransactionsGraph/TransactionsGraph.js","Components/YitFullLocationPeeker/Autocomplete.js","Components/YitFullLocationPeeker/Marker.js","Pages/Home/Home.js","Components/YitFullLocationPeeker/YitLocationPicker.js","Components/tableIcons.js","Components/YitDataTable/YitDataTable.js","Pages/Clients/Clients.js","Components/LocationSearchModal/LocationSearchModal.js","Components/YitLocationPicker.js","Pages/Partners/NewPartnerForm/NewPartnerForm.js","Pages/Partners/Partners.js","Components/TabsWidget/TabsWidget.js","Components/YitView/YitView.js","Pages/Stations/StationDetails/StationDetails.js","Components/YitTcpForm/YitTcpForm.js","Pages/Stations/StationEditForm/StationEditForm.js","Pages/Stations/Stations.js","Pages/PartnerDetails/PartnerEditForm/PartnerEditForm.js","Pages/PartnerDetails/CodeGeneratorForm/CodeGeneratorForm.js","Pages/PartnerDetails/PartnerDetails.js","Pages/Transactions/Transactions.js","Components/YitFilePicker/YitFilePicker.js","Pages/Ads/NewAd/NewAd.jsx","Pages/Ads/Ads.js","routes.js","Components/NavBar.js","Components/Logo.js","Components/LeftPane.js","Components/RightPane.js","Models/_Admin.js","config/globalConfig.js","Apis/authOperations.js","Pages/LoginPage/LoginPage.js","Apis/Redux/Reducers/serverReducers.js","Apis/Redux/Reducers/index.js","Apis/Redux/Actions/Types.js","Layouts/MAIN/Main.js","App.js","serviceWorker.js","Apis/Redux/reduxStore.js","index.js"],"names":["module","exports","label","id","Station","rent","return","wallet","recharge","payment","value","ClientStats","LOCALSTORAGE","window","localStorage","SERVER","ACTOR","API_KEY","StatBox","props","style","backgroundColor","icon","state","a","Fragment","className","this","title","number","text","React","Component","RequestHandler","GET","URL","token","controller","AbortController","setTimeout","abort","requestOptions","method","headers","authorization","timeout","fetch","response","json","data","finalResult","error","POST","DATA","body","JSON","stringify","_Model","adminToken","MODEL","create","postData","MAIN_ENTRY","result","update","newData","offset","index","console","log","attribute","key","StationModel","stationId","parseInt","level","_Client","_Partner","_Setting","RechargeCode","_Transaction","operation","limit","_Ad","YitComponent","currentPage","createRef","MODELS","_Station","getItem","_RechargeCode","failedLoading","flag","Notifications","container","Msg","severity","variant","duration","View","Alert","sx","mb","action","IconButton","aria-label","color","size","onClick","alert","ReactDOM","unmountComponentAtNode","document","getElementById","close","Close","fontSize","render","err","DynamicSubmitButton","isSubmitting","LoadingButton","fullWidth","loading","loadingPosition","startIcon","Button","type","DoneMsg","xmlns","viewBox","cx","cy","r","fill","d","YitForm","isSubmitted","done","newInfo","doneMsg","undefined","errMsg","submitButton","e","nam","target","name","val","newLat","latLng","lat","newLng","lng","preventDefault","current","setState","handleSubmit","onSuccess","children","Children","map","child","isValidElement","displayName","childProps","onDragEnd","bind","cloneElement","onChange","changeHolder","recursiveCloneChildren","onSubmit","Grid","item","spacing","xs","defaultValue","ref","YitFragment","isLoading","notifications","Map","notId","set","delete","list","forEach","push","component","addEventListener","display","event","stopPropagation","topOperations","marginLeft","width","primaryInfoLoader","CircularProgress","unmount","drawNotifications","customClass","customId","NewStationForm","partnersList","statsList","stationTypes","formRef","getAll","getOp","partners","rows","prepared","partner","fullName","createOp","toString","fragment","loadPrimaryData","then","TextField","disabled","required","FormControl","InputLabel","Select","labelId","MenuItem","option","YitPage","pageId","backDropId","backDropContentId","notificationsContainerId","length","alignItems","cursor","selector","visibility","reloadPrimaryInfo","drawOperations","customContentClass","contentCustomId","CharOptions","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","offsetGridLines","LineChart","require","Line","TransactionsGraph","charData","labels","weekDays","datasets","fillColor","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","fragmentRef","loadTransactionsData","rentTransactions","returnTransactions","baseDate","Date","indexes","i","setDate","getDate","toLocaleDateString","weekday","getDay","getAllOp","acceptedDate","transaction","transactionDate","tempData","slice","entry","options","x","height","y","AutoComplete","onPlaceChanged","addplace","place","autoComplete","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","mapApi","places","Autocomplete","types","addListener","bindTo","clearInstanceListeners","onFocus","placeholder","Wrapper","styled","div","Marker","alt","defaultProps","MuiIcons","Home","settings","statistics","graphHeight","graphWidth","checked","dataValue","pushNotification","temp","actors","actor","loader","count","getTotal","model","loadSettings","loadStatistics","offsetHeight","offsetWidth","onresize","setDimensions","Person","People","Apps","LocalAtm","List","ListItem","ListItemText","primary","ListItemIcon","Switch","edge","inputProps","QrCode2","QrCodeScanner","tableIcons","Add","forwardRef","AddBox","Check","Clear","Delete","DeleteOutline","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowDownward","ThirdStateCheck","Remove","ViewColumn","Retry","YitDataTable","page","totalCount","searchEntry","URLSearchParams","search","tableRef","clear","query","pageSize","dataModel","searchBy","total","minHeight","fontFamily","icons","Promise","resolve","reject","loadData","actionsColumnIndex","exportButton","paginationPosition","pageSizeOptions","localization","opacity","onQueryChange","Clients","handleClose","reason","rawData","columns","field","lookup","0","1","2","rowData","stat","Chip","fontWeight","selectedRowId","open","dataTable","clientsList","editable","onRowUpdate","oldData","updateClientInfo","onRowDelete","deleteEntry","Geocode","setApiKey","enableDebug","YitLocationPicker","onMarkerDragEnd","markerPosition","mapPosition","zoom","center","mapContainerStyle","google","draggable","position","onClose","onInfoWindowClose","padding","margin","NewPartnerForm","markers","chars","password","randomNumber","Math","floor","random","substring","generatePassword","PartnerTypes","PartnerStates","googleMapsApiKey","Partners","clientStat","statToString","loadPartners","mountBackDrop","actions","changeStat","tooltip","Block","Beenhere","to","pathname","rowIndex","Launch","onRowClick","ondblclick","history","TabsWidget","tabsWidgetId","tabContentId","tabButtonId","currentIndex","selectedIndex","buttonsList","getElementsByClassName","textDecoration","tabsList","tab","clickHandler","changeSelected","generateTabs","setContent","YitView","active","myRef","anActiveContent","PowerBank","useState","setStat","powerBankId","powerLevel","drawContent","APNView","APN","MCCMNC","InputProps","readOnly","StationDetails","currentStation","Partner","currentStationInfo","currentTab","stationAPNs","loadStationInfo","loadPowerBanksInfo","loadAPN","getOneByPublicId","getOneOP","getOneRealTime","queryAPNNs","powerBanksList","powerBank","rentPowerBank","station","systemId","setActive","drawPowerBanks","YitTcpForm","view","errorMsg","drawResult","StationEditForm","getOnById","setAddress","setVolume","handleSubmitStationData","currentPartner","handleSetAddress","handleSetVolume","VolumeDown","Slider","min","max","VolumeUp","Stations","setValid","valid","stationsList","customdId","detailPanel","PartnerEditForm","updateOp","reload","phone","mail","CodeGeneratorForm","currentForm","c","doGenerate","RechargeCodeStates","cs","PartnerStations","components","Container","overflow","editRow","deleteText","toolbar","PartnerDetails","loadCurrentPartner","getOneOp","QrCode2Outlined","Transactions","_RentTransaction","rechargeCodes","transactions","newEntry","MetaData","dataTitle","TransactionOperations","loadRentTransactions","transactionList","loadCartTransactions","Toolbar","tabClickHandler","background","showTitle","grouping","exportAllData","PersonAdd","isFreeAction","YitFilePicker","currentImage","Image","createObjectURL","files","imageTag","src","onImageSelect","hidden","NewAd","AdImage","AdImageContainer","preImageContainer","preImage","image","Ads","editComponent","loadAds","Preview","withDeviceSwitch","withRotator","url","onRowAdd","updateAd","dashboardRoutes","path","Dashboard","rtlName","PeopleAltSharp","layout","PeopleOutlineRounded","parametrised","Receipt","BurstModeSharp","NavBar","routes","prop","Logo","logoImage","LeftPane","openDialog","removeItem","assign","Dialog","DialogContent","DialogContentText","DialogActions","logOut","LogoutOutlined","RightPane","route","exact","match","params","from","_Admin","login","HeartBit","authOperations","Copyright","Typography","align","href","getFullYear","validateLogin","admin","setItem","LoginPage","FormData","currentTarget","get","loginResult","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Box","my","mx","flexDirection","noValidate","mt","autoFocus","FormControlLabel","control","Checkbox","initialState","items","combineReducers","AppStates","server","payLoad","internet","serverStatToProps","Main","drawStatus","connect","App","test","checkServer","setInterval","dispatch","navigator","onLine","Boolean","hostname","middleware","thunk","reduxStore","createStore","rootReducer","compose","applyMiddleware","StrictMode","store","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.97dde67e.chunk.js","sourcesContent":["\n\nconst PartnerTypes = [\n    {\n        label: \"Payed\",\n        id: \"0\"\n    },\n    {\n        label: \"Free\",\n        id: \"1\"\n    },\n]\n\n\nmodule.exports = PartnerTypes","const TransactionOperations = {\n    Station : {\n        rent : { label: \"Rent\", id: \"0\"},\n        return : { label: \"Return\", id: \"1\"}\n        },\n    wallet: {\n        recharge: {label: \"Recharge\", id: \"10\"},\n        payment: {label: \"payment\", id: \"11\"},\n    }\n\n}\n\n\nmodule.exports = TransactionOperations","\n\nconst PartnerStates = [\n    {\n        label: \"Active\",\n        id: \"0\"\n    },\n    {\n        label: \"Frozen\",\n        id: \"1\"\n    },\n]\n\n\nmodule.exports = PartnerStates","const RechargeCodeStates = [\n    {\n        label: \"New\",\n        value: \"0\"\n    },\n    {\n        label: \"Ready to print\",\n        value: \"1\"\n    },\n]\n\n\nmodule.exports = RechargeCodeStates","const ClientStats = [\n    {\n        label: \"New\",\n        value: \"0\"\n    },\n\n    {\n        label: \"Active\",\n        value: \"1\"\n    },\n    {\n        label: \"Frozen\",\n        value: \"2\"\n    },\n]\n\n\nmodule.exports = {ClientStats}","const  SERVER = \"http://164.132.59.129:8080/\";\n//const  SERVER = \"http://localhost:8080/\";\nconst ACTOR = \"Admin/\"\nconst LOCALSTORAGE = window.localStorage;\nconst API_KEY = 'AIzaSyB3zO_aU97QjkN-p1MUofYobc2QNCf3y2M'\n\n\nmodule.exports = {SERVER, ACTOR, LOCALSTORAGE, API_KEY};","module.exports = __webpack_public_path__ + \"static/media/logo.2673b52f.svg\";","import React from 'react';\nimport \"./StatBox.css\"\n\nclass StatBox extends React.Component {\n\n    constructor(props){\n        super(props);\n        let style = {\n            backgroundColor : this.props.backgroundColor,\n        }\n        let icon = this.props.icon\n        this.state = {\n            style: style,\n            icon: icon,\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <section className={\"StatBox\"} >\n                    <div className=\"IconHolder\" style={this.state.style}>\n                        {this.props.icon}\n                    </div>\n                    <div className=\"statsHolder\">\n                        <span className={\"title\"}>{this.props.title}</span>\n                        <span className={\"number\"}>{this.props.number}</span>\n                    </div>\n                    <span className={\"alt\"}>{this.props.text}</span>\n                </section>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default StatBox","const RequestHandler = {\n    async GET(URL, token) {\n        const controller = new AbortController();\n        setTimeout(() => controller.abort(), 0);\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json', authorization: 'Bearer ' + token},\n            authorization: 'Bearer ' + token,\n            timeout: 5\n        };\n        try{\n            const response = await fetch(URL, requestOptions);\n            const data = await response.json();\n            return data\n        }catch (error){\n            return {finalResult: false, error: error}\n        }\n    },\n\n\n    async  POST(URL, DATA, token) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json', authorization: 'Bearer ' + token},\n            body: JSON.stringify(DATA)\n        };\n        try{\n            const response = await fetch(URL, requestOptions);\n            const data = await response.json();\n            return data\n        }catch (error){\n            return {finalResult: false, error: error}\n        }\n\n    }\n}\n\n\n\n\nexport default RequestHandler","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport React from \"react\";\n\n\nclass _Model {\n\n    constructor(adminToken, MODEL) {\n\n        this.adminToken =  adminToken\n        this.MAIN_ENTRY = SERVER+ACTOR+MODEL\n    }\n\n    create = async(postData) =>{\n        const URL = this.MAIN_ENTRY+\"create\"\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n\n    }\n\n    update = async(id, newData) =>{\n        const URL = this.MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, newData, this.adminToken)\n        return result\n    }\n\n    async getAll(offset, index) {\n\n        try{\n            const URL = this.MAIN_ENTRY+\"getAll/\"+offset+\"/\"+index\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            console.log(error)\n            return {finalResult: false}\n        }\n    }\n\n    async getOnById(id) {\n        try {\n            const URL = this.MAIN_ENTRY+\"getOne/\"+id\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }\n        catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async searchBy(attribute, key) {\n        try{\n            const URL = this.MAIN_ENTRY+\"searchBy/\"+attribute+\"/\"+key\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async count() {\n        try{\n            const URL = this.MAIN_ENTRY+\"count\"\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async countWhere(attribute, value) {\n        try{\n            const URL = this.MAIN_ENTRY+\"count/\"+attribute+\"/\"+value\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async delete(id) {\n        try{\n            const URL = this.MAIN_ENTRY+\"delete/\"+id\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n}\n\nexport default _Model;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Station/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass StationModel extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    async getOneByPublicId(id) {\n        const URL = MAIN_ENTRY+\"getOneByPublicId/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n    async getOneRealTime(id) {\n        const URL = MAIN_ENTRY+\"getRealTimeInfo/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        if(result.finalResult){\n            return result.data\n        }else {\n            return false\n        }\n    }\n\n    async rentPowerBank(id){\n        let URL  = MAIN_ENTRY+\"rentPowerBank/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result.finalResult\n    }\n\n    async queryAPNNs(stationId, index){\n        index = parseInt(index)\n        index = \"0\"+index\n        let URL  = MAIN_ENTRY+\"queryAPNNs/\"+stationId+\"/\"+index\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        if(result.finalResult){\n            return  result.data\n        }else {\n            return false\n        }\n    }\n\n    async setAddress(stationId, data){\n        let URL  = MAIN_ENTRY+\"setAddress/\"+stationId\n\n        let result = await RequestHandler.POST(URL, data, this.adminToken)\n        console.log(result)\n        return result\n    }\n\n    async setVolume(stationId, level){\n        level = parseInt(level)\n        let URL  = MAIN_ENTRY+\"setVolume/\"+stationId+\"/\"+level\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n}\n\n\nexport default StationModel;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Client/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Client extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    create = async(postData) =>{\n        const URL = MAIN_ENTRY+\"getAll/0/99999\"\n        let result = await RequestHandler.POST(URL, postData)\n        if(result.finalResult){\n            return result.result\n        }else {\n            return result\n        }\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport default _Client;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Partner/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Partner extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n    \n    update = async(id, postData) =>{\n        const URL = MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n    }\n\n}\n\nexport default _Partner;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Setting/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Setting extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n    \n    update = async(id, postData) =>{\n        const URL = MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n    }\n\n}\n\nexport default _Setting;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"RechargeCode/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass RechargeCode extends  _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n    async getOneRealTime(id) {\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(SERVER+MODEL+\"getRealTimeInfo/\"+id, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.data;\n        } else {\n            return null;\n        }\n    }\n\n\n\n\n\n}\n\nexport default RechargeCode;","import RequestHandler from \"../Apis/RequestHandler\";\nimport React from \"react\";\nimport _Model from \"./_Model\";\nconst MODEL = \"RentTransactions/\"\n\nclass _Transaction extends _Model{\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n    }\n\n    async getAll(operation, offset, limit) {\n        const URL = this.MAIN_ENTRY+\"getAll/\"+operation+\"/\"+offset+\"/\"+limit\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n}\n\nexport default _Transaction;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Ads/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Ad extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport default _Ad;","import React from \"react\";\nimport _Station from \"../Models/_Station\";\nimport _Client from \"../Models/_Clients\";\nimport _Partner from \"../Models/_Partner\";\nimport _Setting from \"../Models/_Setting\";\nimport _RechargeCode from \"../Models/_RechareCode\";\nimport {LOCALSTORAGE} from \"../Apis/GlobalConfig\";\nimport _Transaction from \"../Models/_Transaction\";\nimport _Ad from \"../Models/_Ad\";\n\n\n\nclass YitComponent extends  React.Component{\n    constructor(props) {\n        super(props);\n        this.currentPage = React.createRef()\n\n        this.MODELS = {\n            _Station: new _Station(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Client:  new _Client(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Setting: new _Setting(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Partner: new _Partner(LOCALSTORAGE.getItem(\"adminToken\")),\n            _RechargeCode: new _RechargeCode(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Transaction : new _Transaction(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Ad : new _Ad(LOCALSTORAGE.getItem(\"adminToken\"))\n        }\n        this.state = {\n            failedLoading: true\n        }\n    }\n\n    checkLoadStatus(flag){\n\n    }\n\n\n}\n\nexport default YitComponent","\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\n\nimport Alert from \"@mui/material/Alert\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {Close} from \"@mui/icons-material\";\nfunction close(container, alert){\n    ReactDOM.unmountComponentAtNode(document.getElementById(container));\n}\nexport const Notifications = {\n    drawActionResult (container, Msg, severity, variant,  duration)  {\n        if(typeof  Msg !== \"string\"){\n            Msg = \"Critique Error, check console\"\n        }\n        const View = ({}) => {\n\n            return (\n                <>\n                    <Alert\n                        id={\"alert\"}\n                        severity={severity}\n                        sx={{mb: 2}}\n                        action={\n                            <IconButton\n                                aria-label=\"close\"\n                                color=\"inherit\"\n                                size=\"small\"\n                                onClick={() => {\n                                    close(container, \"\")\n                                }}\n                            >\n                                <Close fontSize=\"inherit\" />\n                            </IconButton>\n                        }\n                    >\n                        {Msg}\n                    </Alert>\n                </>\n\n            )\n        }\n        try {\n            ReactDOM.render(<View/>, document.getElementById(container))\n            if(duration != null){\n                setTimeout(() => {\n                    ReactDOM.unmountComponentAtNode(document.getElementById(container));\n                }, duration)\n            }\n\n        } catch (err) {\n            console.log(\"could not render teh notifications, check again\")\n            console.log(err)\n        }\n    }\n}\n\n","\nimport React from 'react';\n\n\nimport YitComponent from \"../../Structures/YitComponent\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\n\nclass DynamicSubmitButton extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            isSubmitting : false\n        }\n    }\n\n\n    async componentDidMount() {\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n    render() {\n        return (\n            drawSubmit(this.state.isSubmitting)\n        )\n    }\n}\n\nexport default DynamicSubmitButton","import React from \"react\";\nimport \"./YitForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport DynamicSubmitButton from \"../DynamicSubmitButton/DynamicSubmitButton\";\n\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\nconst DoneMsg = () =>{\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n    </div>)\n}\n\nclass YitForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            newInfo: {},\n            doneMsg : this.props.doneMsg === undefined ? \"Operation success\" : \"Operation failed\",\n            errMsg : this.props.errMsg !== undefined ? this.props.errMsg : \"Operation failed\"\n        }\n        this.submitButton = React.createRef()\n\n    }\n\n    changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.value;\n        if(e.target.type === \"number\"){\n            val = parseInt(val)\n        }\n        this.state.newInfo[nam]= val\n    }\n\n    onDragEnd(e){\n        let newLat = e.latLng.lat(),\n            newLng = e.latLng.lng();\n        this.state.newInfo[\"x\"]= newLat\n        this.state.newInfo[\"y\"]= newLng\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault()\n        this.submitButton.current.setState({\n            isSubmitting: true\n        })\n        this.setState({\n            isSubmitting: true\n        })\n\n        if(await this.props.handleSubmit(this.state.newInfo) === true){\n\n            this.setState({isSubmitted: true})\n            Notifications.drawActionResult(\"pagesNotifications\", this.state.doneMsg, \"success\")\n            if(this.props.onSuccess !== undefined){\n                this.props.onSuccess()\n            }\n            setTimeout(()=>{\n                this.setState({\n                    isSubmitted: false,\n                    isSubmitting: false\n                })\n            }, 2000)\n\n        }else {\n            this.setState({\n                isSubmitted: false,\n                isSubmitting: false\n            })\n            Notifications.drawActionResult(\"pagesNotifications\", this.state.errMsg, \"error\")\n            this.submitButton.current.setState({\n                isSubmitting: false\n            })\n        }\n    }\n\n    recursiveCloneChildren(children) {\n\n        return React.Children.map(children, child => {\n\n            if(!React.isValidElement(child)) return child;\n            if(child.type.displayName === \"YitLocationPicker\"){\n\n                let childProps = {onDragEnd: this.onDragEnd.bind(this)};\n                return React.cloneElement(child, childProps);\n            }else {\n                let  childProps = {onChange: this.changeHolder.bind(this)};\n                childProps.children = this.recursiveCloneChildren(child.props.children);\n                return React.cloneElement(child, childProps);\n            }\n\n\n\n        })\n    }\n\n    async componentDidMount() {\n\n    }\n\n    render() {\n        if(!this.state.isSubmitted){\n            return (\n                <div className={\"YitForm\"} id={\"YitForm\"}>\n                    <form  onSubmit={this.handleSubmit.bind(this)} id={\"myForm\"} >\n                        {this.recursiveCloneChildren(this.props.children)}\n                        <br></br>\n                        <br></br>\n                        <Grid container item spacing={2}>\n                            <Grid item xs={4}>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Button\n                                    variant={\"outlined\"}\n                                    fullWidth\n                                    color=\"secondary\"\n                                    id=\"outlined-error-helper-text\"\n                                    label=\"Password\"\n                                    defaultValue={\"APN.APN\"}\n                                    type={\"reset\"}\n                                >\n                                    Reset\n                                </Button>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <DynamicSubmitButton ref={this.submitButton}></DynamicSubmitButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            )\n        }else{\n            return (\n                <div className={\"YitForm\"} id={\"YitForm\"}>\n                    <DoneMsg/>\n                </div>\n            )\n        }\n\n    }\n}\nexport default YitForm","import React from 'react';\nimport \"./YitFragment.css\"\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ReactDOM from \"react-dom\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport Alert from \"@mui/material/Alert\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {Close} from \"@mui/icons-material\";\nclass YitFragment extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: this.props[\"isLoading\"] === undefined ? true:this.props[\"isLoading\"],\n            failedLoading: false,\n            notifications: new Map(),\n        }\n        this.notId = 0;\n    }\n    pushNotification(Msg, severity, duration){\n        let id=this.notId\n        this.state.notifications.set(\n            id,\n            <Alert\n                id={id}\n                severity={severity}\n                sx={{mb: 2}}\n                action={\n                    <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.state.notifications.delete(id)\n                            this.setState({notifications: this.state.notifications})\n                        }}\n                    >\n                        <Close fontSize=\"inherit\" />\n                    </IconButton>\n                }\n            >\n                {Msg}\n            </Alert>\n        )\n        this.notId++\n        this.setState({notifications: this.state.notifications})\n        if(duration !== undefined){\n            setTimeout(()=>{\n                this.state.notifications.delete(id)\n                this.setState({notifications: this.state.notifications})\n            }, duration)\n        }\n    }\n    async componentDidMount() {\n\n\n    }\n    drawNotifications(map){\n        let list = []\n        map.forEach((value, key)=>{\n            list.push(value)\n        })\n        return (list)\n    }\n    mountFragmentBackDrop(component){\n        document.getElementById(\"BackDrop\").addEventListener('click', ()=>{\n            document.getElementById(\"BackDrop\").style.display = \"none\"\n        })\n        document.getElementById('BackDropContent').addEventListener('click', (event)=>{\n            event.stopPropagation();\n        })\n        document.getElementById(\"BackDrop\").style.display = \"flex\"\n        ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    unmount(component){\n        document.getElementById(\"BackDrop\").style.display = \"none\"\n       // ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    drawOperations(){\n        if(this.props.topOperations != undefined){\n            return (this.props.topOperations.map(operation => {\n                return (\n                    <div style={{marginLeft: 10}}>{operation}</div>\n                )\n            }))\n        }\n    }\n\n\n    render() {\n        if(this.state.failedLoading){\n            return (\n                <div className={\"failedToLoadPage\"}>\n                    <span>Failed to load Fragment primary data</span>\n                    <br/>\n                    <Button\n                        style={{width: \"10vw\"}}\n                        variant={\"contained\"}  startIcon={<ReplayIcon/>}\n                        onClick={()=>this.props.primaryInfoLoader}\n                    >\n                        retry\n                    </Button>\n                </div>)\n        }\n        else {\n            if(this.state.isLoading){\n                return (<div className={\"loadingPage\"}><CircularProgress /></div>)\n            }\n            else {\n                return (\n                    <div className={'yitFragment'}>\n                        <div className={\"BackDrop\"} id={\"BackDrop\"}>\n                            <div className=\"close\" onClick={this.unmount}><CancelIcon fontSize=\"large\" style={{color: \"red\"}}/></div>\n                            <div className=\"content\" id={\"BackDropContent\"}></div>\n                        </div>\n                        <div className=\"pagesNotifications\" id={\"pagesNotifications\"}>\n                            {this.drawNotifications(this.state.notifications)}\n                        </div>\n                        <section className={`YitFragment ${this.props.customClass}`} id={this.props.customId}>\n                                {this.props.children}\n                        </section>\n                   </div>\n                )\n            }\n        }\n\n    }\n}\n\nexport default YitFragment","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewStationForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass NewStationForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            statsList: [\n                {label: \"active\", id: 0},\n                {label: \"Frozen\", id: 1}\n            ]\n        }\n\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value   : 0\n            },\n            {\n                label: \"inactive\",\n                value   : 1\n            }\n        ]\n     this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if(getOp.finalResult !== false){\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner =>{\n                return{value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        }else {\n\n        }\n    }\n\n    async handleSubmit(newData) {\n        let createOp = await this.MODELS._Station.create(newData)\n        if(createOp.finalResult){\n            return true\n        }else {\n            let error = createOp.error.toString()\n            this.formRef.current.setState({\n                errMsg: error\n            })\n           return false\n        }\n    }\n\n    render() {\n     return(\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"NewStationForm\"}\n                customId={\"NewStationForm\"}\n                title={\"Station Details\"}\n                isLoading={false}\n                primaryInfoLoader={()=>{this.loadPrimaryData().then()}}\n            >\n            <YitForm\n                ref={this.formRef}\n                handleSubmit={this.handleSubmit.bind(this)}\n            >\n                <Grid container spacing={2}>\n                    <Grid item xs={12}><b>Station Primary data</b></Grid>\n                    <Grid item xs={5}>\n                        <TextField\n                            disabled fullWidth required\n                            variant={\"outlined\"}\n                            id=\"outlined-required\" label=\"SystemId\" defaultValue={\"Generated\"}\n                        >\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={7}>\n                        <TextField\n                            fullWidth required name={\"id\"}\n                            variant={\"outlined\"}\n                            id=\"outlined-required\" label=\"Public Id\" defaultValue={\"\"}\n                        />\n                    </Grid>\n                    <Grid item xs={8}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-label\">Partner</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"currentPartner\"\n                                label=\"Partner\"\n                                name={\"currentPartner\"}\n                                defaultValue={-1}\n\n                            >\n                                <MenuItem value={-1} key={-10}>Select Partner</MenuItem>\n                                {this.state.partnersList.map((option) => (\n                                    <MenuItem value={option.value} key={option.value}> {option.label}</MenuItem>\n                                ))}\n\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                name={\"stat\"}\n                                label=\"Stat\"\n                                defaultValue={-1}\n                            >\n                                <MenuItem value={-1} key={-100}>Select Stat</MenuItem>\n                                {this.state.statsList.map((option) => (\n                                    <MenuItem value={option.id} key={option.value}> {option.label}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n\n\n                </Grid>\n            </YitForm>\n            </YitFragment>\n        )\n\n\n    }\n}\nexport default NewStationForm","import React from 'react';\nimport \"./YitPage.css\"\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ReactDOM from \"react-dom\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuOpenIcon from '@mui/icons-material/MenuOpen';\nimport Alert from \"@mui/material/Alert\";\nimport {Close} from \"@mui/icons-material\";\nimport NewStationForm from \"../../Pages/Stations/NewStationForm/NewStationForm\";\nclass YitPage extends YitComponent {\n    static id=0\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading: false,\n            notifications: new Map(),\n\n        }\n        this.pageId = 'YitPag'+YitPage.id\n        this.backDropId  = \"YitPageBackDrop\"+YitPage.id\n        this.backDropContentId = \"YitPageBackDropContent\"+YitPage.id\n        this.notificationsContainerId = \"notificationsContainer\"+YitPage.id\n        this.notId = 0;\n        YitPage.id++\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    pushNotification(Msg, severity, duration){\n        let id=this.notId\n        this.state.notifications.set(\n            id,\n            <Alert\n                id={id}\n                severity={severity}\n                sx={{mb: 2}}\n                action={\n                    <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.state.notifications.delete(id)\n                            this.setState({notifications: this.state.notifications})\n                        }}\n                    >\n                        <Close fontSize=\"inherit\" />\n                    </IconButton>\n                }\n            >\n                {Msg}\n            </Alert>\n        )\n        this.notId++\n        this.setState({notifications: this.state.notifications})\n        if(duration !== undefined){\n            setTimeout(()=>{\n                this.state.notifications.delete(id)\n                this.setState({notifications: this.state.notifications})\n            }, duration)\n        }\n    }\n\n    async componentDidMount() {\n        \n    }\n\n    mountBackDrop(component){\n        document.getElementById(this.backDropId).addEventListener('click', ()=>{\n            ReactDOM.unmountComponentAtNode(document.getElementById(this.backDropContentId))\n            document.getElementById(this.backDropId).style.display = \"none\"\n        })\n        document.getElementById(this.backDropContentId).addEventListener('click', (event)=>{\n            event.stopPropagation();\n        })\n        document.getElementById(this.backDropId).style.display = \"flex\"\n        ReactDOM.render(component, document.getElementById(this.backDropContentId))\n    }\n\n    unmount(component){\n        document.getElementById(this.backDropId).style.display = \"none\"\n       // ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    drawOperations(){\n        if(this.props.topOperations !== undefined && this.props.topOperations.length > 0){\n            return (\n                <>\n                    <div className=\"entriesContainer\" id={\"entriesContainer\"}>\n                        {this.props.topOperations.map((operation, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={\"operationEntry\"}\n                                    style={{marginLeft: 10, display: \"flex\", alignItems:\"center\"}}\n                                    onClick={operation.onClick}\n                                >\n                                    {operation.icon} {operation.text}\n                                </div>\n                            )})}\n                    </div>\n                    <MenuOpenIcon\n                        fontSize={\"large\"} style={{cursor: \"pointer\"}}\n                        onClick={()=>{\n                            let selector = document.getElementById(\"entriesContainer\")\n                            if (selector.style.visibility === \"hidden\") {\n                                selector.style.visibility = \"visible\";\n                            } else {\n                                selector.style.visibility = \"hidden\";\n                            }\n                        }}/>\n                </>\n\n            )\n        }\n    }\n    drawNotifications(map){\n        let list = []\n        map.forEach((value, key)=>{\n            list.push(value)\n        })\n        return (list)\n    }\n\n\n    render() {\n        if(this.state.failedLoading){\n            return (\n                <div className={\"failedToLoadPage\"}>\n                    <span>Failed to load page primary data</span>\n                    <br/>\n                    <Button\n                        style={{width: \"10vw\"}}\n                        color={\"primary\"}\n                        variant={\"contained\"}  startIcon={<ReplayIcon/>}\n                        onClick={()=>{\n                            try {\n                                this.props.reloadPrimaryInfo()\n                            }\n                            catch (error){\n\n                            }\n                        }}\n                    >\n                        retry\n                    </Button>\n                </div>)\n        }\n        else {\n            if(this.state.isLoading){\n                return (<div className={\"loadingPage\"}><CircularProgress /></div>)\n            }\n            else {\n                return (\n                    <section className={'YitPage'} id={this.pageId}>\n                        <div className={\"YitPageBackDrop\"} id={this.backDropId}>\n                            <div className=\"YitPageBackDropContent\" id={this.backDropContentId}></div>\n                        </div>\n                        <div className=\"YitPageNotificationsContainer\" id={this.notificationsContainerId}>\n                            {this.drawNotifications(this.state.notifications)}\n                        </div>\n                        <div className={`YitPageMainPage ${this.props.customClass}`} id={this.props.customId}>\n                            <div className=\"pagesTitle\" >{this.props.title}</div>\n                            <div className=\"pagesOperations\">\n                                {this.drawOperations()}\n                            </div>\n                            <div className={`pagesContent ${this.props.customContentClass}`} id={this.props.contentCustomId}>\n                                {this.props.children}\n                            </div>\n                        </div>\n                    </section>\n                )\n            }\n        }\n\n    }\n}\n\nexport default YitPage","const CharOptions = {\n\n    ///Boolean - Whether grid lines are shown across the chart\n    scaleShowGridLines : true,\n\n    //String - Colour of the grid lines\n    scaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n    //Number - Width of the grid lines\n    scaleGridLineWidth : 1,\n\n    //Boolean - Whether to show horizontal lines (except X axis)\n    scaleShowHorizontalLines: true,\n\n    //Boolean - Whether to show vertical lines (except Y axis)\n    scaleShowVerticalLines: true,\n\n    //Boolean - Whether the line is curved between points\n    bezierCurve : true,\n\n    //Number - Tension of the bezier curve between points\n    bezierCurveTension : 0.4,\n\n    //Boolean - Whether to show a dot for each point\n    pointDot : true,\n\n    //Number - Radius of each point dot in pixels\n    pointDotRadius : 4,\n\n    //Number - Pixel width of point dot stroke\n    pointDotStrokeWidth : 1,\n\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n    pointHitDetectionRadius : 20,\n\n    //Boolean - Whether to show a stroke for datasets\n    datasetStroke : true,\n\n    //Number - Pixel width of dataset stroke\n    datasetStrokeWidth : 2,\n\n    //Boolean - Whether to fill the dataset with a colour\n    datasetFill : true,\n\n    //String - A legend template\n\n\n    //Boolean - Whether to horizontally center the label and point dot inside the grid\n    offsetGridLines : false\n};\n\nexport  default CharOptions\n","import React from \"react\";\nimport CharOptions from \"./CharOptions\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitFragment from \"../YitFragment/YitFragment\";\nlet LineChart = require(\"react-chartjs\").Line;\n\n\nclass TransactionsGraph extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            failedLoading : false,\n            charData :  {\n                labels: this.weekDays().weekDays,\n                datasets: [\n                    {\n                        label: \"Rent Transactions\",\n                        fillColor: \"rgba(220,220,220,0.2)\",\n                        strokeColor: \"rgba(220,220,220,1)\",\n                        pointColor: \"rgba(220,220,220,1)\",\n                        pointStrokeColor: \"#fff\",\n                        pointHighlightFill: \"#fff\",\n                        pointHighlightStroke: \"rgba(220,220,220,1)\",\n                        data: [5, 12, 16, 22, 18, 50, 10]\n                    },\n                    {\n                        label: \"Return Transaction\",\n                        fillColor: \"rgba(151,187,205,0.2)\",\n                        strokeColor: \"rgba(151,187,205,1)\",\n                        pointColor: \"rgba(151,187,205,1)\",\n                        pointStrokeColor: \"#fff\",\n                        pointHighlightFill: \"#fff\",\n                        pointHighlightStroke: \"rgba(151,187,205,1)\",\n                        data: [5, 12, 16, 22, 18, 50, 10]\n                    }\n                ]\n            }\n        }\n        this.fragmentRef = React.createRef()\n\n    }\n\n    async componentDidMount() {\n        let rentTransactions = await this.loadTransactionsData(0, 0, 100)\n        let returnTransactions = await this.loadTransactionsData(1, 0, 100)\n\n        this.state.charData['datasets'][0]['data'] = rentTransactions\n        this.state.charData['datasets'][1]['data'] = returnTransactions\n        this.setState({\n            charData: this.state.charData\n        })\n\n        this.fragmentRef.current.setState({\n            isLoading : false,\n            failedLoading : this.state.failedLoading\n        })\n    }\n\n    weekDays(){\n        let baseDate = new Date();\n        let weekDays = [];\n        let indexes = []\n        for(let i = 0; i < 7; i++)\n        {\n            baseDate.setDate(baseDate.getDate() - 6);\n            weekDays.push(\n                baseDate.toLocaleDateString(\"en\", { weekday: 'long' })\n            );\n            indexes.push(baseDate.getDay())\n\n        }\n        return {weekDays, indexes}\n    }\n\n    prepareData(){\n\n    }\n\n\n    async loadTransactionsData(operation, offset, limit){\n        let getAllOp = await this.MODELS._Transaction.getAll(operation, offset, limit)\n        let acceptedDate = new Date();\n        acceptedDate.setDate(acceptedDate.getDay()-6)\n        let data = [0, 0, 0, 0, 0, 0, 0]\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            transactions.forEach(transaction =>{\n                let transactionDate = new Date(transaction['createdAt'])\n                if(transactionDate > acceptedDate){\n                    data[transactionDate.getDay()] = data[transactionDate.getDay()] + 1\n                }\n            })\n            let tempData = data.slice()\n            this.weekDays().indexes.forEach((entry, index) =>{\n                data[entry-1] = tempData[index]\n            })\n            tempData = null\n\n        }\n        this.setState({\n            failedLoading: !getAllOp.finalResult\n        })\n        return data\n    }\n\n    render() {\n        return(\n            <>\n                <YitFragment\n                    ref={this.fragmentRef}\n                >\n                    <LineChart\n                        data={this.state.charData}\n                        options={CharOptions}\n                        width={this.props.x}\n                        height={this.props.y}\n                    />\n                </YitFragment>\n\n            </>\n        )\n    }\n}\n\nexport default TransactionsGraph","import React, { Component } from 'react';\nimport {TextField} from \"@mui/material\";\n\n\n\nclass AutoComplete extends Component {\n    constructor(props) {\n        super(props);\n        this.clearSearchBox = this.clearSearchBox.bind(this);\n    }\n\n    componentDidMount() {\n        const { map, mapApi } = this.props\n        const options = {\n            // restrict your search to a specific type of result\n            types: ['address'],\n            // restrict your search to a specific country, or an array of countries\n            // componentRestrictions: { country: ['gb', 'us'] },\n        };\n        this.autoComplete = new mapApi.places.Autocomplete(\n            this.searchInput,\n            options,\n        );\n        this.autoComplete.addListener('place_changed', this.onPlaceChanged);\n        this.autoComplete.bindTo('bounds', map);\n    }\n\n    componentWillUnmount() {\n        const { mapApi } = this.props\n        mapApi.event.clearInstanceListeners(this.searchInput);\n    }\n\n    onPlaceChanged = () => {\n        const { map, addplace } = this.props\n        const place = this.autoComplete.getPlace();\n\n        if (!place.geometry) return;\n        if (place.geometry.viewport) {\n            map.fitBounds(place.geometry.viewport);\n        } else {\n            map.setCenter(place.geometry.location);\n            map.setZoom(17);\n        }\n\n        addplace(place);\n        this.searchInput.blur();\n    };\n\n    clearSearchBox() {\n        this.searchInput.value = '';\n    }\n\n    render() {\n        return (\n            <div className={'YitLocationPickerAutoComplete'}>\n                <TextField\n                    style={{backgroundColor:\"white\"}}\n                    size={\"small\"}\n                    ref={(ref) => {\n                        this.searchInput = ref;\n                    }}\n                    variant={\"outlined\"}\n                    onFocus={this.clearSearchBox}\n                    placeholder=\"Enter a location\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default AutoComplete;","// Marker.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    position: absolute;\n    width: 38px;\n    height: 37px;\n    background-image: url(https://icon-library.com/images/pin-icon-png/pin-icon-png-9.jpg);\n    background-size: contain;\n    background-repeat: no-repeat;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -webkit-transform: translate(-50%,-50%);\n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%,-50%);\n    cursor: grab;\n`;\n\nconst Marker = ({ text, onClick }) => (\n    <Wrapper\n        alt={text}\n        onClick={onClick}\n    />\n);\n\nMarker.defaultProps = {\n    onClick: null,\n};\n\nMarker.propTypes = {\n    onClick: PropTypes.func,\n    text: PropTypes.string.isRequired,\n};\n\nexport default Marker;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./Home.css\"\nimport StatBox from \"../../Components/StatBox/StatBox\";\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\n\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Switch from \"@material-ui/core/Switch\";\nimport List from \"@mui/material/List\";\nimport TransactionsGraph from \"../../Components/TransactionsGraph/TransactionsGraph\";\nimport YitLocationPicker from \"../../Components/YitFullLocationPeeker/YitLocationPicker\";\n\nconst MuiIcons = require('@mui/icons-material');\n\n\nclass Home extends YitComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            failedLoading: false,\n            isLoading: false,\n            settings: {},\n            statistics: {},\n            graphHeight: 0,\n            graphWidth: 0\n        }\n        this.currentPage = React.createRef()\n    }\n    async changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.checked;\n        if (e.target.type === \"number\") {\n            val = parseInt(val)\n        }\n        let updateOp = await this.MODELS._Setting.update(nam, {dataValue: val})\n        if(updateOp.finalResult){\n            this.state.settings[nam] = val\n            this.setState({\n                settings: this.state.settings\n            })\n        }else {\n            this.currentPage.current.pushNotification(\"Could not update settings\", \"error\", 2000)\n        }\n\n    }\n    async loadSettings(offset, limit){\n        let getAllOp = await this.MODELS._Setting.getAll(offset, limit)\n        if(getAllOp.finalResult){\n            let temp = {}\n            getAllOp.result.forEach(entry =>{\n                temp[entry.name] = entry.dataValue\n            })\n            this.setState({settings: temp})\n        }\n        this.setState({failedLoading: !getAllOp.finalResult})\n    }\n\n    async loadStatistics(actors){\n        for (const actor of actors) {\n            let getTotal = await actor.loader.count()\n            if(getTotal.finalResult){\n                this.state.statistics[actor.model] = getTotal.result\n                this.setState({statistics: this.state.statistics})\n            }\n            this.setState({failedLoading: !getTotal.finalResult})\n        }\n    }\n\n    async loadPrimaryData() {\n        let actors = [\n            {model: \"clients\", loader: this.MODELS._Client},\n            {model: \"stations\", loader: this.MODELS._Station},\n            {model: \"partners\", loader: this.MODELS._Partner},\n        ]\n        await this.loadSettings(0, 50)\n        await this.loadStatistics(actors)\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async loadTransactionsData(){\n        let getAllOp = this.MODELS._Transaction.getAll(0, 0, 100)\n        //let getAllOp = this.MODELS._Transaction.getAll(1, 0, 100)\n    }\n    setDimensions(){\n\n\n\n        let container = document.getElementById('transactionsContainer')\n        if(container !== null){\n            let y = container.offsetHeight\n            let x = container.offsetWidth\n            this.setState({\n                x:x-20,\n                y:y-50\n            })\n        }\n\n        window.onresize = ()=>{\n            let container = document.getElementById('transactionsContainer')\n            if(container !== null){\n                let y = container.offsetHeight\n                let x = container.offsetWidth\n                this.setState({\n                    x:x-20,\n                    y:y-50\n                })\n            }\n        }\n\n    }\n    async componentDidMount() {\n        await this.loadPrimaryData()\n        this.setDimensions()\n    }\n\n    render(){\n        return(\n                <YitPage\n                    ref={this.currentPage}\n                    title={\"Dash Board\"}\n                    customClass={'Home'}\n                    customContentClass={'homeContent'}\n                    topOperations={[]}\n                    reloadPrimaryInfo={()=>{\n                        this.loadPrimaryData().then()\n                    }}\n                >\n                    <div className=\"StatsContainer\">\n                        <div className=\"container\">\n                            <StatBox\n                                title={'Clients'}\n                                number={this.state.statistics[\"clients\"]}\n                                text={\"+7 this month\"}\n                                icon={<MuiIcons.Person style={{fontSize: 50, color:\"wheat\"}}/>}\n\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                number={this.state.statistics[\"partners\"]}\n                                text={\"Students\"}\n                                title={'Partners'}\n                                icon={<MuiIcons.People style={{fontSize: 50, color: \"rosybrown\"}}/>}\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                title={'Stations'}\n                                number={this.state.statistics[\"stations\"]}\n                                icon={<MuiIcons.Apps style={{fontSize: 50, color:\"black\"}}/>}\n                                text={\"Active Stations\"}\n                            />\n\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                title={\"Transactions\"}\n                                number={\"0\"}\n                                icon={<MuiIcons.LocalAtm style={{fontSize: 50, color:\"wheat\"}}/>}\n                                text={\"Today\"}\n                            />\n                        </div>\n                    </div>\n                    <div className={\"transactionsContainer\"} id={\"transactionsContainer\"}>\n                        <b>Rent / return transactions</b>\n                        <TransactionsGraph x={this.state.x} y={this.state.y}></TransactionsGraph>\n                    </div>\n                    <div className=\"quickSettingsContainer\">\n                        <List>\n                            <ListItem>\n                                <ListItemText id=\"switch-list-label-wifi\" primary={<b>Settings</b>} />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon><AccountTreeIcon/></ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Pratic Power\" />\n                                <Switch\n                                    name={\"system\"}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"system\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.People/>\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Client Signup\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder}\n                                    checked={this.state.settings[\"clientSignUp\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.People/>\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Client Signup\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder}\n                                    checked={this.state.settings[\"clientSignUp\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.Apps />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Power Banks Rent\" />\n                                <Switch\n                                    name={\"rent\"}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"rent\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-bluetooth',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.QrCode2 />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Card Print\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"print\"]}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.QrCodeScanner />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Card recharge\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"recharge\"]}\n                                />\n                            </ListItem>\n                        </List>\n                    </div>\n                </YitPage>\n        )\n    }\n}\nexport default Home","// MyGoogleMaps.js\nimport React, { Component } from 'react';\nimport \"./YitLocationPicker.css\"\n\nimport GoogleMapReact from 'google-map-react';\n\n\nimport AutoComplete from './Autocomplete';\nimport Marker from './Marker';\nimport {API_KEY} from \"../../Apis/GlobalConfig\";\n\n\nclass YitLocationPicker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mapApiLoaded: false,\n            mapInstance: null,\n            mapApi: null,\n            geoCoder: null,\n            places: [],\n            center: [],\n            zoom: 9,\n            address: '',\n            draggable: true,\n            lat: null,\n            lng: null\n        }\n    }\n\n\n\n    componentWillMount() {\n        this.setCurrentLocation();\n    }\n\n\n    onMarkerInteraction = (childKey, childProps, mouse) => {\n        this.setState({\n            draggable: false,\n            lat: mouse.lat,\n            lng: mouse.lng\n        });\n    }\n    onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\n        this.setState({ draggable: true });\n        this._generateAddress();\n    }\n\n    _onChange = ({ center, zoom }) => {\n        this.setState({\n            center: center,\n            zoom: zoom,\n        });\n\n    }\n\n    _onClick = (value) => {\n        this.setState({\n            lat: value.lat,\n            lng: value.lng\n        });\n    }\n\n    apiHasLoaded = (map, maps) => {\n        this.setState({\n            mapApiLoaded: true,\n            mapInstance: map,\n            mapApi: maps,\n        });\n\n        this._generateAddress();\n    };\n\n    addPlace = (place) => {\n        this.setState({\n            places: [place],\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n        });\n        this._generateAddress()\n    };\n\n    _generateAddress() {\n        const {\n            mapApi\n        } = this.state;\n\n        const geocoder = new mapApi.Geocoder;\n\n        geocoder.geocode({ 'location': { lat: this.state.lat, lng: this.state.lng } }, (results, status) => {\n            console.log(results);\n            console.log(status);\n            if (status === 'OK') {\n                if (results[0]) {\n                    this.zoom = 12;\n                    this.setState({ address: results[0].formatted_address });\n                } else {\n                    window.alert('No results found');\n                }\n            } else {\n                window.alert('Geocoder failed due to: ' + status);\n            }\n\n        });\n    }\n\n    // Get Current Location Coordinates\n    setCurrentLocation() {\n        if ('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.setState({\n                    center: [position.coords.latitude, position.coords.longitude],\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                });\n            });\n        }\n    }\n\n    render() {\n        const {\n            places, mapApiLoaded, mapInstance, mapApi,\n        } = this.state;\n\n\n        return (\n            <div className={'YitLocationPicker'}>\n                {mapApiLoaded && (\n                    <div>\n                        <AutoComplete map={mapInstance} mapApi={mapApi} addplace={this.addPlace} />\n                    </div>\n                )}\n                <GoogleMapReact\n                    center={this.state.center}\n                    zoom={this.state.zoom}\n                    draggable={this.state.draggable}\n                    onChange={this._onChange}\n                    onChildMouseDown={this.onMarkerInteraction}\n                    onChildMouseUp={this.onMarkerInteractionMouseUp}\n                    onChildMouseMove={this.onMarkerInteraction}\n                    onChildClick={() => console.log('child click')}\n                    onClick={this._onClick}\n                    bootstrapURLKeys={{\n                        key: API_KEY,\n                        libraries: ['places', 'geometry'],\n                    }}\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\n                >\n\n                    <Marker\n                        text={this.state.address}\n                        lat={this.state.lat}\n                        lng={this.state.lng}\n                    />\n\n\n                </GoogleMapReact>\n\n                <div className=\"info-wrapper\">\n                    <div className=\"map-details\">Latitude: <span>{this.state.lat}</span>, Longitude: <span>{this.state.lng}</span></div>\n                    <div className=\"map-details\">Zoom: <span>{this.state.zoom}</span></div>\n                    <div className=\"map-details\">Address: <span>{this.state.address}</span></div>\n                </div>\n\n\n            </div >\n        );\n    }\n}\n\nexport default YitLocationPicker;","import React, {forwardRef} from \"react\";\nimport {\n    AddBox, ArrowDownward,\n    Check, ChevronLeft,\n    ChevronRight,\n    Clear,\n    DeleteOutline,\n    Edit,\n    FilterList,\n    FirstPage, LastPage, Remove,\n    SaveAlt, Search, ViewColumn\n} from \"@mui/icons-material\";\n\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n    Retry: forwardRef((props, ref) => <div/>),\n};\n\n\nexport default tableIcons;","import React from 'react';\nimport './YitDataTable.css'\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../tableIcons\"\nimport Button from \"@material-ui/core/Button\";\n\n\nclass YitDataTable extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            page: 0,\n            totalCount: 0,\n            searchEntry: this.props.searchEntry !== undefined ? this.props.searchEntry : \"id\"\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        this.tableRef = React.createRef();\n\n    }\n\n\n\n    async componentDidMount() {\n        console.clear()\n        console.log(this.tableRef.current)\n    }\n\n    async loadTotal(){\n\n    }\n\n    async loadData(query){\n        let offset = query.page*query.pageSize, limit =  query.pageSize\n        let getAllOp\n\n        if(query.search === \"\"){\n            getAllOp = await this.props.dataModel.getAll(offset, limit)\n        }\n        else{\n            getAllOp = await this.props.dataModel.searchBy(this.state.searchEntry, query.search)\n        }\n\n        if(getAllOp.finalResult){\n            let result = {\n                data : getAllOp.result.rows,\n                total: getAllOp.result.count\n            }\n\n            return result\n        }else {\n            return false\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n    render() {\n        return (\n            <MaterialTable\n                style={{ minHeight: \"100%\", fontFamily: \"Poppins\"}}\n                tableRef={this.tableRef}\n                icons={tableIcons}\n                title={\"\"}\n                data={query => new Promise((resolve, reject) => {\n                        this.loadData(query)\n                            .then(result => {\n                                if(result == false){\n                                    reject()\n                                }else {\n                                    resolve({\n                                        data: result['data'],\n                                        page: query.page,\n                                        totalCount: result['total'],\n                                    })\n                                }\n\n                            })\n                    })}\n                options={{\n                    actionsColumnIndex: -1, exportButton: true, paginationPosition: \"top\",\n                    pageSizeOptions: [5, 10, 20, 50, this.state.totalCount],\n                }}\n                localization={{\n                    error:\n                        <div className={\"errorContainer\"}>\n                            <span>Data could not be Loaded</span>\n                            <br/><br/>\n                            <Button\n                                style={{backgroundColor: \"red\", opacity: 20}}\n                                color={\"primary\"}\n                                variant={\"contained\"}\n                                onClick={()=>{\n                                    this.tableRef.current.onQueryChange({});\n                                }}\n                            >\n                                Retry\n                            </Button>\n                        </div>\n                }}\n                {...this.props}\n            >\n            </MaterialTable>\n        )\n    }\n}\n\nexport default YitDataTable","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Clients.css\"\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport Chip from \"@mui/material/Chip\";\n\nclass Clients extends YitComponent {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Name', field: \"fullName\"},\n                {title: 'E-mail', field: \"mail\"},\n                {title: 'Phone',   field: \"phone\" },\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Frozen\" },\n                    render: (rowData)=>{\n                        let result, color\n                        switch (rowData.stat){\n                            case 0: result = 'New'; color='green'; break;\n                            case 1: result = 'Active'; color= 'darkblue'; break;\n                            case 2: result = 'Frozen'; color=\"red\"; break;\n                            default:result = \"Unknown\"; color=\"red\"\n                        }\n                        return(<Chip  label={result}  style={{width: 120, backgroundColor: color, color:\"white\", fontWeight: \"bold\"}}/>)\n                    }\n                },\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async componentWillMount(){\n        try{\n            let clientsList = await this.MODELS._Client.getAll(0, 20)\n            if(clientsList != null){\n                this.setState({\n\n                    data: clientsList\n                })\n                this.currentPage.current.setState({\n                    isLoading: false\n                })\n            }else {\n\n            }\n        }catch (e){\n\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    async changeStat(rowData, stat){\n        try{\n            let updateResult = await this.MODELS._Client.update(rowData.id, {stat: stat})\n            if(updateResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        }catch (e){\n\n        }\n    }\n\n    async deleteEntry(rowData) {\n        try {\n            let updateResult = await this.MODELS._Client.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Client Deleted\", \"success\")}\n        } catch (error) {\n\n        }\n    }\n\n    async updateClientInfo(newData){\n        try{\n            let updateOp = await this.MODELS._Client.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Client Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    render() {\n        return (\n            <YitPage\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Clients\"}\n                ref={this.currentPage}>\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    dataModel={this.MODELS._Client}\n                    searchEntry={'fullName'}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => this.updateClientInfo(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            })\n                    }}\n                />\n            </YitPage>\n        )\n    }\n}\n\nexport default Clients\n","import React from 'react';\nimport { GoogleMap,  InfoWindow, Marker } from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\";\n\nimport Autocomplete from 'react-google-autocomplete';\n\n\n\nGeocode.setApiKey(\"AIzaSyB3zO_aU97QjkN-p1MUofYobc2QNCf3y2M\");\nGeocode.enableDebug();\n\nclass LocationSearchModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            zoom: 15,\n            height: 200,\n            mapPosition: {\n                lat: 0,\n                lng: 0,\n            },\n            markerPosition: {\n                lat: 0,\n                lng: 0,\n            },\n            Building: '',\n            pincode: ''\n        }\n    }\n\n\n\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                        mapPosition: {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        },\n                        markerPosition: {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        }\n                    },\n                    () => {\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                            response => {\n                                console.log(response)\n                                const address = response.results[0].formatted_address,\n                                    addressArray = response.results[0].address_components,\n                                    city = this.getCity(addressArray),\n                                    area = this.getArea(addressArray),\n                                    state = this.getState(addressArray);\n                                console.log('city', city, area, state);\n                                this.setState({\n                                    address: (address) ? address : '',\n                                    area: (area) ? area : '',\n                                    city: (city) ? city : '',\n                                    state: (state) ? state : '',\n                                })\n                            },\n                            error => {\n                                console.error(error);\n                            }\n                        );\n\n                    })\n            });\n        } else {\n            console.error(\"Geolocation is not supported by this browser!\");\n        }\n    };\n\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\n    //     if (\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\n    //         this.state.address !== nextState.address ||\n    //         this.state.city !== nextState.city ||\n    //         this.state.area !== nextState.area ||\n    //         this.state.state !== nextState.state\n    //     ) {\n    //         return true\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\n    //         return false\n    //     }\n    // }\n\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n        console.log('Changed ');\n    };\n\n    onInfoWindowClose = (event) => { };\n\n    onMarkerDragEnd = (event) => {\n\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                })\n            },\n            error => {\n\n            }\n        );\n    };\n\n    onPlaceSelected = (place) => {\n        console.log('place Selected')\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n\n        console.log('latvalue', latValue)\n        console.log('lngValue', lngValue)\n\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    // const AsyncMap = compose(\n    //     withProps({\n    //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\n    //         loadingElement: <div style={{ height: `100%` }} />,\n    //         containerElement: <div style={{ height: `400px` }} />,\n    //         mapElement: <div style={{ height: `100%` }} />,\n    //     }),\n    //     withScriptjs,\n    //     withGoogleMap\n    // )((props) =>\n    //     <GoogleMap\n\n    render() {\n\n\n\n        return (\n            <div>\n                <GoogleMap\n                    mapContainerStyle={{height: \"40vh\", width: \"100%\"}}\n                    zoom={this.state.zoom}\n                    center={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    center={ {\n                        lat: -3.745,\n                        lng: -38.523\n                    }}\n                >\n                    {/* InfoWindow on top of marker */}\n\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={'Dolores park'}\n                        draggable={true}\n                        onDragEnd={this.onMarkerDragEnd}\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                    />\n                    <InfoWindow\n                        onClose={this.onInfoWindowClose}\n                        position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                    >\n                        <div>\n                            <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                        </div>\n                    </InfoWindow>\n                    <Marker />\n\n                    {/* <MarkerWithLabel\n                            position={{ lat: -34.397, lng: 150.644 }}\n                            labelAnchor={new google.maps.Point(0, 0)}\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\n                        >\n                            <div>Hello There!</div>\n                        </MarkerWithLabel> */}\n\n\n                    {/* For Auto complete Search Box */}\n                    <Autocomplete\n                        style={{\n                            width: '100%',\n                            height: '40px',\n                            paddingLeft: '16px',\n                            marginTop: '2px',\n                            marginBottom: '2rem'\n                        }}\n                        onPlaceSelected={this.onPlaceSelected}\n                        types={['(regions)']}\n                    />\n                </GoogleMap>\n                <div className='row mt-5 p-2'>\n                    <div className=\"form-group col-12\">\n                        <label htmlFor=\"\">Address</label>\n                        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">City</label>\n                        <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">Area</label>\n                        <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">State</label>\n                        <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">Building</label>\n                        <input type=\"text\" name=\"Building\" className=\"form-control\" onChange={ this.onChange } value={ this.state.Building }/>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default LocationSearchModal;","import React from 'react';\nimport { GoogleMap,  InfoWindow, Marker } from \"@react-google-maps/api\";\nimport Autocomplete from 'react-google-autocomplete';\nclass YitLocationPicker extends React.Component {\n    constructor(props) {\n        super(props);\n        YitLocationPicker.displayName = \"YitLocationPicker\"\n        this.state = {\n            zoom: 15,\n            height: 200,\n            mapPosition: this.props.center === undefined ? {lat: -3.745, lng: -38.523} : this.props.center,\n            markerPosition: this.props.center === undefined ? {lat: -3.745, lng: -38.523} : this.props.center,\n\n        }\n    }\n\n\n    componentDidMount(){\n\n    };\n\n\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n\n    };\n\n    onMarkerDragEnd = (e) => {\n\n        let newLat = e.latLng.lat(), newLng = e.latLng.lng();\n\n        this.setState({\n            markerPosition: {\n                lat: newLat,\n                lng: newLng\n            },\n            mapPosition: {\n                lat: newLat,\n                lng: newLng\n            },\n        })\n        if(this.props.onDragEnd !== undefined && typeof this.props.onDragEnd == \"function\"){\n            this.props.onDragEnd(e)\n        }\n    };\n\n    render() {\n        return (\n\n                <GoogleMap\n                    mapContainerStyle={{height: \"40vh\", width: \"100%\"}}\n                    zoom={this.state.zoom}\n                    center={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n\n                >\n                    {/* InfoWindow on top of marker */}\n\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={'Dolores park'}\n                        draggable={true}\n                        onDragEnd={(e)=>{\n                            this.onMarkerDragEnd(e)\n\n                        }}\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                    />\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>Drag me to choose</span>\n                            </div>\n                        </InfoWindow>\n                    <Marker />\n\n                    {/* <MarkerWithLabel\n                            position={{ lat: -34.397, lng: 150.644 }}\n                            labelAnchor={new google.maps.Point(0, 0)}\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\n                        >\n                            <div>Hello There!</div>\n                        </MarkerWithLabel> */}\n\n\n                    {/* For Auto complete Search Box */}\n\n                </GoogleMap>\n        )\n    }\n\n}\n\nexport default YitLocationPicker;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewPartnerForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {GoogleMap, LoadScript, Marker} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport LocationSearchModal from \"../../../Components/LocationSearchModal/LocationSearchModal\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\nclass NewPartnerForm extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n    generatePassword(){\n        let chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        let passwordLength = 8;\n        let password = \"\";\n        for (let i = 0; i <= passwordLength; i++) {\n            let randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber +1);\n        }\n        return password\n    }\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        alert(password)\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'NewPartnerForm'}>\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                id=\"outlined-required\" name={'fullName'} label=\"Full Name\"\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Rent Policy\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Policy</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Stat</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"stat\"}\n                                    label=\"State\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Stat</MenuItem>\n                                    {PartnerStates.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"phone\"} id=\"outlined-required\"\n                                label=\"Phone\" placeholder={\"0X XX XX XX XX\"}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"mail\"} id=\"outlined-required\"\n                                label=\"Address mail\" placeholder={\"xxx@xxx.xxx\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <LoadScript\n                                googleMapsApiKey=\"AIzaSyB3zO_aU97QjkN-p1MUofYobc2QNCf3y2M\"\n                            >\n\n                                <YitLocationPicker/>\n                            </LoadScript>\n                        </Grid>\n\n                    </Grid>\n                </YitForm>\n            </div>\n        )\n    }\n}\n\nexport default NewPartnerForm","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Partners.css\"\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\n\nimport {Link} from \"react-router-dom\";\n\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport NewStationForm from \"../Stations/NewStationForm/NewStationForm\";\nimport YitFragment from \"../../Components/YitFragment/YitFragment\";\nimport NewPartnerForm from \"./NewPartnerForm/NewPartnerForm\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\nfunction statToString(stat) {\n    let result = \"\"\n    ClientStats.forEach((clientStat) => {\n        if (clientStat.value == stat) {\n            result = clientStat.label\n        }\n    })\n    return result\n}\n\n\nclass Partners extends YitComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Name', field: \"fullName\"},\n                {title: 'E-mail', field: \"mail\"},\n                {title: 'Phone', field: \"phone\"},\n                {title: 'Stat', field: \"stat\", render: rowData => statToString(rowData.stat), editable: 'never'},\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async loadPartners() {\n        let getOp = await this.MODELS._Partner.getAll(0, 20)\n        if (getOp.finalResult) {\n            let partnersList = getOp.result\n            this.setState({\n                failedLoading: false,\n                data: partnersList\n            })\n        } else {\n\n            this.setState({\n                failedLoading: true\n            })\n        }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadPartners()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        } catch (error) {\n\n        }\n    }\n\n    render() {\n        return (\n\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Partners\"}\n                reloadPrimaryInfo={async () => {\n                    await this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Partner\",\n                        icon: <MuiIcons.Add />,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewPartnerForm/>)}\n                    }\n\n                ]}\n            >\n\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    actions={[\n                        (rowData) => {\n                            switch (rowData.stat) {\n                                case 0:\n                                    return {\n                                        icon: () => <MuiIcons.Check style={{color: \"blue\"}}></MuiIcons.Check>,\n                                        onClick: (event, rowData) => this.changeStat(rowData, 1),\n                                        tooltip: \"validate\",\n                                    }\n                                    break\n                                case 1:\n                                    return {\n                                        icon: () => <MuiIcons.Block style={{color: \"red\"}}></MuiIcons.Block>,\n                                        tooltip: \"Freeze User\",\n                                        onClick: (event, rowData) => this.changeStat(rowData, 2)\n                                    }\n                                case 2:\n                                    return {\n                                        icon: () => <MuiIcons.Beenhere style={{color: \"green\"}}></MuiIcons.Beenhere>,\n                                        tooltip: \"Reactivate User\",\n                                        onClick: (event, rowData) => this.changeStat(rowData, 1)\n                                    }\n                            }\n\n                        },\n                        (rowData) =>{return{\n                            icon: () => <MuiIcons.Delete style={{color: \"red\"}}></MuiIcons.Delete>,\n                            onClick: (event, rowData) => {\n\n                                this.deleteEntry(rowData).then(r => {})\n                                //this.props.history.push(\"/Dashboard/Clients/\", { state: 'sample data'});\n                            },\n                            tooltip: \"validate\",\n                        }},\n\n                        (rowData) => {\n                            return {\n                                icon: () => <Link to={{\n                                    pathname: \"/Dashboard/PartnerDetails/\" + rowData.id,\n                                    search: '',\n                                    state: {data: this.state.rawData[rowData.rowIndex]}\n                                }}><MuiIcons.Launch style={{color: \"black\"}}/></Link>,\n                                tooltip: \"Details\",\n                            }\n                        }\n                    ]}\n                    onRowClick={(event, rowData) => {\n                        (event.target).ondblclick = () => {\n                            this.props.history.push(\"/Dashboard/PartnerDetails/\" + rowData.id, {  state: {data: this.state.rawData[rowData.rowIndex]}});\n\n                        }\n\n                    }}\n                    dataModel={this.MODELS._Partner}\n                    searchEntry={'fullName'}\n\n                />\n            </YitPage>\n\n\n        )\n    }\n}\n\nexport default Partners","\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./TabsWidget.css\"\nimport Button from \"@mui/material/Button\";\n\n\n\n\n\nclass  TabsWidget  extends React.Component {\n    static id = 0\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabsWidgetId: \"TabsWidget\" +TabsWidget.id,\n            tabContentId: \"tabContent\"+TabsWidget.id,\n            tabButtonId: \"tabButton\"+TabsWidget.id,\n            currentIndex : 0\n        }\n        TabsWidget.id++\n    }\n\n    changeSelected(selectedIndex){\n        let buttonsList = document.getElementsByClassName(this.state.tabButtonId)\n        for(let i=0; i<buttonsList.length; i++){\n            if(buttonsList[i].id == selectedIndex){\n                buttonsList[i].style.color = \"darkblue\"\n                buttonsList[i].style.textDecoration = \"underline\"\n            }else {\n                buttonsList[i].style.color = \"grey\"\n                buttonsList[i].style.textDecoration = \"\"\n            }\n        }\n\n    }\n    generateTabs(){\n\n        return (\n        this.props.tabsList.map((tab, index)=>{\n\n            return(\n            <div className={\"tabTitle\"}>\n                <div\n                    style={{color: \"green\"}}\n                    id={this.state.tabButtonId+index}\n                    fullWidth className={\"TabsWidgetTab \" + this.state.tabButtonId}\n                    onClick={async () => {\n                        this.setState({\n                            currentIndex: index\n                        })\n                        if (tab.clickHandler != undefined) {\n                            tab.clickHandler()\n                        }\n                    }}\n                >{tab.title}</div>\n            </div>\n            )\n        })\n        )\n    }\n\n     setContent(index){\n\n         this.changeSelected(this.state.tabButtonId+index)\n         if(this.props.children.length === undefined){\n             //this.tabsRefs[0].current.color = \"Primary\"\n             return(this.props.children)\n         }else{\n             return(this.props.children[index])\n             //if(this.props.tabsList[0].clickHandler != undefined){this.props.tabsList[0].clickHandler()}\n         }\n\n\n\n        //document.getElementById(this.state.tabButtonId+index).style.color=  \"red\"\n\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    render() {\n        return(\n            <React.Fragment>\n                <section className={\"TabsWidget\"} id={this.state.tabsWidgetId}>\n                    <div className=\"tabsHeader\">\n                        {this.generateTabs()}\n                    </div>\n                    <div className=\"tabContent\" id={this.state.tabContentId}>\n                        {this.setContent(this.state.currentIndex)}\n                    </div>\n                </section>\n            </React.Fragment>\n\n        )\n    }\n\n}\nexport default TabsWidget","import React from \"react\";\nimport \"./YitView.css\"\nimport Button from \"@mui/material/Button\";\nclass YitView extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state =\n            {\n                active : this.props.active\n            }\n        this.myRef = React.createRef();\n    }\n\n    setActive(state){\n        this.setState({\n            active : state\n        })\n    }\n\n\n\n    render() {\n        if(this.state.active){\n            return (\n                <div className={\"active \" + this.props.className} id={this.props.id} ref={this.myRef}>\n                    {this.props.children}\n                </div>\n            )\n        }\n        return (\n           <div  className={\"active \" + this.props.className} id={this.props.id} ref={this.myRef}>\n               {this.props.children}\n               <div className={\"anActive\"}>\n                   {this.props.anActiveContent}\n               </div>\n\n           </div>\n        )\n    }\n}\nexport default YitView","import React from \"react\";\nimport \"./StationDetails.css\"\n\n\n//import LoadingButton from '@mui/lab/LoadingButton';\nimport SaveIcon from '@mui/icons-material/Save';\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport TabsWidget from \"../../../Components/TabsWidget/TabsWidget\";\nimport YitView from \"../../../Components/YitView/YitView\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\n\nconst MuiIcons = require('@mui/icons-material');\n\nconst PowerBank =  ({PowerBank, clickHandler, id})=>{\n    function drawContent(stat){\n        if(stat){\n            return (\n                <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\"\n                        onClick={()=>{\n                            clickHandler(setStat)\n                        }}>\n                    Eject\n                </Button>\n            )\n        }else {\n            return (\n                <div>Loading</div>\n                // <LoadingButton\n                //     fullWidth\n                //     loading\n                //     loadingPosition=\"start\"\n                //     startIcon={<SaveIcon />}\n                //     variant=\"outlined\"\n                // >\n                //     Requesting\n                // </LoadingButton>\n            )\n        }\n    }\n    const [stat, setStat] = React.useState(true);\n    return(\n        <div className={\"PowerBankView\"} id={id} style={{width: 200}}>\n        <b>ID: </b>\n            {PowerBank.powerBankId}<br/>\n            <b>Power Level:</b>{PowerBank.powerLevel}<br/>\n            {drawContent(stat)}\n        </div>\n    )\n}\n\nconst APNView =  ({APN,  id})=>{\n    if(APN != undefined){\n        return(\n            <div className={\"PowerBankView\"} id={id} >\n                <Grid container spacing={2} xs={8} style={{width: \"100%\"}}>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"MCCMNC\"\n                            defaultValue={APN.MCCMNC}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"User Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Password\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }else {\n        return <div>APN information not loaded yet</div>\n    }\n}\n\nclass StationDetails extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading : false,\n            currentStation: {Partner: {}},\n            currentStationInfo: {},\n            currentTab :\"one\",\n            stationAPNs : [],\n            }\n        this.loadPrimaryData().then(r => {})\n    }\n\n    async loadPrimaryData(){\n        let loadStationOp = await this.loadStationInfo(this.props.id)\n        if(loadStationOp){\n            await this.loadPowerBanksInfo(this.state.currentStation.id)\n            await this.loadAPN(this.state.currentStation.id, 0)\n        }\n    }\n    async componentDidMount() {\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                isLoading: false\n            })\n        }\n    }\n\n    async loadStationInfo(id) {\n        let getOneOP = await this.MODELS._Station.getOneByPublicId(id)\n        if (getOneOP.finalResult === true) {\n            let currentStation = getOneOP.result\n            this.setState({\n                currentStation: currentStation,\n            })\n            return true\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPowerBanksInfo(id) {\n        if(id != undefined){\n            let currentStationInfo = await this.MODELS._Station.getOneRealTime(id)\n            if (currentStationInfo !== false) {\n                this.setState({\n                    currentStationInfo: currentStationInfo,\n                })\n            } else {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load Station primary  Data\", \"error\")\n            }\n        }\n    }\n\n    async loadAPN(stationId, index) {\n        if(stationId != undefined){\n            let APN = await this.MODELS._Station.queryAPNNs(stationId, index)\n            if(APN !== false){\n                let current  = this.state.stationAPNs\n                current[index] = APN\n                this.setState({\n                    stationAPNs: current\n                })\n            }else {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load APN info\", \"error\")\n            }\n        }\n    }\n\n    drawPowerBanks(powerBanksList){\n        if(powerBanksList != undefined){\n            if(powerBanksList.length > 0){\n                return (\n                    powerBanksList.map((powerBank, index)=>{\n                        return(\n                            <div className=\"infoEntry\">\n                                <PowerBank\n                                    id={\"PowerBank\"+index}\n                                    PowerBank={powerBank}\n                                    clickHandler={\n                                        async (setState) => {\n                                            setState(false)\n                                            let r = await this.MODELS._Station.rentPowerBank(this.state.currentStation.id)\n\n                                            if(r){\n                                                Notifications.drawActionResult(\"pagesNotifications\", \"Power Bank ejected\", \"success\")\n                                                document.getElementById(\"PowerBank\"+index).style.display = \"none\"\n                                            }else {\n                                                Notifications.drawActionResult(\"pagesNotifications\", \"Could not rent the Power Bank\", \"error\")\n                                                setState(true)\n                                            }\n                                        }\n                                    }\n                                />\n                            </div>\n                        )\n                    })\n                )\n            }else {\n                return (<div>No Power Banks on the station</div>)\n            }\n        }else {\n            return (<div>Fetching power banks data</div>)\n        }\n\n    }\n    drawAPN(){\n        this.MODELS.station.queryAPNNs(this.state.currentStation.id, \"00\").then((result)=>{\n            if(result != false){\n                return <APNView APN={result}></APNView>\n            }else {\n                Notifications.drawActionResult(\n                    \"pagesNotifications\",\n                    \"Could not load APN info\",\n                    \"error\",\n                    \"standard\",\n                    null)\n            }\n        })\n    }\n    render() {\n        return (\n            <YitFragment\n                ref={this.currentPage}\n                customClass={\"StationDetailsFragment\"}\n                customId={\"StationDetailsFragment\"}\n                title={\"Station Details\"}\n            >\n                <div className=\"globalInformationHolder\">\n                    <div className=\"infoEntry\">\n                        <b>System Id:</b> {this.state.currentStation.systemId}\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Public Id:</b>\n                        {this.state.currentStation.id}\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Total Power Banks:</b>\n                        1\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Partner:</b>\n                        {this.state.currentStation.Partner.fullName}\n                    </div>\n                </div>\n                <YitView\n                    ref={this.myRef}\n                    className=\"informationHolder\"\n                    active={true}\n                    anActiveContent={\n                        <React.Fragment>\n                            <b>Station offline</b>\n                            <Button\n                                variant=\"contained\"\n                                color={\"primary\"}\n                                onClick={()=>{\n                                    this.myRef.current.setActive(true)\n                                    this.loadStationInfo(this.props.id).then(async ()=>{\n                                        //await this.loadPowerBanksInfo(this.state.currentStation.id)\n                                        await this.loadAPN(this.state.currentStation.id, 0)\n                                    })\n                                }}>\n                                Try Again\n                            </Button>\n                        </React.Fragment>\n                    }\n                >\n                    <TabsWidget\n                        tabsList={[\n                            {\n                                title: \"Power Banks\",\n                            },\n                            {\n                                title: \"Access point names\",\n                            },\n                            {\n                                title: \"Latest Transactions\",\n                            }\n                        ]}>\n                        <div id={\"powerBanksHolder\"}>\n                            {this.drawPowerBanks(this.state.currentStationInfo.powerBanksList)}\n                        </div>\n                        <div id={\"APPNSHolder\"}>\n                            <TabsWidget\n                                tabsList={[\n                                    {\n                                        title: \"First\",\n\n                                    },\n                                    {\n                                        title: \"Second\",\n                                    },\n                                    {\n                                        title: \"Third\",\n                                    },\n                                    {\n                                        title: \"Forth\",\n                                    },\n                                    {\n                                        title: \"Fifth\",\n                                    },\n\n                                ]}>\n                                <div id=\"firstHolder\"><APNView APN={this.state.stationAPNs[0]}/></div>\n                                <div id=\"secondHolder\"><APNView APN={this.state.stationAPNs[1]}/></div>\n                                <div id=\"thirdHolder\"><APNView APN={this.state.stationAPNs[2]}/></div>\n                                <div id=\"forthHolder\"><APNView APN={this.state.stationAPNs[3]}/></div>\n                                <div id=\"fifthHolder\"><APNView APN={this.state.stationAPNs[4]}/></div>\n                            </TabsWidget>\n                        </div>\n                    </TabsWidget>\n                </YitView>\n            </YitFragment>\n        )\n    }\n}\n\nexport default StationDetails\n\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport DynamicSubmitButton from \"../DynamicSubmitButton/DynamicSubmitButton\";\n\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\nconst DoneMsg = () =>{\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n    </div>)\n}\nclass YitTcpForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            newInfo: {},\n        }\n        this.submitButton = React.createRef()\n    }\n\n    changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.value;\n        if(e.target.type === \"number\"){\n            val = parseInt(val)\n        }\n        this.state.newInfo[nam]= val\n    }\n\n    drawResult(){\n        this.props.view.pushNotification(this.props.errorMsg, \"error\", 2000)\n        //Notifications.drawActionResult(\"pagesNotifications\", this.props.errorMsg, \"error\")\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault()\n        this.submitButton.current.setState({isSubmitting : true})\n        this.setState({\n            isSubmitting: true\n        })\n        if(await this.props.handleSubmit(this.state.newInfo) === true){\n            this.setState({\n                isSubmitted: true\n            })\n\n            setTimeout(()=>{\n                this.setState({\n                    isSubmitted: false,\n                    isSubmitting: false\n                })\n            }, 2000)\n\n        }else {\n            this.drawResult()\n            this.submitButton.current.setState({isSubmitting : false})\n        }\n    }\n\n    recursiveCloneChildren(children) {\n        return React.Children.map(children, child => {\n            if(!React.isValidElement(child)) return child;\n            let  childProps = {onChange: this.changeHolder.bind(this)};\n            childProps.children = this.recursiveCloneChildren(child.props.children);\n            return React.cloneElement(child, childProps);\n        })\n    }\n\n    async componentDidMount() {\n\n    }\n\n    render() {\n        if(!this.state.isSubmitted){\n            return (\n\n                    <form  onSubmit={this.handleSubmit.bind(this)} id={\"myForm\"}>\n                        <Grid container  spacing={2} xs={12} >\n                            <Grid container item  xs={10} spacing={2}>\n                                {this.recursiveCloneChildren(this.props.children)}\n                            </Grid>\n                            <Grid item xs={2}>\n                                <DynamicSubmitButton ref={this.submitButton}></DynamicSubmitButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n\n            )\n        }else{\n            return (\n                <div className={\"YitTcpForm\"} id={\"YitTcpForm\"}>\n                    <DoneMsg/>\n                </div>\n            )\n        }\n\n    }\n}\nexport default YitTcpForm","import React from \"react\";\nimport \"./StationEditForm.css\"\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport TabsWidget from \"../../../Components/TabsWidget/TabsWidget\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitTcpForm from \"../../../Components/YitTcpForm/YitTcpForm\";\nimport {VolumeDown, VolumeUp} from \"@mui/icons-material\";\nimport Slider from \"@mui/material/Slider\";\n\nconst MuiIcons = require('@mui/icons-material');\n\nconst APNView =  ({APN,  id})=>{\n    if(APN == undefined){\n        APN = {}\n    }\n\n    return(\n        <div className={\"PowerBankView\"} id={id} >\n            <YitForm>\n                <Grid container spacing={2} xs={12} style={{width: \"100%\"}}>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"MCCMNC\"\n                            defaultValue={APN.MCCMNC}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"User Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Password\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </YitForm>\n\n        </div>\n    )\n}\n\nclass StationEditForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading : false,\n            currentStation: {Partner: {}},\n            currentStationInfo: {},\n            currentTab :\"one\",\n            stationAPNs : [],\n\n            partnersList: [],\n            statsList: [\n                {label: \"active\", id: 0},\n                {label: \"Frozen\", id: 1}\n                ]\n            }\n\n        this.fragment = React.createRef()\n        if(this.state.currentStation === undefined){\n            this.state.currentStation = {}\n        }else {\n            this.state.currentStation = this.props.station\n            this.loadPrimaryData().then(r => {})\n        }\n    }\n\n    async loadPartners(){\n        let getAllOp = await this.MODELS._Partner.getAll(0, 999)\n        if(getAllOp.finalResult !== false){\n            let partners = getAllOp.result.rows\n            let prepared = partners.map(partner =>{\n                return{value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        }else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPrimaryData(){\n\n        await this.loadPartners();\n        if(this.state.failedLoading){\n            this.fragment.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.fragment.current.setState({\n                isLoading: false\n            })\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n    static getDerivedStateFromProps(){\n\n    }\n\n    async loadStationInfo(id) {\n        let getOneOP = await this.MODELS.station.getOnById(id)\n        if (getOneOP.finalResult === true) {\n            let currentStation = getOneOP.result\n\n            this.setState({\n                currentStation: currentStation,\n            })\n            return true\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPowerBanksInfo(id) {\n        let currentStationInfo = await this.MODELS._Station.getOneRealTime(id)\n        if (currentStationInfo != false) {\n            this.setState({\n                currentStationInfo: currentStationInfo,\n            })\n        } else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load Station primary  Data\", \"error\")\n        }\n    }\n\n    async loadAPN(stationId, index) {\n        let APN = await this.MODELS._Station.queryAPNNs(stationId, index)\n        if(APN != false){\n            let current  = this.state.stationAPNs\n            current[index] = APN\n            this.setState({\n                stationAPNs: current\n            })\n        }else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load APN info\", \"error\")\n        }\n    }\n\n    async handleSubmitStationData(newData) {\n        let updateOp = await this.MODELS._Station.update(this.state.currentStation.systemId, newData)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    async handleSetAddress(newData) {\n        let updateOp = await this.MODELS._Station.setAddress(this.state.currentStation.id, newData)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    async handleSetVolume(newData) {\n        let updateOp = await this.MODELS._Station.setVolume(this.state.currentStation.id, newData.level)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    drawAPN(){\n        this.MODELS.station.queryAPNNs(this.state.currentStation.id, \"00\").then((result)=>{\n            if(result != false){\n                return <APNView APN={result}></APNView>\n            }else {\n                Notifications.drawActionResult(\n                    \"pagesNotifications\",\n                    \"Could not load APN info\",\n                    \"error\",\n                    \"standard\",\n                    null)\n            }\n        })\n    }\n\n    render() {\n        return (\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"StationEditForm\"}\n                customId={\"StationEditForm\"}\n                title={\"Station Details\"}\n                primaryInfoLoader={()=>{this.loadPrimaryData().then(r => {})}}\n            >\n\n\n                <div className=\"hardCodedInfoHolder\">\n                    <TabsWidget\n                        tabsList={[\n                            {title: \"Primary Info\"},\n                            {title: \"Server configuration\"},\n                            {title: \"APNS\"},\n                            {title: \"Sound Level\"},\n                        ]}\n                    >\n                        <YitForm\n                            handleSubmit={this.handleSubmitStationData.bind(this)}\n                        >\n                            <Grid container spacing={2} xs={12}>\n                                <Grid item xs={12}><b>Station Primary data</b></Grid>\n                                <Grid item xs={5}>\n                                    <TextField\n                                        disabled fullWidth required variant={\"outlined\"}\n                                        id=\"outlined-required\" label=\"SystemId\" defaultValue={this.state.currentStation.systemId}\n                                    >\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={7}>\n                                    <TextField\n                                        fullWidth required variant={\"outlined\"}\n                                        name={\"id\"} id=\"outlined-required\" label=\"Public Id\" defaultValue={this.state.currentStation.id}\n                                    />\n                                </Grid>\n                                <Grid item xs={8}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"demo-simple-select-label\">Partner</InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"currentPartner\"\n                                            label=\"Partner\"\n                                            name={\"currentPartner\"}\n                                            defaultValue={this.state.currentStation.currentPartner}\n\n                                        >\n                                            {this.state.partnersList.map((option) => (\n                                                <MenuItem value={option.value}> {option.label}</MenuItem>\n                                            ))}\n                                            <MenuItem value={10}>Ten</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            name={\"stat\"}\n                                            label=\"Stat\"\n                                            defaultValue={this.state.currentStation.stat}\n                                        >\n                                            {this.state.statsList.map((option) => (\n                                                <MenuItem value={option.id}> {option.label}</MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                            </Grid>\n                        </YitForm>\n                        <YitTcpForm\n                            handleSubmit={this.handleSetAddress.bind(this)}>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth size={\"small\"} name={\"address\"}\n                                    required id=\"outlined-required\" label=\"Server address\" placeholder=\"xxx.xxx.xxx.xxx\"\n                                >\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <TextField\n                                    fullWidth required type={\"number\"} name={\"port\"} size={\"small\"}\n                                    id=\"outlined-required\" label=\"Port Number\" defaultValue=\"4000\"\n                                />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <TextField\n                                    fullWidth required type={\"number\"}  name={\"heartBit\"} size={\"small\"}\n                                    id=\"outlined-required\" label=\"Heart Bit\" defaultValue=\"30\"\n                                />\n                            </Grid>\n                        </YitTcpForm>\n                        <TabsWidget\n                            tabsList={[\n                                {\n                                    title: \"First\",\n\n                                },\n                                {\n                                    title: \"Second\",\n                                },\n                                {\n                                    title: \"Third\",\n                                },\n                                {\n                                    title: \"Forth\",\n                                },\n                                {\n                                    title: \"Fifth\",\n                                },\n\n                            ]}\n                        >\n                            <div id=\"firstHolder\"><APNView APN={this.state.stationAPNs[0]}/></div>\n                            <div id=\"secondHolder\"><APNView APN={this.state.stationAPNs[1]}/></div>\n                            <div id=\"thirdHolder\"><APNView APN={this.state.stationAPNs[2]}/></div>\n                            <div id=\"forthHolder\"><APNView APN={this.state.stationAPNs[3]}/></div>\n                            <div id=\"fifthHolder\"><APNView APN={this.state.stationAPNs[4]}/></div>\n                        </TabsWidget>\n                        <YitTcpForm\n                            view={this.fragment.current}\n                            errorMsg={\"Could not set volume correctly\"}\n                            handleSubmit={this.handleSetVolume.bind(this)}\n                        >\n                            <Grid item xs={12}>\n                                <div style={{display: \"flex\"}}>\n                                    <VolumeDown />\n                                    <Slider\n                                        name={\"level\"}\n                                        min={0}\n                                        max={15}\n                                        aria-label=\"Volume\"\n                                        onChange={\"\"} />\n                                    <VolumeUp />\n                                </div>\n                            </Grid>\n                        </YitTcpForm>\n                    </TabsWidget>\n                </div>\n            </YitFragment>\n        )\n    }\n}\nexport default StationEditForm\n\n","import React from 'react';\nimport \"./Stations.css\"\nimport ReactDOM from \"react-dom\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport NewStationForm from \"./NewStationForm/NewStationForm\";\nimport Chip from \"@mui/material/Chip\";\nimport StationDetails from \"./StationDetails/StationDetails\";\nimport StationEditForm from \"./StationEditForm/StationEditForm\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\nclass Stations extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            failedLoading : false,\n            columns: [\n                {title: 'SystemId', field: 'systemId'},\n                {title: 'ID', field: 'id'},\n                {\n                    title: 'Stat', field: 'stat',\n                    lookup: {\n                        0: <Chip  label=\"Active\" color={\"primary\"} style={{width: 120}}/>,\n                        1: <Chip variant={\"outlined\"} label=\"Offline\"  style={{width: 120, color: \"red\"}} />\n                    }\n                },\n            ],\n            stationsList : [],\n            page: 0,\n            totalCount: 0\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        this.tableRef = React.createRef();\n    }\n\n    async loadPrimaryData() {\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadPrimaryData()\n        setTimeout(()=>{\n            //this.tableRef.current.onToggleDetailPanel([0], rowData => <StationDetails id={rowData.systemId}/>)\n        }, 3000)\n\n    }\n\n\n    componentWillUnmount() {\n\n    }\n\n    setValid = async() =>{\n        let result = [];\n        let data = this.state.rawData;\n        for(let i=0; i<data.length; i++){\n            if (parseInt(data[i].valid) == 1){\n                result.push(data[i])\n            }\n        }\n        this.setState({data: result})\n    }\n\n    render() {\n        return (\n        <>\n            <YitPage\n                ref={this.currentPage}\n                title={\"Stations\"}\n                customClass={\"StationsPage\"}\n                customdId={\"StationsPage\"}\n                contentCustomId={\"StationsPageContent\"}\n                reloadPrimaryInfo={()=>{\n                    this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Station\",\n                        icon : <MuiIcons.Add/>,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewStationForm></NewStationForm>)}\n                    }\n                ]}\n                reloadPrimaryInfo={()=>this.loadPrimaryData()}\n            >\n                <YitDataTable\n                    columns={this.state.columns}\n                    actions={[\n                        {\n                            icon: ()=><MuiIcons.Block style={{color: \"darkred\"}}/>,\n                            tooltip: 'Delete',\n                        },\n                        {\n                            icon: ()=><MuiIcons.Delete style={{color: \"darkred\"}}/>,\n                            tooltip: 'Delete',\n                        },\n                        {\n                            icon: () => <MuiIcons.Edit style={{color: \"\"}}/>,\n                            tooltip: \"Edit\",\n                            onClick: (event, data) => this.currentPage.current.mountBackDrop(<StationEditForm station={data}/>)\n                        }\n                    ]}\n                    dataModel={this.MODELS._Station}\n                    detailPanel={(rowData) => {\n                        return (\n                            <div className={\"stationDetailsHolder\"}>\n                                <StationDetails id={rowData.id}/>\n                            </div>\n                        )\n                    }}\n\n                />\n            </YitPage>\n            </>\n\n\n        )\n    }\n}\n\nexport default Stations","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./PartnerEditForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {LoadScript} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport {API_KEY} from \"../../../Apis/GlobalConfig\";\n\n\nclass PartnerEditForm extends YitComponent {\n    constructor(props) {\n\n\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n\n        }\n        this.fragment = React.createRef()\n\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n\n    async handleSubmit(newData) {\n        let updateOp = await this.MODELS._Partner.update(this.props.partner.id, newData)\n        if (updateOp.finalResult) {\n            this.formRef.current.setState({\n                doneMsg: updateOp.result\n            })\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: updateOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"PartnerEditForm\"}\n                customId={\"PartnerEditForm\"}\n                isLoading={false}\n                primaryInfoLoader={() => this.loadPrimaryData().then()}\n            >\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                    onSuccess={()=>{\n                        window.location.reload()\n                    }}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                id=\"outlined-required\" name={'fullName'}\n                                label=\"Name\" defaultValue={this.props.partner.fullName}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n                                    variant={\"outlined\"}\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Rent Policy\"\n                                    defaultValue={this.props.partner.type}\n                                >\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Stat</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"stat\"}\n                                    label=\"State\"\n                                    defaultValue={this.props.partner.stat}\n                                >\n                                    {PartnerStates.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"phone\"} id=\"outlined-required\"\n                                label=\"Phone\" placeholder={\"0X XX XX XX XX\"} defaultValue={this.props.partner.phone}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"mail\"} id=\"outlined-required\" defaultValue={this.props.partner.mail}\n                                label=\"Address mail\" placeholder={\"xxx@xxx.xxx\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <LoadScript\n                                googleMapsApiKey={API_KEY}\n                            >\n                              <YitLocationPicker center={{lat: this.props.partner.x, lng: this.props.partner.y}}/>\n                            </LoadScript>\n                        </Grid>\n                    </Grid>\n                </YitForm>\n            </YitFragment>\n        )\n\n\n    }\n}\n\nexport default PartnerEditForm","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./CodeGeneratorForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport RechargeCodeStates from \"../../../Structures/RechargeCodeStates\";\nimport YitComponent from \"../../../Structures/YitComponent\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\n\nclass CodeGeneratorForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            partners: []\n        }\n        this.currentForm = React.createRef()\n    }\n    async componentDidMount() {\n\n    }\n    async  doGenerate(data){\n        data[\"partnerId\"] = this.props.partner.id\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            this.currentForm.current.setState({errMsg: JSON.stringify(c.error)})\n            return false\n        }\n    }\n    render() {\n        return (\n            <div className={\"CodeGeneratorForm\"}>\n                <YitForm\n                    ref={this.currentForm}\n                    errorMsg={\"Lot created successfully\"}\n                    handleSubmit={this.doGenerate.bind(this)}\n                >\n\n                        <TextField\n                            disabled fullWidth variant={\"outlined\"}\n                            name=\"partnerId\" labelId={\"Partner-select-label\"} label={\"Partner\"}\n                            defaultValue={this.props.partner.fullName}\n                        >\n\n                        </TextField>\n\n                    <br/><br/>\n                    <TextField\n                        required fullWidth variant={\"outlined\"}\n                        name={\"amount\"}\n                        label=\"Amount\"\n                        type={\"number\"}\n                    >\n                    </TextField>\n                    <br/><br/>\n                    <TextField\n                        required fullWidth variant={\"outlined\"}\n                        name={\"number\"} label=\"Number\"\n                        type=\"number\"\n                    >\n                    </TextField>\n                    <br/><br/>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"algorithm-select-label\">Algorithm</InputLabel>\n                        <Select\n                            fullWidth\n                            name=\"algorithm\"\n                            label={\"Algorithm\"}\n                            defaultValue={0}\n                        >\n                            <MenuItem value={0}>bcrypt + JWT</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br/><br/>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                        <Select\n                            required\n                            fullWidth\n                            name={\"stat\"}\n                            labelId=\"demo-simple-select-label\"\n                            label=\"Stat\"\n                            defaultValue={1}\n                        >\n                            {RechargeCodeStates.map(cs =>{\n                                return       <MenuItem value={cs.value}>{cs.label}</MenuItem>\n                            })}\n                        </Select>\n                    </FormControl>\n                </YitForm>\n            </div>\n\n\n        )\n    }\n}\nexport default CodeGeneratorForm","import React from \"react\";\nimport \"./PartnerDetails.css\"\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport {GoogleMap, LoadScript} from \"@react-google-maps/api\";\nimport TabsWidget from \"../../Components/TabsWidget/TabsWidget\";\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\nimport StationDetails from \"../Stations/StationDetails/StationDetails\";\nimport Chip from \"@mui/material/Chip\";\nimport {Edit,  QrCode2Outlined} from \"@mui/icons-material\";\nimport PartnerEditForm from \"./PartnerEditForm/PartnerEditForm\";\nimport CodeGeneratorForm from \"./CodeGeneratorForm/CodeGeneratorForm\";\nconst MuiIcons = require(\"@mui/icons-material\")\nconst PartnerStations = ({data, icons}) => {\n\n    let columns = [\n        {title: 'SystemId', field: 'systemId'},\n        {title: 'ID', field: 'id'},\n        {\n            title: 'Stat', field: 'stat',\n            lookup: {\n                0: <Chip label=\"Active\" color={\"primary\"} style={{width: 120}}/>,\n                1: <Chip variant={\"outlined\"} label=\"Offline\" style={{width: 120, color: \"red\"}}/>\n            }\n        },\n    ]\n    return (\n        <MaterialTable\n            style={{height: \"100%\"}}\n            components={\n                {\n                    Container: props => (\n                        <div style={\n                            {\n                                position: \"relative\", width: '100%', height: \"100%\",\n                                overflow: \"auto\"\n                        }}>\n                            {props.children}\n                        </div>\n                    ),\n\n                }\n            }\n            icons={icons}\n            title={\"\"}\n            columns={columns}\n            data={data}\n            localization={{body: {editRow: {deleteText: 'are you sur you wanna delete this item '}}}}\n            actions={[\n                {\n                    icon: () => <MuiIcons.Block style={{color: \"darkred\"}}/>,\n                    tooltip: 'Delete',\n\n                },\n                {\n                    icon: () => <MuiIcons.Delete style={{color: \"darkred\"}}/>,\n                    tooltip: 'Delete',\n                },\n                (rowData) => {\n                    return {\n                        icon: () => <MuiIcons.Launch\n                            style={{color: \"black\"}}\n                            onClick={()=>{\n                                this.currentPage.current.mountBackDrop(\n                                    <StationDetails id={rowData.id}></StationDetails>\n                                )\n                            }\n                            }\n                        />,\n                        tooltip: \"Details\",\n                    }\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                exportButton: true,\n                toolbar: false,\n            }}\n        />\n    )\n}\n\nclass PartnerDetails extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state =\n            {\n                isLoading: true,\n                failedLoading: true,\n                currentPartner: {Stations : {}},\n            }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadCurrentPartner(this.props.id)\n        if(this.state.failedLoading){\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async loadCurrentPartner(id) {\n        let getOneOp = await this.MODELS._Partner.getOnById(id)\n        if (getOneOp.finalResult === true) {\n\n            this.setState({\n                failedLoading: false,\n                currentPartner: getOneOp.result,\n            })\n\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    render() {\n        return (\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"PartnerDetails\"}\n                customId={\"PartnerDetailsPage\"}\n                title={\"Partner Details\"}\n                topOperations={[\n                    {\n                        text:\"Print\",\n                        icon: <QrCode2Outlined fontSize={\"medium\"}></QrCode2Outlined>,\n                        onClick: ()=>{\n                            this.currentPage.current.mountBackDrop(\n                                <CodeGeneratorForm partner={this.state.currentPartner}/>\n                            )\n                        }\n                    },\n                    {\n                        text: \"Edit\",\n                        icon: <Edit fontSize={\"medium\"} />,\n                        onClick: ()=>{\n                            this.currentPage.current.mountBackDrop(\n                                <PartnerEditForm partner={this.state.currentPartner}/>\n                            )\n                        }\n                    }\n                ]}\n                reloadPrimaryInfo={()=>{this.loadPrimaryData().then()}}\n            >\n                <TabsWidget\n                    tabsList={[\n                        {title: \"Global Information\"},\n                        {title: \"Stations\"},\n                        {title: \"Transactions\"},\n                    ]}\n                >\n                    <div id={\"GlobalInfoHolder\"}>\n                        <div className=\"globalInformationHolder\">\n                            <b>Name:</b><br/>\n                            {this.state.currentPartner.fullName}\n                            <br/><br/>\n                            <b>Total affected stations:</b><br/>\n                            {this.state.currentPartner.Stations.length}\n                            <br/><br/>\n                            <b>Phone:</b><br/>\n                            {this.state.currentPartner.phone}\n                            <br/><br/>\n                            <b>Current Stat:</b><br/>\n                            {this.state.currentPartner.stat}\n                        </div>\n                        <div className=\"mapHolder\">\n                            <LoadScript\n                                googleMapsApiKey=\"AIzaSyB3zO_aU97QjkN-p1MUofYobc2QNCf3y2M\"\n                            >\n                                <GoogleMap\n                                    mapContainerStyle={{width: \"100%\", height: \"100%\"}}\n                                    center={{\n                                        lat: this.state.currentPartner.x,\n                                        lng: this.state.currentPartner.y\n                                    }}\n                                    zoom={10}\n                                >\n                                    { /* Child components, such as markers, info windows, etc. */}\n                                    <></>\n                                </GoogleMap>\n                            </LoadScript>\n                        </div>\n                    </div>\n                    <>\n                        <PartnerStations\n                            data={this.state.currentPartner.Stations}\n                            icons={tableIcons}\n                        ></PartnerStations>\n                    </>\n                    <></>\n                </TabsWidget>\n            </YitPage>\n\n        )\n    }\n}\n\nexport default PartnerDetails","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Transactions.css\"\nimport MaterialTable,  {MTableToolbar}from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\nimport {Link} from \"react-router-dom\";\n\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport RechargeCodeStates from \"../../Structures/RechargeCodeStates\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitForm from \"../../Components/YitForm/YitForm\";\nimport StatBox from \"../../Components/StatBox/StatBox\";\n\nimport TransactionOperations from \"../../Structures/TransactionOperations\";\nconst MuiIcons = require('@mui/icons-material');\nfunction statToString(stat){\n    let result = \"\"\n    RechargeCodeStates.forEach((reCodeState)=>{\n        if(reCodeState.value == stat){\n            result = reCodeState.label\n        }\n    })\n    return result\n}\n\nclass ReCodeGeneratorForm extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            partners: []\n        }\n    }\n    async componentDidMount() {\n        let partners = await this.props.getPartners(0, 999)\n        let prepared = partners.map(partner => {\n\n            return {value: partner.id, label: partner.fullName}\n        })\n        this.setState({\n            partners : prepared\n        })\n    }\n    render() {\n        return (\n            <YitForm\n                errorMsg={\"Lot created successfully\"}\n                handleSubmit={this.props.handleSubmit}>\n                <FormControl fullWidth>\n                    <InputLabel id=\"Partner-select-label\">Partner</InputLabel>\n                    <Select\n                        fullWidth\n                        name=\"partnerId\"\n                        labelId={\"Partner-select-label\"}\n                        label={\"Partner\"}\n                    >\n                        {this.state.partners.map(partner =>{\n                            return   <MenuItem value={partner.value}>{partner.label}</MenuItem>\n                        })\n                        }\n                    </Select>\n                </FormControl>\n                <br/><br/>\n                <TextField\n                    required\n                    fullWidth\n                    name={\"amount\"}\n                    label=\"Amount\"\n                    size=\"small\"\n                    type={\"number\"}\n                >\n                </TextField>\n                <br/><br/>\n                <TextField\n                    required\n                    fullWidth\n                    name={\"number\"}\n                    label=\"Number\"\n                    size=\"small\"\n                    type=\"number\"\n                >\n                </TextField>\n                <br/><br/>\n                <FormControl fullWidth>\n                    <InputLabel id=\"algorithm-select-label\">Algorithm</InputLabel>\n                    <Select\n                        fullWidth\n                        name=\"algorithm\"\n                        label={\"Algorithm\"}\n                    >\n                        <MenuItem value={10}>MD5 + JWT</MenuItem>\n                        <MenuItem value={20}>Bcrypt Only</MenuItem>\n                        <MenuItem value={30}>Bcrypt + JWT</MenuItem>\n                    </Select>\n                </FormControl>\n                <br/><br/>\n                <FormControl fullWidth>\n                    <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                    <Select\n                        required\n                        fullWidth\n                        name={\"stat\"}\n                        labelId=\"demo-simple-select-label\"\n                        label=\"Stat\"\n                    >\n                        {RechargeCodeStates.map(cs =>{\n                            return       <MenuItem value={cs.value}>{cs.label}</MenuItem>\n                        })}\n                    </Select>\n                </FormControl>\n            </YitForm>\n\n        )\n    }\n}\n\nconst RentDetailedPanel = ({MetaData}) =>{\n    return(\n        <MaterialTable\n            icons={tableIcons}\n            title={''}\n            components={{\n                Toolbar: props => (\n                    <div>\n\n                    </div>\n                ),\n                Container: props => <div\n                    style={{\n                        overflow: \"auto\",\n                        marginLeft: \"5%\",\n                        background: 'grey', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n            }}\n            columns={[\n                {title: '1', field: \"dataTitle\"},\n                {title: '2', field: \"dataValue\"},\n            ]}\n            data={MetaData}\n            options={{\n                pageSize: 5,\n                actionsColumnIndex: -1,\n                showTitle: false,\n            }}\n        />\n    )\n}\n\nclass Transactions extends YitComponent {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {title: 'Operation',   field: \"operation\", lookup: {0 : \"Rent\",  1 : \"Return\"}},\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n\n        this.submitButton = React.createRef()\n    }\n\n    async  doGenerate(data){\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            return false\n        }\n    }\n\n\n    async componentDidMount() {\n        //this.submitButton.current.changeState(false)\n        this.currentPage.current.setState({\n            isLoading: false\n        })\n\n    }\n\n    async dataLoader(query, resolve) {\n        let rechargeCodes = await this.MODELS._RentTransaction.getAll(query.pageSize * query.page, query.pageSize);\n        console.log(rechargeCodes)\n        if (rechargeCodes !== false) {\n            resolve({\n                data: rechargeCodes,\n                page: query.page,\n                totalCount: 100\n            })\n        } else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not load Stations data\", \"error\")\n            resolve({\n                data: [],\n                page: query.page,\n                totalCount: 100\n            })\n        }\n    }\n\n    async loadRentTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(0, 0, 100)\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            await transactions.forEach((transaction, index, transactions)  =>{\n                let newEntry = {\n                    id: transaction.id,\n                    operation: transaction.operation,\n                }\n                transaction.MetaData.forEach(entry => {\n                    newEntry[entry.dataTitle] = entry.dataValue\n                })\n                transactions[index]  = newEntry\n            })\n            this.setState({\n\n                columns: [\n                    {title: 'Id', field: \"id\"},\n                    {title: 'Operation', field: \"operation\", lookup: {0: \"Rent\", 1: \"Return\"}},\n                    {title: 'StationId', field: \"stationId\", render: rowData => <Link target={\"_blank\"} to={\"/DashBoard/StationsDetails/\"+rowData.stationId}>{rowData.stationId}</Link>},\n                    {title: 'Client Id', field: \"clientId\"},\n                    {title: 'StationId', field: \"powerBankId\"},\n                ]\n            })\n            return transactions\n        }else {\n            return []\n        }\n\n    }\n\n    async loadCartTransactions() {\n        let transactions = await this.MODELS._Transaction.getAll(11, 0, 100)\n        if(typeof transactions === \"list\"){\n            await transactions.forEach((transaction, index, transactions)  =>{\n                let newEntry = {\n                    id: transaction.id,\n                    operation: transaction.operation,\n                }\n                transaction.MetaData.forEach(entry => {\n                    newEntry[entry.dataTitle] = entry.dataValue\n                })\n                transactions[index]  = newEntry\n            })\n            this.setState({\n                data: transactions,\n                columns: [\n                    {title: 'Id', field: \"id\"},\n                    {\n                        title: 'Operation', field: \"operation\",\n                        lookup: {0: \"Rent\", 1: \"Return\"}},\n                    {title: 'Client Id', field: \"clientId\"},\n                    {title: 'Recharge code ID', field: \"rechargeCodeId\"},\n                ]\n            })\n        }else {\n            this.setState({\n                data: []\n            })\n        }\n\n    }\n\n    async tabClickHandler(e) {\n        let transactionList\n        switch (e.target.id) {\n            case TransactionOperations.Station.rent.id:\n                transactionList = await this.loadRentTransactions()\n                break;\n            case TransactionOperations.Station.return.id:\n                //transactionList = await this.loadRentTransactions()\n                break;\n            case TransactionOperations.wallet.recharge.id:\n                transactionList = await this.loadCartTransactions()\n        }\n        if(typeof transactionList === \"object\"){\n            this.setState({\n                data: transactionList\n            }\n            )\n        }else {\n            this.setState({ data: [] })\n        }\n    }\n\n    render() {\n        return (\n                <YitPage\n                    ref={this.currentPage}\n                    customClass={\"TransactionsPage\"} customId={\"TransactionsPage\"} title={\"Transactions\"}\n                    customContentClass={\"TransactionsPageContent\"}>\n                        <MaterialTable\n                            icons={tableIcons}\n                            title={''}\n                            components={{\n                                Toolbar: props => {\n                                    return  (\n                                        <div className={\"TableHeader\"}>\n                                            <div className={\"tableHeaderTabsContainer\"}>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={(e)=>{\n                                                        this.tabClickHandler(e)\n                                                    }}\n                                                    id={TransactionOperations.Station.rent.id}\n                                                >\n                                                    Rent Transactions\n                                                </span>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={(e)=>{\n                                                        this.tabClickHandler(e)\n                                                    }}\n                                                    id={TransactionOperations.Station.return.id}\n                                                >\n                                                    Return Transactions\n                                                </span>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={this.tabClickHandler.bind(this)}\n                                                    id={TransactionOperations.wallet.recharge.id}\n                                                >\n                                                    Card Transactions\n                                                </span>\n                                            </div>\n                                            <MTableToolbar {...props} />\n                                        </div>\n                                    )},\n\n                                Container: props => <div\n                                    style={{\n                                        overflow: \"auto\",\n                                        background: '#FFFFFF', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n                            }}\n                            columns={this.state.columns}\n                            data={this.state.data}\n                            //onRowClick={(event, rowData, togglePanel) => togglePanel()}\n                            options={{\n                                pageSize: 5,\n                                actionsColumnIndex: -1,\n                                showTitle: false,\n                                grouping: true,\n                                exportAllData: true\n                            }}\n                            actions={[\n                                {\n                                    icon: () => <MuiIcons.PersonAdd />,\n                                    tooltip: 'Add User',\n                                    isFreeAction: true,\n                                    onClick: (event) => {},\n                                    render: \"Hello\"\n                                },\n                                (rowData) => {\n                                    switch (rowData.stat ){\n                                        case 0:\n                                            return {\n                                                icon: () =><MuiIcons.Check style={{color: \"blue\"}}></MuiIcons.Check>,\n                                                onClick: (event, rowData) => this.changeStat(rowData, 1),\n                                                tooltip: \"validate\",\n                                            }\n                                            break\n                                        case 1:\n                                            return {\n                                                icon: () =><MuiIcons.Block style={{color: \"red\"}}></MuiIcons.Block>,\n                                                tooltip: \"Freeze User\",\n                                                onClick: (event, rowData) => this.changeStat(rowData, 2)\n                                            }\n                                        case 2:\n                                            return {\n                                                icon: () =><MuiIcons.Beenhere style={{color: \"green\"}}></MuiIcons.Beenhere>,\n                                                tooltip: \"Reactivate User\",\n                                                onClick: (event, rowData) => this.changeStat(rowData, 1)\n                                            }\n                                    }\n\n                                },\n\n\n                                (rowData) => {\n                                    return {\n                                        icon: () =><Link to={{\n                                            pathname: \"/Dashboard/PartnerDetails/\"+rowData.id,\n                                            search: '',\n                                            state: { data: this.state.rawData[rowData.rowIndex]}\n                                        }}><MuiIcons.Launch style={{color: \"black\"}}/></Link>,\n                                        tooltip: \"Details\",\n                                    }\n                                }\n                            ]}\n                        />\n                </YitPage>\n        )\n    }\n}\n\nexport default Transactions","import React from \"react\";\nimport \"./YitFilePicker.css\"\nimport Button from \"@material-ui/core/Button\";\n\n\n\n\n\nclass YitFilePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentImage: '',\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n\n    }\n    onImageSelect(e){\n        let Image =  URL.createObjectURL(e.target.files[0])\n        let imageTag  = document.getElementById('imageTag')\n        this.setState({\n            currentImage: Image\n        })\n        imageTag.style.display = 'block'\n    }\n\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        alert(password)\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'YitFilePicker'}>\n                <img className={\"selectedImage\"} src={this.state.currentImage} id={'imageTag'}/>\n                <Button\n                    color={\"primary\"}\n                    variant=\"contained\"\n                    component=\"label\"\n                >\n                    Select File\n                    <input\n                        onChange={(e)=>this.onImageSelect(e)}\n                        type=\"file\"\n                        hidden\n                    />\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default YitFilePicker","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewAd.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {GoogleMap, LoadScript, Marker} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport LocationSearchModal from \"../../../Components/LocationSearchModal/LocationSearchModal\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport YitFilePicker from \"../../../Components/YitFilePicker/YitFilePicker\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\nclass NewAd extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n    generatePassword(){\n        let chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        let passwordLength = 8;\n        let password = \"\";\n        for (let i = 0; i <= passwordLength; i++) {\n            let randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber +1);\n        }\n        return password\n    }\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        alert(password)\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'NewPartnerForm'}>\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Audience\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Audience</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel >State</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Stat\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select initial state</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <YitFilePicker/>\n                        </Grid>\n\n                    </Grid>\n                </YitForm>\n            </div>\n        )\n    }\n}\n\nexport default NewAd","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Ads.css\"\nimport DeviceEmulator from 'react-device-emulator';\nimport 'react-device-emulator/lib/styles/style.css';\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport NewPartnerForm from \"../Partners/NewPartnerForm/NewPartnerForm\";\nimport {Input, MenuItem, Select, TextField} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {PhotoCamera} from \"@mui/icons-material\";\nimport NewAd from \"./NewAd/NewAd\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\n\nclass AdImage extends React.Component{\n    static id=0\n    constructor(props) {\n        super(props);\n        this.state= {\n            AdImageContainer : 'AdImageContainer'+AdImage.id,\n            preImageContainer : 'preImageContainer'+AdImage.id,\n            preImage : 'preImage'+AdImage.id\n        }\n        AdImage.id++\n    }\n\n    componentDidMount() {\n        let AdImageContainer = document.getElementById(this.state.AdImageContainer)\n        let preImageContainer = document.getElementById(this.state.preImageContainer)\n        AdImageContainer.addEventListener(\"mouseenter\", ()=>{\n            preImageContainer.style.display = \"block\"\n            ReactDOM.render(\n                <img className={\"preImage\"} id={this.state.preImage} src={this.props.image}/>,\n                preImageContainer\n            )\n\n\n        })\n        AdImageContainer.addEventListener(\"mouseleave\", ()=>{\n            ReactDOM.unmountComponentAtNode(preImageContainer)\n            preImageContainer.style.display = \"none\"\n        })\n    }\n    render() {\n        return(\n            <div className={\"AdImageContainer\"} id={this.state.AdImageContainer}>\n                <span className={\"prSpan\"}>Preview</span>\n                <div className={\"preImageContainer\"} id={this.state.preImageContainer}></div>\n            </div>\n        )\n    }\n\n\n}\n\nclass Ads extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'ID', field: \"id\", editable: 'never' },\n                {\n                    title: 'Image', field: \"image\",\n                    render: rowData => <AdImage image={rowData.image}/>,\n                    editComponent: props => {\n                        if(props.value !== undefined){\n                            return(\n                                <div>\n                                    <TextField\n                                        disabled fullWidth\n                                        defaultValue={props.value}>\n\n                                    </TextField>\n                                </div>\n                            )\n                        }\n                        else {\n                            return(\n                                <Select>\n                                    <MenuItem value={0}>Upload File</MenuItem>\n                                    <MenuItem value={1}>Enter Link</MenuItem>\n                                </Select>\n\n                            )\n                        }\n\n                    }\n                },\n                {\n                    title: 'Type',   field: \"type\",\n                    lookup: { 0: 'Show to all', 1: 'Vip Only', 2: \"Normal Only\" },\n                },\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Frozen\" },\n                },\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    async updateAd(newData){\n        try{\n            let updateOp = await this.MODELS._Ad.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Ad  Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    async loadAds() {\n        let updateResult = await this.MODELS._Ad.getAll()\n        this.setState({\n            failedLoading: false,\n            data: []\n        })\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadAds()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        } catch (error) {\n\n        }\n    }\n\n\n    render() {\n        return (\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Advertising\"}\n                reloadPrimaryInfo={async () => {\n                    await this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Advertising \",\n                        icon: <MuiIcons.Add />,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewAd/>)}\n                    }\n\n                ]}\n            >\n\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    onRowClick={(event, rowData) => {\n                        (event.target).ondblclick = () => {\n                            this.props.history.push(\"/Dashboard/PartnerDetails/\" + rowData.id, {  state: {data: this.state.rawData[rowData.rowIndex]}});\n\n                        }\n                    }}\n                    dataModel={this.MODELS._Ad}\n                    searchEntry={'fullName'}\n                    actions={[\n                        {\n                            icon: ()=><MuiIcons.Preview/>,\n                            tooltip: 'Preview',\n                            onClick: (event, rowData) => {\n                                this.currentPage.current.mountBackDrop(\n                                    <DeviceEmulator type=\"mobile\" withDeviceSwitch withRotator url=\"https://nestjs.com/\"></DeviceEmulator>\n                                )\n                            }\n                        },\n                    ]}\n\n                    editable={{\n                        onRowAdd: newData =>\n                            new Promise((resolve, reject) => {\n\n                            }),\n                        onRowUpdate: (newData, oldData) => this.updateAd(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            })\n                    }}\n\n\n                />\n            </YitPage>\n\n\n        )\n    }\n}\n\nexport default Ads","\nimport Home from \"./Pages/Home/Home\";\nimport Clients from \"./Pages/Clients/Clients\";\nimport Partners from \"./Pages/Partners/Partners\";\nimport Stations from \"./Pages/Stations/Stations\";\nimport PartnerDetails from \"./Pages/PartnerDetails/PartnerDetails\";\nimport Transactions from \"./Pages/Transactions/Transactions\";\nimport Ads from \"./Pages/Ads/Ads\";\n\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\nconst dashboardRoutes = [\n    {\n      path: \"/DashBoard/Dashboard\",\n      name: \"Dashboard\",\n      icon: MuiIcons.Dashboard,\n      component: Home,\n    },\n\n    {\n    path: \"/DashBoard/Stations\",\n    name: \"Stations\",\n    icon: MuiIcons.Apps,\n    component: Stations,\n     },\n\n    {\n        path: \"/DashBoard/Clients\",\n        name: \"Clients\",\n        rtlName: \"Sessions\",\n        icon: MuiIcons.PeopleAltSharp,\n        component: Clients,\n        layout: \"/admin\",\n    },\n    {\n        path: \"/DashBoard/Partners\",\n        name: \"Partners\",\n        icon: MuiIcons.PeopleOutlineRounded,\n        component: Partners,\n    },\n    {\n        path: \"/DashBoard/PartnerDetails/:id\",\n        parametrised: true,\n        component: PartnerDetails,\n        layout: \"/admin\",\n    },\n    {\n        path: \"/DashBoard/Transactions\",\n        name: \"Transactions\",\n        icon: MuiIcons.Receipt,\n        component: Transactions,\n    },\n    {\n        path: \"/DashBoard/Ads\",\n        name: \"Ads Manager\",\n        icon: MuiIcons.BurstModeSharp,\n        component: Ads,\n    },\n];\n\nexport default dashboardRoutes;\n","import React from \"react\";\nimport \"../Style/NavBar.css\"\nimport {Link, NavLink} from \"react-router-dom\";\n\nimport routes from \"../routes\";\nfunction createMenu (routes) {\n    return (\n        routes.map((prop, index) => {\n            if(prop.parametrised === undefined){\n                return (\n                    <NavLink className={\"navEntry\"} to={prop.path} key={index}>\n                        <div className={\"navIcon\"}>{<prop.icon style={{fontSize: \"xx-large\"}}/>}</div>\n                        <span className={\"navText\"}>{prop.name}</span>\n                    </NavLink>\n                );\n            }\n            return\n\n        })\n    )\n};\n\nclass NavBar extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n\n    componentDidMount() {\n\n    }\n    render(){\n        return(\n            <div className={\"NavBar\"}>\n                {createMenu(routes)}\n            </div>\n        )\n    }\n}\nexport default NavBar","import React from \"react\";\nimport {render} from \"react-dom\";\nimport \"../Style/Logo.css\"\nimport logoImage from \"../Imgs/logo.svg\"\n\nclass Logo extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <img className={\"Logo\"} src={logoImage}/>\n            </React.Fragment>\n\n        )\n    }\n}\n\n\nexport default Logo","import React from \"react\";\nimport \"../Style/LeftPane.css\"\nimport {Link} from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport Logo from \"./Logo\";\n\nimport {LOCALSTORAGE} from \"../Apis/GlobalConfig\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Button from \"@mui/material/Button\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\nclass LeftPane extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state ={\n            openDialog : false\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    logOut(){\n        LOCALSTORAGE.removeItem(\"adminMail\")\n        LOCALSTORAGE.removeItem(\"adminToken\")\n        window.location.assign(\"/Login\")\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <div className=\"LeftPane\">\n                    <Dialog\n                        open={this.state.openDialog}\n                        onClose={()=>{\n\n                        }}\n                    >\n\n                        <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">\n                                You are about to leave the application\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.logOut}>Log Out</Button>\n                            <Button onClick={() => {\n                                    this.setState({\n                                        openDialog : false\n                                    })\n                                }}>\n                                close\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n\n                    <div className=\"logoContainer\">\n                        <Logo/>\n                    </div>\n                    <div className=\"navBarContainer\">\n                        <NavBar/>\n                    </div>\n\n                    <span className={\"logOutButton\"} onClick={\n                        () => {\n                            this.setState({\n                                openDialog : true\n                            })\n                        } }>\n                        <MuiIcons.LogoutOutlined/>\n                        <p className={\"navText\"}>Log Out</p>\n                    </span>\n                </div>\n            </React.Fragment>\n\n        )\n    }\n}\nexport default LeftPane","import React from \"react\";\nimport \"../Style/RightPane.css\"\nimport {Redirect, Route} from \"react-router-dom\";\n\nimport { Switch } from \"react-router-dom\";\n\nimport routes from \"../routes\";\n\nfunction switchRoutes (routes) {\n    return (\n        <Switch>\n            {routes.map((route, key) => {\n                if((route.parametrised === undefined) || (route.parametrised) === false){\n                    return (<Route key={key} exact path={route.path}  component={route.component}></Route>)\n                }else {\n                    return(\n                        <Route key={key} exact path={route.path} render={(props) => {\n                            return (<route.component id={props.match.params.id}/>);\n                        }}>\n                        </Route>\n                    )\n                }\n            })}\n            <Redirect from={\"/\"} to={\"/DashBoard/Dashboard\"}></Redirect>\n        </Switch>\n    )\n};\n\nclass RightPane extends React.Component{\n    render(){\n        return(\n            <React.Fragment>\n                    <div className=\"RightPane\" id={\"RightPane\"}>\n                        {switchRoutes(routes)}\n                    </div>\n\n            </React.Fragment>\n        )\n    }\n}\nexport default RightPane","import {SERVER} from \"../Apis/GlobalConfig\";\nimport server from \"../config/globalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\n\n\nlet actor = \"Session/\"\nconst _Admin  = {\n\n    login: async (postData) => {\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(postData)\n            };\n            const response = await fetch(SERVER+\"Guest/adminLogin\", requestOptions);\n            const data = await response.json();\n            return data;\n        } catch (e){\n            return {finalResult: false, error: \"Could not connect to the server\"}\n        }\n    },\n\n    HeartBit: async () => {\n        try {\n            let result = await RequestHandler.GET(SERVER+\"HeartBit\")\n            return result\n        } catch (e){\n            return {finalResult : false, error: e}\n        }\n    }\n}\nexport default _Admin;","const server = 'http://localhost:3000/admin'\nlet myStorage = window.localStorage;\n\n\nexport  default server;","import {LOCALSTORAGE} from \"./GlobalConfig\";\n\nconst authOperations = {\n    isLoggedIn :  () => {\n        let adminMail =  LOCALSTORAGE.getItem(\"adminMail\")\n        return adminMail != null\n    },\n}\n\nexport {authOperations}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport \"./LoginPage.css\"\n\n\nimport {Link} from \"react-router-dom\";\nimport _Admin from \"../../Models/_Admin\";\nimport {LOCALSTORAGE} from \"../../Apis/GlobalConfig\";\nimport Alert from \"@mui/material/Alert\";\nimport {authOperations} from \"../../Apis/authOperations\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Typography from \"@mui/material/Typography\";\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                CBC ALTEC\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\nfunction validateLogin(mail, admin, token){\n    LOCALSTORAGE.setItem(\"adminMail\", mail)\n    LOCALSTORAGE.setItem(\"admin\", admin)\n    LOCALSTORAGE.setItem(\"adminToken\", token)\n    ReactDOM.render(\n        <Alert  severity=\"success\" onClose={() => {}}>Login success, redirecting...</Alert>,\n        document.getElementById(\"resultContainer\"))\n        setTimeout(function(){ window.location.assign(\"/DashBoard\") }, 1500);\n}\n\nexport default function LoginPage() {\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        // eslint-disable-next-line no-console\n        let mail = data.get(\"email\")\n        let password = data.get(\"password\")\n        let loginResult = await _Admin.login({mail , password})\n        if(loginResult !== undefined){\n            if(loginResult.finalResult === true){\n                validateLogin(mail, loginResult.admin, loginResult.token)\n            }else {\n                ReactDOM.render(\n                    <Alert  severity=\"error\" onClose={() => {}}>{loginResult.error}</Alert>,\n                    document.getElementById(\"resultContainer\"))\n            }\n        }else {\n            ReactDOM.render(\n                <Alert  severity=\"error\" onClose={() => {}}>Unknown error occurred</Alert>,\n                document.getElementById(\"resultContainer\"))\n        }\n\n    };\n    authOperations.isLoggedIn() ?   window.location.assign(\"/Dashboard/Dashboard\") : void(0)\n\n    return (\n            <section className={\"LoginPage\"}>\n                <div className=\"leftSide\" style={{\n                    backgroundImage: 'url(https://source.unsplash.com/random)',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                }}>\n                </div>\n                <div className=\"rightSide\">\n                    <div className=\"resultContainer\" id=\"resultContainer\">\n\n                    </div>\n\n                    <Box\n                        sx={{\n                            my: 8,\n                            mx: 4,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            backgroundColor: \"grey\"\n                        }}\n                    >\n                            Sign in\n                        <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                autoFocus\n                            />\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"current-password\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                                label=\"Remember me\"\n                            />\n                            <Button\n                                color={\"primary\"}\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                sx={{ mt: 3, mb: 2 }}\n                            >\n                                Sign In\n                            </Button>\n                            <Grid container>\n                                <Grid item xs>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        Forgot password?\n                                    </Link>\n                                </Grid>\n                                <Grid item>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        {\"Don't have an account? Sign Up\"}\n                                    </Link>\n                                </Grid>\n                            </Grid>\n\n                            <Copyright sx={{ mt: 5 }} />\n                        </Box>\n                    </Box>\n                </div>\n\n            </section>\n    );\n}","import {HeartBit, Internet} from '../Actions/Types';\n\nconst initialState = {\n    items: [],\n    item: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case HeartBit:\n            return {\n                ...state,\n                server: action.payLoad\n            };\n            break;\n        case Internet:\n            return {\n                ...state,\n                internet: action.payLoad\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport serverReducers from './serverReducers';\n\nexport default combineReducers({\n    AppStates: serverReducers\n});\n\n\nexport const serverStatToProps = state => ({\n    server: state.AppStates.server,\n    internet : state.AppStates.internet\n})","export const HeartBit = 'HeartBit';\nexport const Internet = 'internet';","import React from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport \"../../Style/yitClasses.css\"\nimport \"./Main.css\"\nimport LeftPane from \"../../Components/LeftPane\";\nimport RightPane from \"../../Components/RightPane\";\nimport LoginPage from \"../../Pages/LoginPage/LoginPage\";\nimport {serverStatToProps} from \"../../Apis/Redux/Reducers\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n\nclass Main extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state= {\n            server:true\n        }\n    }\n    async componentDidMount() {\n\n    }\n\n\n\n    drawStatus(internet, server){\n        if(internet){\n            if(server != false){\n\n            }else {\n                return(<Alert  variant={\"filled\"} severity=\"error\" style={{fontSize: \"1.1vw\", fontWeight: \"bold\"}}>Server connection lost</Alert>)\n            }\n        }else{\n            return(<Alert  variant={\"filled\"} severity=\"error\" style={{fontSize: \"1.1vw\", fontWeight: \"bold\"}}>Internet connection lost !!</Alert>)\n\n        }\n\n\n    }\n    render() {\n        if(false){\n            return (\n                <div></div>\n            )\n        }else {\n            return (\n                <div className={\"Main\"}>\n                    <div className=\"statusBar\" id={\"statusBar\"}>\n                        {this.drawStatus(this.props.internet, this.props.server)}\n                    </div>\n                    <div className=\"Content\">\n                        <BrowserRouter>\n                            <Switch>\n                                <Route path={\"/Login\"} component={LoginPage}></Route>\n                                <Route path={\"/DashBoard\"}>\n                                    <LeftPane/>\n                                    <RightPane/>\n                                </Route>\n                            </Switch>\n                        </BrowserRouter>\n                    </div>\n                </div>\n            );\n        }\n\n    }\n}\n\nexport default connect(serverStatToProps, {})(Main)\n","import React from 'react';\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\nimport \"./Style/yitClasses.css\"\nimport {connect, Provider} from 'react-redux'\nimport LeftPane from \"./Components/LeftPane\";\nimport RightPane from \"./Components/RightPane\";\nimport { Switch } from \"react-router-dom\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\nimport Main from \"./Layouts/MAIN/Main\";\nimport _Admin from \"./Models/_Admin\";\nimport {HeartBit} from \"./Apis/Redux/Actions/Types\";\nimport {Internet} from \"./Apis/Redux/Actions/Types\";\nimport {serverStatToProps} from \"./Apis/Redux/Reducers\";\nimport {LOCALSTORAGE} from \"./Apis/GlobalConfig\";\nimport {authOperations} from \"./Apis/authOperations\";\n\n\nconst checkServer = () => async dispatch => {\n    let heartBit = await _Admin.HeartBit()\n    if (heartBit.finalResult) {\n        dispatch({\n            type: HeartBit,\n            payLoad: true\n        })\n    } else {\n        dispatch({\n            type: HeartBit,\n            payLoad: false\n        })\n    }\n    let internet = navigator.onLine\n\n    dispatch({\n        type: Internet,\n        payLoad: internet\n    })\n\n}\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n\n        let adminMail = LOCALSTORAGE.getItem(\"adminMail\")\n        let adminToken = LOCALSTORAGE.getItem(\"adminToken\")\n        authOperations.isLoggedIn() ?   void(0) : window.location.assign(\"/Login\")\n    }\n    componentDidMount() {\n\n    }\n\n    async componentWillMount() {\n        let test = this.props.checkServer\n        setInterval(()=>{test()}, 1000)\n    }\n\n    render() {\n\n\n    return (\n        <React.Fragment>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={\"/\"} >\n                        <Main/>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </React.Fragment>\n    );\n    }\n}\n\nexport default connect(serverStatToProps,  {checkServer})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reduxStore = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default reduxStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reduxStore from \"./Apis/Redux/reduxStore\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\n\n\nReactDOM.render(\n\n      <React.StrictMode>\n          <Provider store={reduxStore}>\n              <BrowserRouter>\n                  <Switch>\n                      <Route path={\"/Login\"}>\n                          <LoginPage></LoginPage>\n                      </Route>\n                      <Route path={\"/DashBoard\"}>\n                          <App></App>\n                      </Route>\n                  </Switch>\n              </BrowserRouter>\n          </Provider>\n      </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}