{"version":3,"sources":["Structures/TransactionOperations.js","Structures/ClientStats.js","Structures/PartnerTypes.js","Structures/RechargeCodeStates.js","Structures/PartnerStates.js","Apis/GlobalConfig.js","Imgs/logo.svg","Components/StatBox/StatBox.js","Apis/RequestHandler.js","Models/_Model.js","Models/_Station.js","Models/_Clients.js","Models/_Partner.js","Models/_Setting.js","Models/_RechareCode.js","Models/_Transaction.js","Models/_Ad.js","Models/_Tools.js","Structures/YitComponent.js","Apis/Notifications.js","Components/DynamicSubmitButton/DynamicSubmitButton.js","Components/YitForm/YitForm.js","Components/YitFragment/YitFragment.js","Pages/Stations/NewStationForm/NewStationForm.js","Components/YitPage/YitPage.js","Components/TransactionsGraph/CharOptions.js","Components/TransactionsGraph/TransactionsGraph.js","Components/YitFullLocationPeeker/Autocomplete.js","Components/YitFullLocationPeeker/Marker.js","Pages/Home/Home.js","Components/YitFullLocationPeeker/YitFullLocationPicker.js","Components/tableIcons.js","Components/YitDataTable/YitDataTable.js","Pages/Clients/Clients.js","Components/LocationSearchModal/LocationSearchModal.js","Components/YitLocationPicker.js","Pages/Partners/NewPartnerForm/NewPartnerForm.js","Components/YitStepper/YitStepper.js","Components/YitStepper/YitStep.js","Components/YitFilePicker/YitFilePicker.js","Components/YitFileUploader/YitFileUploader.js","Pages/Partners/NewPartner/NewPartner.js","Pages/Partners/Partners.js","Components/TabsWidget/TabsWidget.js","Components/YitView/YitView.js","Pages/Stations/StationDetails/StationDetails.js","Components/YitTcpForm/YitTcpForm.js","Pages/Stations/StationEditForm/StationEditForm.js","Pages/Stations/Stations.js","Pages/PartnerDetails/PartnerEditForm/PartnerEditForm.js","Pages/PartnerDetails/CodeGeneratorForm/CodeGeneratorForm.js","Pages/RechargeCodes/RechargeCodes.js","Components/PartnerImages/YitImageSlider.js","Pages/PartnerDetails/PartnerDetails.js","Pages/Transactions/Transactions.js","Pages/Ads/NewAd/NewAd.jsx","Pages/Ads/Ads.js","routes.js","Components/NavBar.js","Components/Logo.js","Components/LeftPane.js","Components/RightPane.js","Models/_Admin.js","config/globalConfig.js","Apis/authOperations.js","Pages/LoginPage/LoginPage.js","Apis/Redux/Reducers/serverReducers.js","Apis/Redux/Reducers/index.js","Apis/Redux/Actions/Types.js","Layouts/MAIN/Main.js","App.js","serviceWorker.js","Apis/Redux/reduxStore.js","index.js"],"names":["module","exports","Station","rent","label","id","return","wallet","recharge","payment","ClientStats","value","LOCALSTORAGE","window","localStorage","SERVER","ACTOR","MAP_API_KEY","StatBox","props","style","backgroundColor","icon","state","a","Fragment","className","this","title","number","text","React","Component","axios","require","RequestHandler","GET","URL","token","controller","AbortController","setTimeout","abort","requestOptions","method","headers","authorization","timeout","fetch","response","json","data","finalResult","error","POST","DATA","body","JSON","stringify","sendFile","url","config","_Model","adminToken","MODEL","create","postData","MAIN_ENTRY","result","update","newData","offset","index","console","log","attribute","key","StationModel","stationId","parseInt","level","_Client","_Partner","addImages","images","deleteImage","_Setting","alert","RechargeCode","partnerId","_Transaction","operation","limit","_Ad","_Tools","uploadFiles","type","file","YitComponent","currentPage","createRef","MODELS","_Station","getItem","_RechargeCode","failedLoading","flag","Notifications","container","Msg","severity","variant","duration","View","Alert","sx","mb","action","IconButton","aria-label","color","size","onClick","ReactDOM","unmountComponentAtNode","document","getElementById","close","Close","fontSize","render","err","DynamicSubmitButton","isSubmitting","LoadingButton","fullWidth","loading","loadingPosition","startIcon","Button","DoneMsg","xmlns","viewBox","cx","cy","r","fill","d","YitForm","isSubmitted","done","newInfo","doneMsg","undefined","errMsg","submitButton","e","nam","target","name","val","newLat","latLng","lat","newLng","lng","long","preventDefault","current","setState","handleSubmit","onSuccess","children","Children","map","child","isValidElement","displayName","childProps","onDragEnd","onDragEndOld","bind","cloneElement","onChange","changeHolder","recursiveCloneChildren","onSubmit","Grid","item","spacing","xs","defaultValue","ref","YitFragment","isLoading","notifications","Map","notId","set","delete","list","forEach","push","component","addEventListener","display","event","stopPropagation","topOperations","marginLeft","width","primaryInfoLoader","CircularProgress","unmount","drawNotifications","customClass","customId","NewStationForm","partnersList","statsList","stationTypes","formRef","getAll","getOp","partners","rows","prepared","partner","fullName","createOp","toString","fragment","loadPrimaryData","then","TextField","required","FormControl","InputLabel","Select","labelId","MenuItem","option","YitPage","pageId","backDropId","backDropContentId","notificationsContainerId","length","alignItems","cursor","selector","visibility","reloadPrimaryInfo","drawOperations","customContentClass","contentCustomId","CharOptions","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","offsetGridLines","LineChart","Line","TransactionsGraph","charData","labels","weekDays","datasets","fillColor","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","fragmentRef","loadTransactionsData","rentTransactions","returnTransactions","baseDate","Date","indexes","i","setDate","getDate","toLocaleDateString","weekday","getDay","getAllOp","acceptedDate","transaction","transactionDate","tempData","slice","entry","options","x","height","y","AutoComplete","styled","div","onPlaceChanged","addplace","place","autoComplete","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","mapApi","places","Autocomplete","addListener","bindTo","clearInstanceListeners","onFocus","placeholder","Wrapper","Marker","alt","defaultProps","MuiIcons","main","Home","settings","statistics","graphHeight","graphWidth","checked","dataValue","updateOp","pushNotification","temp","actors","actor","loader","count","getTotal","model","loadSettings","loadStatistics","offsetHeight","offsetWidth","onresize","setDimensions","Person","People","Apps","LocalAtm","List","ListItem","ListItemText","primary","ListItemIcon","Switch","edge","inputProps","QrCode2","QrCodeScanner","tableIcons","Add","forwardRef","AddBox","Check","Clear","Delete","DeleteOutline","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowDownward","ThirdStateCheck","Remove","ViewColumn","Retry","YitDataTable","page","totalCount","searchEntry","search","actionsColumnIndex","exportButton","paginationPosition","pageSizeOptions","URLSearchParams","tableRef","newOptions","query","pageSize","dataModel","searchBy","total","filters","accepted","filter","filterCol","filterValue","minHeight","fontFamily","icons","components","Container","overflow","position","background","Promise","resolve","reject","loadData","localization","pagination","labelDisplayedRows","toolbar","nRowsSelected","header","actions","emptyDataSourceMessage","filterRow","filterTooltip","opacity","onQueryChange","Clients","handleClose","reason","rawData","columns","field","rowData","substr","editable","lookup","0","1","2","stat","Chip","fontWeight","selectedRowId","open","dataTable","clientsList","onRowUpdate","oldData","updateClientInfo","onRowDelete","deleteEntry","Geocode","setApiKey","enableDebug","YitLocationPicker","onMarkerDragEnd","markerPosition","mapPosition","zoom","center","mapContainerStyle","google","draggable","onClose","onInfoWindowClose","padding","margin","NewPartnerForm","markers","generatePassword","suggestedPassword","chars","password","randomNumber","Math","floor","random","substring","PartnerTypes","PartnerStates","googleMapsApiKey","YitStepper","isStepOptional","step","steps","optional","isStepSkipped","handleNext","currentStep","isCompleted","sharedData","activeStep","setActiveStep","handleBack","handleSkip","Error","handleReset","setContent","ImagesList","onFinishView","Stepper","stepProps","labelProps","Typography","completed","Step","StepLabel","mt","Box","flexDirection","pt","flex","disabled","mr","Image","borderRadius","src","YitFilePicker","currentImage","files","createObjectURL","image","renderContent","click","onImageSelect","hidden","multiple","YitFileUploader","Partners","11","loadPartners","mountBackDrop","onRowClick","ondblclick","history","rowIndex","updatePartnerInfo","TabsWidget","tabsWidgetId","tabContentId","tabButtonId","currentIndex","selectedIndex","buttonsList","getElementsByClassName","textDecoration","tabsList","tab","clickHandler","changeSelected","generateTabs","YitView","active","myRef","anActiveContent","PowerBank","useState","setStat","powerBankId","powerLevel","drawContent","APNView","APN","MCCMNC","InputProps","readOnly","StationDetails","currentStation","Partner","currentStationInfo","currentTab","stationAPNs","loadStationInfo","loadPowerBanksInfo","loadAPN","getOneByPublicId","getOneOP","getOneRealTime","queryAPNNs","powerBanksList","powerBank","rentPowerBank","station","systemId","setActive","drawPowerBanks","YitTcpForm","view","errorMsg","drawResult","StationEditForm","getOnById","setAddress","setVolume","handleSubmitStationData","currentPartner","price","handleSetAddress","handleSetVolume","VolumeDown","Slider","min","max","VolumeUp","Stations","setValid","valid","stationsList","customdId","Block","tooltip","detailPanel","PartnerEditForm","clear","reload","phone","mail","CodeGeneratorForm","currentForm","c","doGenerate","RechargeCodeStates","cs","RechargeCodes","reduce","reducer","reCodeState","getAllForPartner","currentRow","indexOf","filtering","selection","isFreeAction","imageStyle","onmouseenter","onmouseleave","onDelete","NewImage","uploading","YitImageSlider","working","propsImages","toUpload","toBeUploaded","link","imageLink","newImages","imagee","deleteToBeUploaded","deleteAlreadyUploaded","onSave","show","renderGlobalOperations","PartnerStations","editRow","deleteText","Launch","PartnerDetails","Images","partnerImages","loadCurrentPartner","getOneOp","FormData","append","uploadOp","success","deleteOp","uploadedFiles","uploadImage","QrCode2Outlined","Transactions","setTransactionsList","TransactionOperations","rechargeCodes","transactions","newEntry","date","createdAt","MetaData","dataTitle","to","loadRentTransactions","transactionList","loadReturnTransactions","loadCartTransactions","Toolbar","tabClickHandler","showTitle","grouping","PersonAdd","csvContent","rowArray","row","join","encodedUri","encodeURI","changeStat","Beenhere","pathname","NewAd","AdImage","AdImageContainer","preImageContainer","preImage","Ads","editComponent","loadAds","Preview","withDeviceSwitch","withRotator","onRowAdd","updateAd","dashboardRoutes","path","Dashboard","rtlName","PeopleAltSharp","layout","PeopleOutlineRounded","parametrised","Receipt","BurstModeSharp","NavBar","routes","prop","Logo","logoImage","LeftPane","openDialog","removeItem","assign","Dialog","DialogContent","DialogContentText","DialogActions","logOut","LogoutOutlined","RightPane","route","exact","match","params","from","_Admin","login","HeartBit","authOperations","Copyright","align","href","getFullYear","validateLogin","admin","setItem","LoginPage","currentTarget","get","loginResult","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","my","mx","noValidate","autoFocus","FormControlLabel","control","Checkbox","initialState","items","combineReducers","AppStates","server","payLoad","internet","serverStatToProps","Main","drawStatus","connect","App","test","checkServer","setInterval","dispatch","navigator","onLine","Boolean","hostname","middleware","thunk","reduxStore","createStore","rootReducer","compose","applyMiddleware","StrictMode","store","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ca78af9e.chunk.js","sourcesContent":["const TransactionOperations = {\n    Station : {\n        rent : { label: \"Rent\", id: \"0\"},\n        return : { label: \"Return\", id: \"1\"}\n        },\n    wallet: {\n        recharge: {label: \"Recharge\", id: \"10\"},\n        payment: {label: \"payment\", id: \"11\"},\n    }\n\n}\n\n\nmodule.exports = TransactionOperations","const ClientStats = [\n    {\n        label: \"New\",\n        value: \"0\"\n    },\n\n    {\n        label: \"Active\",\n        value: \"1\"\n    },\n    {\n        label: \"Trusted\",\n        value: \"2\"\n    },\n    {\n        label: \"Frozen\",\n        value: \"10\"\n    },\n]\n\n\nmodule.exports = {ClientStats}","\n\nconst PartnerTypes = [\n    {\n        label: \"Payed\",\n        id: \"0\"\n    },\n    {\n        label: \"Free\",\n        id: \"1\"\n    },\n]\n\n\nmodule.exports = PartnerTypes","const RechargeCodeStates = [\n    {\n        label: \"New\",\n        value: \"0\"\n    },\n    {\n        label: \"Ready to print\",\n        value: \"1\"\n    },\n]\n\n\nmodule.exports = RechargeCodeStates","\n\nconst PartnerStates = [\n    {\n        label: \"New\",\n        id: \"0\"\n    },\n    {\n        label: \"Active\",\n        id: \"1\"\n    },\n    {\n        label: \"Trusted\",\n        id: \"2\"\n    },\n    {\n        label: \"Frozen\",\n        id: \"10\"\n    },\n]\n\n\nmodule.exports = PartnerStates\n","const  SERVER = \"http://164.132.59.129:8080/\";\n// const  SERVER = \"http://localhost:8080/\";\nconst ACTOR = \"Admin/\"\nconst LOCALSTORAGE = window.localStorage;\nconst MAP_API_KEY = 'AIzaSyBoTIuXI-Z7O3XPL1Ysx8cyloLmv2Ls2-M'\n\n\nmodule.exports = {SERVER, ACTOR, LOCALSTORAGE, MAP_API_KEY};","module.exports = __webpack_public_path__ + \"static/media/logo.2673b52f.svg\";","import React from 'react';\nimport \"./StatBox.css\"\n\nclass StatBox extends React.Component {\n\n    constructor(props){\n        super(props);\n        let style = {\n            backgroundColor : this.props.backgroundColor,\n        }\n        let icon = this.props.icon\n        this.state = {\n            style: style,\n            icon: icon,\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <section className={\"StatBox\"} >\n                    <div className=\"IconHolder\" style={this.state.style}>\n                        {this.props.icon}\n                    </div>\n                    <div className=\"statsHolder\">\n                        <span className={\"title\"}>{this.props.title}</span>\n                        <span className={\"number\"}>{this.props.number}</span>\n                    </div>\n                    <span className={\"alt\"}>{this.props.text}</span>\n                </section>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default StatBox","const axios = require('axios');\nconst RequestHandler = {\n    async GET(URL, token) {\n        const controller = new AbortController();\n        setTimeout(() => controller.abort(), 0);\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json', authorization: 'Bearer ' + token},\n            authorization: 'Bearer ' + token,\n            timeout: 5\n        };\n        try{\n            const response = await fetch(URL, requestOptions);\n            const data = await response.json();\n            return data\n        }catch (error){\n            return {finalResult: false, error: error}\n        }\n    },\n\n\n    async  POST(URL, DATA, token) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json', authorization: 'Bearer ' + token},\n            body: JSON.stringify(DATA),\n        };\n        try{\n            const response = await fetch(URL, requestOptions);\n            const data = await response.json();\n            return data\n        }catch (error){\n            return {finalResult: false, error: error}\n        }\n\n    },\n\n    async sendFile(url, data, token){\n\n        var config = {\n            method: 'post',\n            url: url,\n            headers: {\n                'Authorization': 'Bearer '+token\n            },\n            data : data\n        };\n        try{\n            let response = await axios(config);\n            return response.data\n        }\n        catch (error){\n            return {finalResult: false, error: error}\n        }\n    }\n}\n\n\n\n\nexport default RequestHandler","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport React from \"react\";\n\n\nclass _Model {\n\n    constructor(adminToken, MODEL) {\n\n        this.adminToken =  adminToken\n        this.MAIN_ENTRY = SERVER+ACTOR+MODEL\n    }\n\n    create = async(postData) =>{\n        const URL = this.MAIN_ENTRY+\"create\"\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n\n    }\n\n    update = async(id, newData) =>{\n        const URL = this.MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, newData, this.adminToken)\n        return result\n    }\n\n    async getAll(offset, index) {\n\n        try{\n            const URL = this.MAIN_ENTRY+\"getAll/\"+offset+\"/\"+index\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            console.log(error)\n            return {finalResult: false}\n        }\n    }\n\n    async getOnById(id) {\n        try {\n            const URL = this.MAIN_ENTRY+\"getOne/\"+id\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }\n        catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async searchBy(attribute, key) {\n        try{\n            const URL = this.MAIN_ENTRY+\"searchBy/\"+attribute+\"/\"+key\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async count() {\n        try{\n            const URL = this.MAIN_ENTRY+\"count\"\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async countWhere(attribute, value) {\n        try{\n            const URL = this.MAIN_ENTRY+\"count/\"+attribute+\"/\"+value\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async delete(id) {\n        try{\n            const URL = this.MAIN_ENTRY+\"delete/\"+id\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n}\n\nexport default _Model;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Station/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass StationModel extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    async getOneByPublicId(id) {\n        const URL = MAIN_ENTRY+\"getOneByPublicId/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n    async getOneRealTime(id) {\n        const URL = MAIN_ENTRY+\"getRealTimeInfo/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        if(result.finalResult){\n            return result.data\n        }else {\n            return false\n        }\n    }\n\n    async rentPowerBank(id){\n        let URL  = MAIN_ENTRY+\"rentPowerBank/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result.finalResult\n    }\n\n    async queryAPNNs(stationId, index){\n        index = parseInt(index)\n        index = \"0\"+index\n        let URL  = MAIN_ENTRY+\"queryAPNNs/\"+stationId+\"/\"+index\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        if(result.finalResult){\n            return  result.data\n        }else {\n            return false\n        }\n    }\n\n    async setAddress(stationId, data){\n        let URL  = MAIN_ENTRY+\"setAddress/\"+stationId\n\n        let result = await RequestHandler.POST(URL, data, this.adminToken)\n        console.log(result)\n        return result\n    }\n\n    async setVolume(stationId, level){\n        level = parseInt(level)\n        let URL  = MAIN_ENTRY+\"setVolume/\"+stationId+\"/\"+level\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n}\n\n\nexport default StationModel;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Client/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Client extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    create = async(postData) =>{\n        const URL = MAIN_ENTRY+\"getAll/0/99999\"\n        let result = await RequestHandler.POST(URL, postData)\n        if(result.finalResult){\n            return result.result\n        }else {\n            return result\n        }\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport default _Client;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Partner/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Partner extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n    \n    update = async(id, postData) =>{\n        const URL = MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n    }\n\n    addImages = async(id, images) =>{\n        const URL = MAIN_ENTRY+\"addImages/\"+id\n        let result = await RequestHandler.POST(URL, {images: images}, this.adminToken)\n        return result\n    }\n\n    deleteImage = async(id) =>{\n        const URL = MAIN_ENTRY+\"deleteImages/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n\n}\n\nexport default _Partner;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Setting/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Setting extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    update = async(id, postData) =>{\n\n        const URL = MAIN_ENTRY+\"update/\"+id\n        alert(URL)\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n    }\n\n}\n\nexport default _Setting;\n","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"RechargeCode/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass RechargeCode extends  _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n    async getAllForPartner(offset, index, partnerId) {\n        try{\n            const URL = this.MAIN_ENTRY+\"getAll/\"+offset+\"/\"+index+\"/\"+partnerId\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            console.log(error)\n            return {finalResult: false}\n        }\n    }\n\n}\n\nexport default RechargeCode;","import RequestHandler from \"../Apis/RequestHandler\";\nimport React from \"react\";\nimport _Model from \"./_Model\";\nconst MODEL = \"RentTransactions/\"\n\nclass _Transaction extends _Model{\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n    }\n\n    async getAll(operation, offset, limit) {\n        const URL = this.MAIN_ENTRY+\"getAll/\"+operation+\"/\"+offset+\"/\"+limit\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n}\n\nexport default _Transaction;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Ads/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Ad extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport default _Ad;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Tools/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Tools  {\n\n    constructor(adminToken) {\n\n        this.adminToken =  adminToken\n    }\n\n    uploadFiles = async(type, file) => {\n        const URL = MAIN_ENTRY+\"UploadFiles/\"+type\n        let result = await RequestHandler.sendFile(URL, file, this.adminToken)\n        return result\n    }\n\n}\n\nexport default _Tools;","import React from \"react\";\nimport _Station from \"../Models/_Station\";\nimport _Client from \"../Models/_Clients\";\nimport _Partner from \"../Models/_Partner\";\nimport _Setting from \"../Models/_Setting\";\nimport _RechargeCode from \"../Models/_RechareCode\";\nimport {LOCALSTORAGE} from \"../Apis/GlobalConfig\";\nimport _Transaction from \"../Models/_Transaction\";\nimport _Ad from \"../Models/_Ad\";\nimport _Tools from \"../Models/_Tools\";\n\n\n\nclass YitComponent extends  React.Component{\n    constructor(props) {\n        super(props);\n        this.currentPage = React.createRef()\n\n        this.MODELS = {\n            _Station: new _Station(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Client:  new _Client(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Setting: new _Setting(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Partner: new _Partner(LOCALSTORAGE.getItem(\"adminToken\")),\n            _RechargeCode: new _RechargeCode(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Transaction : new _Transaction(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Ad : new _Ad(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Tools : new _Tools(LOCALSTORAGE.getItem(\"adminToken\"))\n        }\n        this.state = {\n            failedLoading: true\n        }\n    }\n\n    checkLoadStatus(flag){\n\n    }\n\n\n}\n\nexport default YitComponent","\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\n\nimport Alert from \"@mui/material/Alert\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {Close} from \"@mui/icons-material\";\nfunction close(container, alert){\n    ReactDOM.unmountComponentAtNode(document.getElementById(container));\n}\nexport const Notifications = {\n    drawActionResult (container, Msg, severity, variant,  duration)  {\n        if(typeof  Msg !== \"string\"){\n            Msg = \"Critique Error, check console\"\n        }\n        const View = ({}) => {\n\n            return (\n                <>\n                    <Alert\n                        id={\"alert\"}\n                        severity={severity}\n                        sx={{mb: 2}}\n                        action={\n                            <IconButton\n                                aria-label=\"close\"\n                                color=\"inherit\"\n                                size=\"small\"\n                                onClick={() => {\n                                    close(container, \"\")\n                                }}\n                            >\n                                <Close fontSize=\"inherit\" />\n                            </IconButton>\n                        }\n                    >\n                        {Msg}\n                    </Alert>\n                </>\n\n            )\n        }\n        try {\n            ReactDOM.render(<View/>, document.getElementById(container))\n            if(duration != null){\n                setTimeout(() => {\n                    ReactDOM.unmountComponentAtNode(document.getElementById(container));\n                }, duration)\n            }\n\n        } catch (err) {\n            console.log(\"could not render teh notifications, check again\")\n            console.log(err)\n        }\n    }\n}\n\n","\nimport React from 'react';\n\n\nimport YitComponent from \"../../Structures/YitComponent\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" id=\"4444\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\n\nclass DynamicSubmitButton extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            isSubmitting : false\n        }\n    }\n\n\n    async componentDidMount() {\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n    render() {\n        return (\n            drawSubmit(this.state.isSubmitting)\n        )\n    }\n}\n\nexport default DynamicSubmitButton","import React from \"react\";\nimport \"./YitForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport DynamicSubmitButton from \"../DynamicSubmitButton/DynamicSubmitButton\";\n\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\nconst DoneMsg = () =>{\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n    </div>)\n}\n\nclass YitForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            newInfo: {},\n            doneMsg : this.props.doneMsg === undefined ? \"Operation success\" : \"Operation failed\",\n            errMsg : this.props.errMsg !== undefined ? this.props.errMsg : \"Operation failed\"\n        }\n        this.submitButton = React.createRef()\n\n    }\n\n    changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.value;\n        if(e.target.type === \"number\"){\n            val = parseInt(val)\n        }\n        this.state.newInfo[nam]= val\n    }\n\n    onDragEndOld(e){\n        let newLat = e.latLng.lat(),\n            newLng = e.latLng.lng();\n        this.state.newInfo[\"x\"]= newLat\n        this.state.newInfo[\"y\"]= newLng\n    }\n\n    onDragEnd(lat, long){\n        console.log(lat)\n        let newLat = lat,\n            newLng = long;\n        this.state.newInfo[\"x\"]= newLat\n        this.state.newInfo[\"y\"]= newLng\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault()\n        this.submitButton.current.setState({\n            isSubmitting: true\n        })\n        this.setState({\n            isSubmitting: true\n        })\n\n        if(await this.props.handleSubmit(this.state.newInfo) === true){\n            this.setState({isSubmitted: true})\n            Notifications.drawActionResult(\"notificationsContainer1\", this.state.doneMsg, \"success\")\n            if(this.props.onSuccess !== undefined){\n                this.props.onSuccess()\n            }\n            setTimeout(()=>{\n                this.setState({\n                    isSubmitted: false,\n                    isSubmitting: false\n                })\n            }, 2000)\n\n        }else {\n            this.setState({\n                isSubmitted: false,\n                isSubmitting: false\n            })\n            Notifications.drawActionResult(\"notificationsContainer1\", this.state.errMsg, \"error\")\n            this.submitButton.current.setState({\n                isSubmitting: false\n            })\n        }\n    }\n\n    recursiveCloneChildren(children) {\n        return React.Children.map(children, child => {\n            if(!React.isValidElement(child)) return child;\n            if(child.type.displayName === \"YitLocationPicker\"){\n                let childProps = {onDragEnd: this.onDragEndOld.bind(this)};\n                return React.cloneElement(child, childProps);\n            }else {\n                let  childProps = {onChange: this.changeHolder.bind(this)};\n                childProps.children = this.recursiveCloneChildren(child.props.children);\n                return React.cloneElement(child, childProps);\n            }\n        })\n    }\n\n    async componentDidMount() {\n\n    }\n\n    render() {\n        if(!this.state.isSubmitted){\n            return (\n                <div className={\"YitForm\"} id={\"YitForm\"}>\n                    <form  onSubmit={this.handleSubmit.bind(this)} id={\"myForm\"} >\n                        {this.recursiveCloneChildren(this.props.children)}\n                        <br></br>\n                        <br></br>\n                        <Grid container item spacing={2}>\n                            <Grid item xs={4}>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Button\n                                    variant={\"outlined\"}\n                                    fullWidth\n                                    color=\"secondary\"\n                                    id=\"outlined-error-helper-text\"\n                                    label=\"Password\"\n                                    defaultValue={\"APN.APN\"}\n                                    type={\"reset\"}\n                                >\n                                    Reset\n                                </Button>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <DynamicSubmitButton ref={this.submitButton}></DynamicSubmitButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            )\n        }else{\n            return (\n                <div className={\"YitForm\"} id={\"YitForm\"}>\n                    <DoneMsg/>\n                </div>\n            )\n        }\n\n    }\n}\nexport default YitForm","import React from 'react';\nimport \"./YitFragment.css\"\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ReactDOM from \"react-dom\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport Alert from \"@mui/material/Alert\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {Close} from \"@mui/icons-material\";\nclass YitFragment extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: this.props[\"isLoading\"] === undefined ? true:this.props[\"isLoading\"],\n            failedLoading: false,\n            notifications: new Map(),\n        }\n        this.notId = 0;\n    }\n    pushNotification(Msg, severity, duration){\n        let id=this.notId\n        this.state.notifications.set(\n            id,\n            <Alert\n                id={id}\n                severity={severity}\n                sx={{mb: 2}}\n                action={\n                    <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.state.notifications.delete(id)\n                            this.setState({notifications: this.state.notifications})\n                        }}\n                    >\n                        <Close fontSize=\"inherit\" />\n                    </IconButton>\n                }\n            >\n                {Msg}\n            </Alert>\n        )\n        this.notId++\n        this.setState({notifications: this.state.notifications})\n        if(duration !== undefined){\n            setTimeout(()=>{\n                this.state.notifications.delete(id)\n                this.setState({notifications: this.state.notifications})\n            }, duration)\n        }\n    }\n    async componentDidMount() {\n\n\n    }\n    drawNotifications(map){\n        let list = []\n        map.forEach((value, key)=>{\n            list.push(value)\n        })\n        return (list)\n    }\n    mountFragmentBackDrop(component){\n        document.getElementById(\"BackDrop\").addEventListener('click', ()=>{\n            document.getElementById(\"BackDrop\").style.display = \"none\"\n        })\n        document.getElementById('BackDropContent').addEventListener('click', (event)=>{\n            event.stopPropagation();\n        })\n        document.getElementById(\"BackDrop\").style.display = \"flex\"\n        ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    unmount(component){\n        document.getElementById(\"BackDrop\").style.display = \"none\"\n       // ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    drawOperations(){\n        if(this.props.topOperations != undefined){\n            return (this.props.topOperations.map(operation => {\n                return (\n                    <div style={{marginLeft: 10}}>{operation}</div>\n                )\n            }))\n        }\n    }\n\n\n    render() {\n        if(this.state.failedLoading){\n            return (\n                <div className={\"failedToLoadPage\"}>\n                    <span>Failed to load Fragment primary data</span>\n                    <br/>\n                    <Button\n                        style={{width: \"10vw\"}}\n                        variant={\"contained\"}  startIcon={<ReplayIcon/>}\n                        onClick={()=>this.props.primaryInfoLoader}\n                    >\n                        retry\n                    </Button>\n                </div>)\n        }\n        else {\n            if(this.state.isLoading){\n                return (<div className={\"loadingPage\"}><CircularProgress /></div>)\n            }\n            else {\n                return (\n                    <div className={'yitFragment'}>\n                        <div className={\"BackDrop\"} id={\"BackDrop\"}>\n                            <div className=\"close\" onClick={this.unmount}><CancelIcon fontSize=\"large\" style={{color: \"red\"}}/></div>\n                            <div className=\"content\" id={\"BackDropContent\"}></div>\n                        </div>\n                        <div className=\"pagesNotifications\" id={\"pagesNotifications\"}>\n                            {this.drawNotifications(this.state.notifications)}\n                        </div>\n                        <section className={`YitFragment ${this.props.customClass}`} id={this.props.customId}>\n                                {this.props.children}\n                        </section>\n                   </div>\n                )\n            }\n        }\n\n    }\n}\n\nexport default YitFragment","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewStationForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass NewStationForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            statsList: [\n                {label: \"active\", id: 0},\n                {label: \"Frozen\", id: 1}\n            ]\n        }\n\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value   : 0\n            },\n            {\n                label: \"inactive\",\n                value   : 1\n            }\n        ]\n     this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if(getOp.finalResult !== false){\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner =>{\n                return{value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        }else {\n\n        }\n    }\n\n    async handleSubmit(newData) {\n        let createOp = await this.MODELS._Station.create(newData)\n        if(createOp.finalResult){\n            return true\n        }else {\n            let error = createOp.error.toString()\n            this.formRef.current.setState({\n                errMsg: error\n            })\n           return false\n        }\n    }\n\n    render() {\n     return(\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"NewStationForm\"}\n                customId={\"NewStationForm\"}\n                title={\"Station Details\"}\n                isLoading={false}\n                primaryInfoLoader={()=>{this.loadPrimaryData().then()}}\n            >\n            <YitForm\n                ref={this.formRef}\n                handleSubmit={this.handleSubmit.bind(this)}\n            >\n                <Grid container spacing={2}>\n                    <Grid item xs={12}><b>New Station</b></Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth required name={\"id\"}\n                            variant={\"outlined\"}\n                            id=\"outlined-required\" label=\"Public Id\" defaultValue={\"\"}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-label\">Partner</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"currentPartner\"\n                                label=\"Partner\"\n                                name={\"currentPartner\"}\n                                defaultValue={-1}\n\n                            >\n                                <MenuItem value={-1} key={-10}>Select Partner</MenuItem>\n                                {this.state.partnersList.map((option) => (\n                                    <MenuItem value={option.value} key={option.value}> {option.label}</MenuItem>\n                                ))}\n\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                name={\"stat\"}\n                                label=\"Stat\"\n                                defaultValue={-1}\n                            >\n                                <MenuItem value={-1} key={-100}>Select Stat</MenuItem>\n                                {this.state.statsList.map((option) => (\n                                    <MenuItem value={option.id} key={option.value}> {option.label}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth required name={\"price\"}\n                            variant={\"outlined\"} type={\"number\"}\n                            id=\"outlined-required\" label=\"Price\" defaultValue={\"\"}\n                        />\n                    </Grid>\n\n                </Grid>\n            </YitForm>\n            </YitFragment>\n        )\n\n\n    }\n}\nexport default NewStationForm","import React from 'react';\nimport \"./YitPage.css\"\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ReactDOM from \"react-dom\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuOpenIcon from '@mui/icons-material/MenuOpen';\nimport Alert from \"@mui/material/Alert\";\nimport {Close} from \"@mui/icons-material\";\nimport NewStationForm from \"../../Pages/Stations/NewStationForm/NewStationForm\";\nclass YitPage extends YitComponent {\n    static id=0\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading: false,\n            notifications: new Map(),\n\n        }\n        this.pageId = 'YitPag'+YitPage.id\n        this.backDropId  = \"YitPageBackDrop\"+YitPage.id\n        this.backDropContentId = \"YitPageBackDropContent\"+YitPage.id\n        this.notificationsContainerId = \"notificationsContainer\"+YitPage.id\n        this.notId = 0;\n        YitPage.id++\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    pushNotification(Msg, severity, duration){\n        let id=this.notId\n        this.state.notifications.set(\n            id,\n            <Alert\n                id={id}\n                severity={severity}\n                sx={{mb: 2}}\n                action={\n                    <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.state.notifications.delete(id)\n                            this.setState({notifications: this.state.notifications})\n                        }}\n                    >\n                        <Close fontSize=\"inherit\" />\n                    </IconButton>\n                }\n            >\n                {Msg}\n            </Alert>\n        )\n        this.notId++\n        this.setState({notifications: this.state.notifications})\n        if(duration !== undefined){\n            setTimeout(()=>{\n                this.state.notifications.delete(id)\n                this.setState({notifications: this.state.notifications})\n            }, duration)\n        }\n    }\n\n    async componentDidMount() {\n        \n    }\n\n    mountBackDrop(component){\n        document.getElementById(this.backDropId).addEventListener('click', ()=>{\n            ReactDOM.unmountComponentAtNode(document.getElementById(this.backDropContentId))\n            document.getElementById(this.backDropId).style.display = \"none\"\n        })\n        document.getElementById(this.backDropContentId).addEventListener('click', (event)=>{\n            event.stopPropagation();\n        })\n        document.getElementById(this.backDropId).style.display = \"flex\"\n        ReactDOM.render(component, document.getElementById(this.backDropContentId))\n    }\n\n    unmount(component){\n        document.getElementById(this.backDropId).style.display = \"none\"\n       // ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    drawOperations(){\n        if(this.props.topOperations !== undefined && this.props.topOperations.length > 0){\n            return (\n                <>\n                    <div className=\"entriesContainer\" id={\"entriesContainer\"}>\n                        {this.props.topOperations.map((operation, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={\"operationEntry\"}\n                                    style={{marginLeft: 10, display: \"flex\", alignItems:\"center\"}}\n                                    onClick={operation.onClick}\n                                >\n                                    {operation.icon} {operation.text}\n                                </div>\n                            )})}\n                    </div>\n                    <MenuOpenIcon\n                        fontSize={\"large\"} style={{cursor: \"pointer\"}}\n                        onClick={()=>{\n                            let selector = document.getElementById(\"entriesContainer\")\n                            if (selector.style.visibility === \"hidden\") {\n                                selector.style.visibility = \"visible\";\n                            } else {\n                                selector.style.visibility = \"hidden\";\n                            }\n                        }}/>\n                </>\n\n            )\n        }\n    }\n    drawNotifications(map){\n        let list = []\n        map.forEach((value, key)=>{\n            list.push(value)\n        })\n        return (list)\n    }\n\n\n    render() {\n        if(this.state.failedLoading){\n            return (\n                <div className={\"failedToLoadPage\"}>\n                    <span>Failed to load page primary data</span>\n                    <br/>\n                    <Button\n                        style={{width: \"10vw\"}}\n                        color={\"primary\"}\n                        variant={\"contained\"}  startIcon={<ReplayIcon/>}\n                        onClick={()=>{\n                            try {\n                                this.props.reloadPrimaryInfo()\n                            }\n                            catch (error){\n\n                            }\n                        }}\n                    >\n                        retry\n                    </Button>\n                </div>)\n        }\n        else {\n            if(this.state.isLoading){\n                return (<div className={\"loadingPage\"}><CircularProgress /></div>)\n            }\n            else {\n                return (\n                    <section className={'YitPage'} id={this.pageId}>\n                        <div className={\"YitPageBackDrop\"} id={this.backDropId}>\n                            <div className=\"YitPageBackDropContent\" id={this.backDropContentId}></div>\n                        </div>\n                        <div className=\"YitPageNotificationsContainer\" id={this.notificationsContainerId}>\n                            {this.drawNotifications(this.state.notifications)}\n                        </div>\n                        <div className={`YitPageMainPage ${this.props.customClass}`} id={this.props.customId}>\n                            <div className=\"pagesTitle\" >{this.props.title}</div>\n                            <div className=\"pagesOperations\">\n                                {this.drawOperations()}\n                            </div>\n                            <div className={`pagesContent ${this.props.customContentClass}`} id={this.props.contentCustomId}>\n                                {this.props.children}\n                            </div>\n                        </div>\n                    </section>\n                )\n            }\n        }\n\n    }\n}\n\nexport default YitPage","const CharOptions = {\n\n    ///Boolean - Whether grid lines are shown across the chart\n    scaleShowGridLines : true,\n\n    //String - Colour of the grid lines\n    scaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n    //Number - Width of the grid lines\n    scaleGridLineWidth : 1,\n\n    //Boolean - Whether to show horizontal lines (except X axis)\n    scaleShowHorizontalLines: true,\n\n    //Boolean - Whether to show vertical lines (except Y axis)\n    scaleShowVerticalLines: true,\n\n    //Boolean - Whether the line is curved between points\n    bezierCurve : true,\n\n    //Number - Tension of the bezier curve between points\n    bezierCurveTension : 0.4,\n\n    //Boolean - Whether to show a dot for each point\n    pointDot : true,\n\n    //Number - Radius of each point dot in pixels\n    pointDotRadius : 4,\n\n    //Number - Pixel width of point dot stroke\n    pointDotStrokeWidth : 1,\n\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n    pointHitDetectionRadius : 20,\n\n    //Boolean - Whether to show a stroke for datasets\n    datasetStroke : true,\n\n    //Number - Pixel width of dataset stroke\n    datasetStrokeWidth : 2,\n\n    //Boolean - Whether to fill the dataset with a colour\n    datasetFill : true,\n\n    //String - A legend template\n\n\n    //Boolean - Whether to horizontally center the label and point dot inside the grid\n    offsetGridLines : false\n};\n\nexport  default CharOptions\n","import React from \"react\";\nimport CharOptions from \"./CharOptions\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitFragment from \"../YitFragment/YitFragment\";\nlet LineChart = require(\"react-chartjs\").Line;\n\n\nclass TransactionsGraph extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            failedLoading : false,\n            charData :  {\n                labels: this.weekDays().weekDays,\n                datasets: [\n                    {\n                        label: \"Rent Transactions\",\n                        fillColor: \"rgba(220,220,220,0.2)\",\n                        strokeColor: \"rgba(220,220,220,1)\",\n                        pointColor: \"rgba(220,220,220,1)\",\n                        pointStrokeColor: \"#fff\",\n                        pointHighlightFill: \"#fff\",\n                        pointHighlightStroke: \"rgba(220,220,220,1)\",\n                        data: [5, 12, 16, 22, 18, 50, 10]\n                    },\n                    {\n                        label: \"Return Transaction\",\n                        fillColor: \"rgba(151,187,205,0.2)\",\n                        strokeColor: \"rgba(151,187,205,1)\",\n                        pointColor: \"rgba(151,187,205,1)\",\n                        pointStrokeColor: \"#fff\",\n                        pointHighlightFill: \"#fff\",\n                        pointHighlightStroke: \"rgba(151,187,205,1)\",\n                        data: [5, 12, 16, 22, 18, 50, 10]\n                    }\n                ]\n            }\n        }\n        this.fragmentRef = React.createRef()\n\n    }\n\n    async componentDidMount() {\n        let rentTransactions = await this.loadTransactionsData(0, 0, 100)\n        let returnTransactions = await this.loadTransactionsData(1, 0, 100)\n\n        this.state.charData['datasets'][0]['data'] = rentTransactions\n        this.state.charData['datasets'][1]['data'] = returnTransactions\n        this.setState({\n            charData: this.state.charData\n        })\n\n        this.fragmentRef.current.setState({\n            isLoading : false,\n            failedLoading : this.state.failedLoading\n        })\n    }\n\n    weekDays(){\n        let baseDate = new Date();\n        let weekDays = [];\n        let indexes = []\n        for(let i = 0; i < 7; i++)\n        {\n            baseDate.setDate(baseDate.getDate() - 6);\n            weekDays.push(\n                baseDate.toLocaleDateString(\"en\", { weekday: 'long' })\n            );\n            indexes.push(baseDate.getDay())\n\n        }\n        return {weekDays, indexes}\n    }\n\n    prepareData(){\n\n    }\n\n\n    async loadTransactionsData(operation, offset, limit){\n        let getAllOp = await this.MODELS._Transaction.getAll(operation, offset, limit)\n        let acceptedDate = new Date();\n        acceptedDate.setDate(acceptedDate.getDay()-6)\n        let data = [0, 0, 0, 0, 0, 0, 0]\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            transactions.forEach(transaction =>{\n                let transactionDate = new Date(transaction['createdAt'])\n                if(transactionDate > acceptedDate){\n                    data[transactionDate.getDay()] = data[transactionDate.getDay()] + 1\n                }\n            })\n            let tempData = data.slice()\n            this.weekDays().indexes.forEach((entry, index) =>{\n                data[entry-1] = tempData[index]\n            })\n            tempData = null\n\n        }\n        this.setState({\n            failedLoading: !getAllOp.finalResult\n        })\n        return data\n    }\n\n    render() {\n        return(\n            <>\n                <YitFragment\n                    ref={this.fragmentRef}\n                >\n                    <LineChart\n                        data={this.state.charData}\n                        options={CharOptions}\n                        width={this.props.x}\n                        height={this.props.y}\n                    />\n                </YitFragment>\n\n            </>\n        )\n    }\n}\n\nexport default TransactionsGraph","// Autocomplete.js\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n  text-align:center;\n`;\n\nclass AutoComplete extends Component {\n    constructor(props) {\n        super(props);\n        this.clearSearchBox = this.clearSearchBox.bind(this);\n    }\n\n    componentDidMount({ map, mapApi } = this.props) {\n        const options = {\n            // restrict your search to a specific type of result\n            // restrict your search to a specific country, or an array of countries\n            // componentRestrictions: { country: ['gb', 'us'] },\n        };\n        this.autoComplete = new mapApi.places.Autocomplete(\n            this.searchInput,\n            options,\n        );\n        this.autoComplete.addListener('place_changed', this.onPlaceChanged);\n        this.autoComplete.bindTo('bounds', map);\n    }\n\n    componentWillUnmount({ mapApi } = this.props) {\n        mapApi.event.clearInstanceListeners(this.searchInput);\n    }\n\n    onPlaceChanged = ({ map, addplace } = this.props) => {\n        const place = this.autoComplete.getPlace();\n\n        if (!place.geometry) return;\n        if (place.geometry.viewport) {\n            map.fitBounds(place.geometry.viewport);\n        } else {\n            map.setCenter(place.geometry.location);\n            map.setZoom(17);\n        }\n\n        addplace(place);\n        this.searchInput.blur();\n    };\n\n    clearSearchBox() {\n        this.searchInput.value = '';\n    }\n\n    render() {\n        return (\n            <div className={\"YitLocationPickerAutoComplete\"}>\n                <input\n                    className=\"search-input\"\n                    ref={(ref) => {\n                        this.searchInput = ref;\n                    }}\n                    type=\"text\"\n                    onFocus={this.clearSearchBox}\n                    placeholder=\"Enter a location\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default AutoComplete;","// Marker.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    position: absolute;\n    width: 38px;\n    height: 37px;\n    background-image: url(https://icon-library.com/images/pin-icon-png/pin-icon-png-9.jpg);\n    background-size: contain;\n    background-repeat: no-repeat;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -webkit-transform: translate(-50%,-50%);\n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%,-50%);\n    cursor: grab;\n`;\n\nconst Marker = ({ text, onClick }) => (\n    <Wrapper\n        alt={text}\n        onClick={onClick}\n    />\n);\n\nMarker.defaultProps = {\n    onClick: null,\n};\n\nMarker.propTypes = {\n    onClick: PropTypes.func,\n    text: PropTypes.string.isRequired,\n};\n\nexport default Marker;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./Home.css\"\nimport StatBox from \"../../Components/StatBox/StatBox\";\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\n\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Switch from \"@material-ui/core/Switch\";\nimport List from \"@mui/material/List\";\nimport TransactionsGraph from \"../../Components/TransactionsGraph/TransactionsGraph\";\nimport YitLocationPicker from \"../../Components/YitFullLocationPeeker/YitFullLocationPicker\";\n\nconst MuiIcons = require('@mui/icons-material');\n\n\nclass Home extends YitComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            failedLoading: false,\n            isLoading: false,\n            settings: {},\n            statistics: {},\n            graphHeight: 0,\n            graphWidth: 0\n        }\n        this.currentPage = React.createRef()\n    }\n    async changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.checked;\n        if (e.target.type === \"number\") {\n            val = parseInt(val)\n        }\n        let updateOp = await this.MODELS._Setting.update(nam, {dataValue: val})\n        alert(JSON.stringify(updateOp))\n        if(updateOp.finalResult){\n\n            this.state.settings[nam] = val\n            this.setState({\n                settings: this.state.settings\n            })\n        }else {\n            this.currentPage.current.pushNotification(\"Could not update settings\", \"error\", 2000)\n        }\n\n    }\n    async loadSettings(offset, limit){\n        let getAllOp = await this.MODELS._Setting.getAll(offset, limit)\n        if(getAllOp.finalResult){\n            let temp = {}\n            getAllOp.result.forEach(entry =>{\n                temp[entry.name] = entry.dataValue\n            })\n            this.setState({settings: temp})\n        }\n        this.setState({failedLoading: !getAllOp.finalResult})\n    }\n\n    async loadStatistics(actors){\n        for (const actor of actors) {\n            let getTotal = await actor.loader.count()\n            if(getTotal.finalResult){\n                this.state.statistics[actor.model] = getTotal.result\n                this.setState({statistics: this.state.statistics})\n            }\n            this.setState({failedLoading: !getTotal.finalResult})\n        }\n    }\n\n    async loadPrimaryData() {\n        let actors = [\n            {model: \"clients\", loader: this.MODELS._Client},\n            {model: \"stations\", loader: this.MODELS._Station},\n            {model: \"partners\", loader: this.MODELS._Partner},\n            {model: \"transactions\", loader: this.MODELS._Transaction},\n        ]\n        await this.loadSettings(0, 50)\n        await this.loadStatistics(actors)\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async loadTransactionsData(){\n        let getAllOp = this.MODELS._Transaction.getAll(0, 0, 100)\n        //let getAllOp = this.MODELS._Transaction.getAll(1, 0, 100)\n    }\n    setDimensions(){\n\n\n\n        let container = document.getElementById('transactionsContainer')\n        if(container !== null){\n            let y = container.offsetHeight\n            let x = container.offsetWidth\n            this.setState({\n                x:x-20,\n                y:y-50\n            })\n        }\n\n        window.onresize = ()=>{\n            let container = document.getElementById('transactionsContainer')\n            if(container !== null){\n                let y = container.offsetHeight\n                let x = container.offsetWidth\n                this.setState({\n                    x:x-20,\n                    y:y-50\n                })\n            }\n        }\n\n    }\n    async componentDidMount() {\n        await this.loadPrimaryData()\n        this.setDimensions()\n    }\n\n    render(){\n        return(\n                <YitPage\n                    ref={this.currentPage}\n                    title={\"Dash Board\"}\n                    customClass={'Home'}\n                    customContentClass={'homeContent'}\n                    topOperations={[]}\n                    reloadPrimaryInfo={()=>{\n                        this.loadPrimaryData().then()\n                    }}\n                >\n                    <div className=\"StatsContainer\">\n                        <div className=\"container\">\n                            <StatBox\n                                title={'Clients'}\n                                number={this.state.statistics[\"clients\"]}\n                                text={\"+7 this month\"}\n                                icon={<MuiIcons.Person style={{fontSize: 50, color:\"wheat\"}}/>}\n\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                number={this.state.statistics[\"partners\"]}\n                                text={\"All\"}\n                                title={'Partners'}\n                                icon={<MuiIcons.People style={{fontSize: 50, color: \"rosybrown\"}}/>}\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                title={'Stations'}\n                                number={this.state.statistics[\"stations\"]}\n                                icon={<MuiIcons.Apps style={{fontSize: 50, color:\"black\"}}/>}\n                                text={\"Active Stations\"}\n                            />\n\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                title={\"Transactions\"}\n                                number={this.state.statistics[\"transactions\"]}\n                                icon={<MuiIcons.LocalAtm style={{fontSize: 50, color:\"wheat\"}}/>}\n                                text={\"All\"}\n                            />\n                        </div>\n                    </div>\n                    <div className={\"transactionsContainer\"} id={\"transactionsContainer\"}>\n                        <b>Rent / return transactions</b>\n                        <TransactionsGraph x={this.state.x} y={this.state.y}></TransactionsGraph>\n                    </div>\n                    <div className=\"quickSettingsContainer\">\n                        <List>\n                            <ListItem>\n                                <ListItemText id=\"switch-list-label-wifi\" primary={<b>Settings</b>} />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon><AccountTreeIcon/></ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Pratic Power\" />\n                                <Switch\n                                    name={\"system\"}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"system\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.People/>\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Client Signup\" />\n                                <Switch\n                                    edge=\"end\"\n                                    name={'clientSignUp'}\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"clientSignUp\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.People/>\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Client Login\" />\n                                <Switch\n                                    edge=\"end\"\n                                    name={'clientLogin'}\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"clientLogin\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.Apps />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Power Banks Rent\" />\n                                <Switch\n                                    name={\"rent\"}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"rent\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-bluetooth',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.QrCode2 />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Card Print\" />\n                                <Switch\n                                    name={'cardPrint'}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"print\"]}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.QrCodeScanner />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Card recharge\" />\n                                <Switch\n                                    edge=\"end\"\n                                    name={'recharge'}\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"recharge\"]}\n                                />\n                            </ListItem>\n                        </List>\n                    </div>\n                </YitPage>\n        )\n    }\n}\nexport default Home\n","// MyGoogleMaps.js\nimport React, { Component } from 'react';\nimport \"./YitLocationPicker.css\"\nimport GoogleMapReact from 'google-map-react';\n\nimport styled from 'styled-components';\n\nimport AutoComplete from './Autocomplete';\nimport Marker from './Marker';\nimport {MAP_API_KEY} from \"../../Apis/GlobalConfig\";\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nclass YitFullLocationPicker extends Component {\n\n    constructor(props) {\n        super(props);\n        YitFullLocationPicker.displayName = \"YitLocationPicker\"\n        this.state = {\n            mapApiLoaded: false,\n            mapInstance: null,\n            mapApi: null,\n            geoCoder: null,\n            places: [],\n            center: [],\n            zoom: 9,\n            address: '',\n            draggable: true,\n            lat: null,\n            lng: null\n        };\n    }\n\n\n    componentWillMount() {\n        this.setCurrentLocation();\n    }\n\n\n    onMarkerInteraction = (childKey, childProps, mouse) => {\n        this.setState({\n            draggable: false,\n            lat: mouse.lat,\n            lng: mouse.lng\n        });\n    }\n    onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\n        this.setState({ draggable: true });\n        this._generateAddress();\n    }\n\n    _onChange = ({ center, zoom }) => {\n        this.setState({\n            center: center,\n            zoom: zoom,\n        });\n\n    }\n\n    _onClick = (value) => {\n        this.setState({\n            lat: value.lat,\n            lng: value.lng\n        });\n    }\n\n    apiHasLoaded = (map, maps) => {\n        this.setState({\n            mapApiLoaded: true,\n            mapInstance: map,\n            mapApi: maps,\n        });\n\n        this._generateAddress();\n    };\n\n    addPlace = (place) => {\n\n        this.setState({\n            places: [place],\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n        });\n        this._generateAddress()\n    };\n\n    _generateAddress() {\n\n        const {\n            mapApi\n        } = this.state;\n\n        const geocoder = new mapApi.Geocoder;\n\n        geocoder.geocode({ 'location': { lat: this.state.lat, lng: this.state.lng } }, (results, status) => {\n            console.log(results);\n            console.log(status);\n            if (status === 'OK') {\n                if (results[0]) {\n                    this.zoom = 12;\n                    this.setState({ address: results[0].formatted_address });\n                } else {\n                    window.alert('No results found');\n                }\n            } else {\n                window.alert('Geocoder failed due to: ' + status);\n            }\n\n        });\n        if(this.props.onDragEnd !== undefined && typeof this.props.onDragEnd == \"function\"){\n            this.props.onDragEnd(this.state.lat, this.state.lng)\n        }\n    }\n\n    // Get Current Location Coordinates\n    setCurrentLocation() {\n        if ('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.setState({\n                    center: [position.coords.latitude, position.coords.longitude],\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                });\n            });\n        }\n    }\n\n    render() {\n        const {\n            places, mapApiLoaded, mapInstance, mapApi,\n        } = this.state;\n\n\n        return (\n            <div className={\"YitLocationPicker\"}>\n                {mapApiLoaded && (\n                    <div>\n                        <AutoComplete map={mapInstance} mapApi={mapApi} addplace={this.addPlace} />\n                    </div>\n                )}\n                <GoogleMapReact\n                    center={this.state.center}\n                    zoom={this.state.zoom}\n                    draggable={this.state.draggable}\n                    onChange={this._onChange}\n                    onChildMouseDown={this.onMarkerInteraction}\n                    onChildMouseUp={this.onMarkerInteractionMouseUp}\n                    onChildMouseMove={this.onMarkerInteraction}\n                    onChildClick={() => console.log('child click')}\n                    onClick={this._onClick}\n                    bootstrapURLKeys={{\n                        key: MAP_API_KEY,\n                        libraries: ['places', 'geometry'],\n                    }}\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\n                >\n\n                    <Marker\n                        text={this.state.address}\n                        lat={this.state.lat}\n                        lng={this.state.lng}\n                    />\n\n\n                </GoogleMapReact>\n            </div >\n        );\n    }\n}\n\nexport default YitFullLocationPicker;","import React, {forwardRef} from \"react\";\nimport {\n    AddBox, ArrowDownward,\n    Check, ChevronLeft,\n    ChevronRight,\n    Clear,\n    DeleteOutline,\n    Edit,\n    FilterList,\n    FirstPage, LastPage, Remove,\n    SaveAlt, Search, ViewColumn\n} from \"@mui/icons-material\";\n\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n    Retry: forwardRef((props, ref) => <div/>),\n};\n\n\nexport default tableIcons;","import React from 'react';\nimport './YitDataTable.css'\nimport MaterialTable, {MTableToolbar, MTablePagination} from '@material-table/core';\nimport tableIcons from \"../tableIcons\"\nimport Button from \"@material-ui/core/Button\";\n\n\nclass YitDataTable extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            page: 0,\n            totalCount: 0,\n            searchEntry: this.props.searchEntry !== undefined ? this.props.searchEntry : \"id\",\n            options: {\n                search: true,\n                actionsColumnIndex: -1,\n                exportButton: true,\n                paginationPosition: \"top\",\n                pageSizeOptions: [5, 10, 20, 50, 0],\n            }\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        this.tableRef = React.createRef();\n\n    }\n\n    async componentDidMount() {\n        if(this.props.options !== undefined){\n            let newOptions = this.state.options\n            for (const option in this.props.options) {\n                newOptions[option] = this.props.options[option]\n            }\n            this.setState({options : newOptions})\n        }\n    }\n\n    async loadTotal(){\n\n    }\n\n    async loadData(query){\n        let offset = query.page*query.pageSize, limit =  query.pageSize\n        let getAllOp\n\n        if(query.search === \"\"){\n            getAllOp = await this.props.dataModel.getAll(offset, limit)\n        }\n        else{\n\n            getAllOp = await this.props.dataModel.searchBy(this.state.searchEntry, query.search)\n        }\n\n        if(getAllOp.finalResult){\n            let result = {\n                data : getAllOp.result.rows,\n                total: getAllOp.result.count\n            }\n            if(query.filters.length > 0){\n\n                let filters = query.filters\n                let r = []\n                result.data.forEach(entry =>{\n                    let accepted = true\n                    for (let filter of filters){\n                        let filterCol = filter[\"column\"][\"field\"]\n                        let filterValue = filter[\"value\"]\n                        if(entry[filterCol] !=   filterValue) {\n                            accepted = false\n                        }\n\n                    }\n                    if(accepted){\n                        r.push(entry)\n                    }\n\n                })\n                console.log(r)\n                result.data = r\n            }\n            return result\n        }else {\n            return false\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    render() {\n        return (\n            <MaterialTable\n                {...this.props}\n                style={{ minHeight: \"100%\", fontFamily: \"Poppins\"}}\n                tableRef={this.tableRef}\n                icons={tableIcons}\n                title={\"\"}\n                components={{\n                    Container: props => <div\n                        style={{\n                            overflow: \"auto\", position: 'relative',\n                            background: '#FFFFFF', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n                }}\n                data={query => new Promise((resolve, reject) => {\n                        this.loadData(query)\n                            .then(result => {\n                                if(result == false){\n                                    reject()\n                                }else {\n                                    resolve({\n                                        data: result['data'],\n                                        page: query.page,\n                                        totalCount: result['total'],\n                                    })\n                                }\n\n                            })\n                    })}\n                options={this.state.options}\n                localization={{\n                    pagination: {\n                        labelDisplayedRows: '{from}-{to} of {count}'\n                    },\n                    toolbar: {\n                        nRowsSelected: '{0} row(s) selected'\n                    },\n                    header: {\n                        actions: 'Actions'\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No records to display',\n                        filterRow: {\n                            filterTooltip: 'Filter'\n                        }\n                    },\n                    error:\n                        <div className={\"errorContainer\"}>\n                            <span>Data could not be Loaded</span>\n                            <br/><br/>\n                            <Button\n                                style={{backgroundColor: \"red\", opacity: 20}}\n                                color={\"primary\"}\n                                variant={\"contained\"}\n                                onClick={()=>{\n                                    this.tableRef.current.onQueryChange({});\n                                }}\n                            >\n                                Retry\n                            </Button>\n                        </div>\n                }}\n            >\n            </MaterialTable>\n        )\n    }\n}\n\nexport default YitDataTable","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Clients.css\"\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport Chip from \"@mui/material/Chip\";\n\nclass Clients extends YitComponent {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {title: 'Name', field: \"fullName\"},\n                {title: 'E-mail', field: \"mail\"},\n                {title: 'Phone',   field: \"phone\" },\n                {title: 'Joint At',   field: \"createdAt\", render: rowData => rowData['createdAt'].substr(0, 10), editable: false},\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Frozen\" },\n                    render: (rowData)=>{\n                        let result, color\n                        switch (rowData.stat){\n                            case 0: result = 'New'; color='green'; break;\n                            case 1: result = 'Active'; color= 'darkblue'; break;\n                            case 2: result = 'Frozen'; color=\"red\"; break;\n                            default:result = \"Unknown\"; color=\"red\"\n                        }\n                        return(<Chip  label={result}  style={{width: 120, backgroundColor: color, color:\"white\", fontWeight: \"bold\"}}/>)\n                    }\n                },\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async componentWillMount(){\n        try{\n            let clientsList = await this.MODELS._Client.getAll(0, 20)\n            if(clientsList != null){\n                this.setState({\n\n                    data: clientsList\n                })\n                this.currentPage.current.setState({\n                    isLoading: false\n                })\n            }else {\n\n            }\n        }catch (e){\n\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    async changeStat(rowData, stat){\n        try{\n            let updateResult = await this.MODELS._Client.update(rowData.id, {stat: stat})\n            if(updateResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        }catch (e){\n\n        }\n    }\n\n    async deleteEntry(rowData) {\n        try {\n            let updateResult = await this.MODELS._Client.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Client Deleted\", \"success\")}\n        } catch (error) {\n\n        }\n    }\n\n    async updateClientInfo(newData){\n        try{\n            let updateOp = await this.MODELS._Client.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Client Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    render() {\n        return (\n            <YitPage\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Clients\"}\n                ref={this.currentPage}>\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    dataModel={this.MODELS._Client}\n                    searchEntry={'fullName'}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => this.updateClientInfo(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            })\n                    }}\n                />\n            </YitPage>\n        )\n    }\n}\n\nexport default Clients\n","import React from 'react';\nimport { GoogleMap,  InfoWindow, Marker } from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\";\n\nimport Autocomplete from 'react-google-autocomplete';\n\n\n\nGeocode.setApiKey(\"AIzaSyB3zO_aU97QjkN-p1MUofYobc2QNCf3y2M\");\nGeocode.enableDebug();\n\nclass LocationSearchModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            zoom: 15,\n            height: 200,\n            mapPosition: {\n                lat: 0,\n                lng: 0,\n            },\n            markerPosition: {\n                lat: 0,\n                lng: 0,\n            },\n            Building: '',\n            pincode: ''\n        }\n    }\n\n\n\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                        mapPosition: {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        },\n                        markerPosition: {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        }\n                    },\n                    () => {\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                            response => {\n                                console.log(response)\n                                const address = response.results[0].formatted_address,\n                                    addressArray = response.results[0].address_components,\n                                    city = this.getCity(addressArray),\n                                    area = this.getArea(addressArray),\n                                    state = this.getState(addressArray);\n                                console.log('city', city, area, state);\n                                this.setState({\n                                    address: (address) ? address : '',\n                                    area: (area) ? area : '',\n                                    city: (city) ? city : '',\n                                    state: (state) ? state : '',\n                                })\n                            },\n                            error => {\n                                console.error(error);\n                            }\n                        );\n\n                    })\n            });\n        } else {\n            console.error(\"Geolocation is not supported by this browser!\");\n        }\n    };\n\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\n    //     if (\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\n    //         this.state.address !== nextState.address ||\n    //         this.state.city !== nextState.city ||\n    //         this.state.area !== nextState.area ||\n    //         this.state.state !== nextState.state\n    //     ) {\n    //         return true\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\n    //         return false\n    //     }\n    // }\n\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n        console.log('Changed ');\n    };\n\n    onInfoWindowClose = (event) => { };\n\n    onMarkerDragEnd = (event) => {\n\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                })\n            },\n            error => {\n\n            }\n        );\n    };\n\n    onPlaceSelected = (place) => {\n        console.log('place Selected')\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n\n        console.log('latvalue', latValue)\n        console.log('lngValue', lngValue)\n\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    // const AsyncMap = compose(\n    //     withProps({\n    //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\n    //         loadingElement: <div style={{ height: `100%` }} />,\n    //         containerElement: <div style={{ height: `400px` }} />,\n    //         mapElement: <div style={{ height: `100%` }} />,\n    //     }),\n    //     withScriptjs,\n    //     withGoogleMap\n    // )((props) =>\n    //     <GoogleMap\n\n    render() {\n\n\n\n        return (\n            <div>\n                <GoogleMap\n                    mapContainerStyle={{height: \"40vh\", width: \"100%\"}}\n                    zoom={this.state.zoom}\n                    center={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    center={ {\n                        lat: -3.745,\n                        lng: -38.523\n                    }}\n                >\n                    {/* InfoWindow on top of marker */}\n\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={'Dolores park'}\n                        draggable={true}\n                        onDragEnd={this.onMarkerDragEnd}\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                    />\n                    <InfoWindow\n                        onClose={this.onInfoWindowClose}\n                        position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                    >\n                        <div>\n                            <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                        </div>\n                    </InfoWindow>\n                    <Marker />\n\n                    {/* <MarkerWithLabel\n                            position={{ lat: -34.397, lng: 150.644 }}\n                            labelAnchor={new google.maps.Point(0, 0)}\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\n                        >\n                            <div>Hello There!</div>\n                        </MarkerWithLabel> */}\n\n\n                    {/* For Auto complete Search Box */}\n                    <Autocomplete\n                        style={{\n                            width: '100%',\n                            height: '40px',\n                            paddingLeft: '16px',\n                            marginTop: '2px',\n                            marginBottom: '2rem'\n                        }}\n                        onPlaceSelected={this.onPlaceSelected}\n                        types={['(regions)']}\n                    />\n                </GoogleMap>\n                <div className='row mt-5 p-2'>\n                    <div className=\"form-group col-12\">\n                        <label htmlFor=\"\">Address</label>\n                        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">City</label>\n                        <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">Area</label>\n                        <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">State</label>\n                        <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">Building</label>\n                        <input type=\"text\" name=\"Building\" className=\"form-control\" onChange={ this.onChange } value={ this.state.Building }/>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default LocationSearchModal;","import React from 'react';\nimport { GoogleMap,  InfoWindow, Marker } from \"@react-google-maps/api\";\nimport Autocomplete from 'react-google-autocomplete';\nclass YitLocationPicker extends React.Component {\n    constructor(props) {\n        super(props);\n        YitLocationPicker.displayName = \"YitLocationPicker\"\n        this.state = {\n            zoom: 15,\n            height: 200,\n            mapPosition: this.props.center === undefined ? {lat: -3.745, lng: -38.523} : this.props.center,\n            markerPosition: this.props.center === undefined ? {lat: -3.745, lng: -38.523} : this.props.center,\n\n        }\n    }\n\n\n    componentDidMount(){\n\n    };\n\n\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n\n    };\n\n    onMarkerDragEnd = (e) => {\n\n        let newLat = e.latLng.lat(), newLng = e.latLng.lng();\n\n        this.setState({\n            markerPosition: {\n                lat: newLat,\n                lng: newLng\n            },\n            mapPosition: {\n                lat: newLat,\n                lng: newLng\n            },\n        })\n        if(this.props.onDragEnd !== undefined && typeof this.props.onDragEnd == \"function\"){\n            this.props.onDragEnd(e)\n        }\n    };\n\n    render() {\n        return (\n\n                <GoogleMap\n                    mapContainerStyle={{height: \"40vh\", width: \"100%\"}}\n                    zoom={this.state.zoom}\n                    center={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n\n                >\n                    {/* InfoWindow on top of marker */}\n\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={'Dolores park'}\n                        draggable={true}\n                        onDragEnd={(e)=>{\n                            this.onMarkerDragEnd(e)\n\n                        }}\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                    />\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>Drag me to choose</span>\n                            </div>\n                        </InfoWindow>\n                    <Marker />\n\n                    {/* <MarkerWithLabel\n                            position={{ lat: -34.397, lng: 150.644 }}\n                            labelAnchor={new google.maps.Point(0, 0)}\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\n                        >\n                            <div>Hello There!</div>\n                        </MarkerWithLabel> */}\n\n\n                    {/* For Auto complete Search Box */}\n\n                </GoogleMap>\n        )\n    }\n\n}\n\nexport default YitLocationPicker;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewPartnerForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {GoogleMap, LoadScript, Marker} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport LocationSearchModal from \"../../../Components/LocationSearchModal/LocationSearchModal\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport {MAP_API_KEY} from \"../../../Apis/GlobalConfig\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\nclass NewPartnerForm extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n            let password = this.generatePassword()\n            this.setState({suggestedPassword: \"password\"})\n\n        } else {\n\n        }\n    }\n\n    generatePassword(){\n        let chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        let passwordLength = 8;\n        let password = \"\";\n        for (let i = 0; i <= passwordLength; i++) {\n            let randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber +1);\n        }\n        return password\n    }\n\n    async handleSubmit(newData){\n\n        let createOp = await this.MODELS._Partner.create(newData)\n        console.log(createOp)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'NewPartnerForm'}>\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                id=\"outlined-required\" name={'fullName'} label=\"Full Name\"\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Rent Policy\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Policy</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Stat</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"stat\"}\n                                    label=\"State\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Stat</MenuItem>\n                                    {PartnerStates.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={5}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"phone\"} id=\"outlined-required\"\n                                label=\"Phone\" placeholder={\"0X XX XX XX XX\"}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"mail\"} id=\"outlined-required\"\n                                label=\"Address mail\" placeholder={\"xxx@xxx.xxx\"}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"password\"} id=\"outlined-required\"\n                                defaultValue={this.generatePassword()}\n                                label=\"Password\" placeholder={\"\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <LoadScript\n                                googleMapsApiKey={MAP_API_KEY}\n                            >\n\n                                <YitLocationPicker/>\n                            </LoadScript>\n                        </Grid>\n\n                    </Grid>\n                </YitForm>\n            </div>\n        )\n    }\n}\n\nexport default NewPartnerForm\n","import React from 'react';\nimport \"./YitStepper.css\"\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitStep from \"./YitStep\";\n\n\n\nclass YitStepper extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.sharedData = []\n        this.state = {\n            activeStep: 0\n        }\n        this.currentStep = React.createRef()\n    }\n\n\n    isStepOptional = (step) => {\n        return this.props.steps[step].optional;\n    };\n\n    isStepSkipped = (step) => {\n        return false;\n    };\n\n    handleNext = () => {\n        if(this.currentStep.current.isCompleted()){\n            this.sharedData[this.state.activeStep] = this.currentStep.current.sharedData\n            this.setActiveStep(this.state.activeStep)\n            alert(JSON.stringify(this.sharedData))\n        }\n        else {\n\n        }\n    };\n\n     handleBack = () => {\n         this.setState({\n             activeStep: this.state.activeStep -1\n         })\n    };\n    setActiveStep = (activeStep)=>{\n\n        this.setState({\n            activeStep: activeStep + 1\n        })\n    }\n    handleSkip = () => {\n\n        if (!this.isStepOptional(this.state.activeStep)) {\n            // You probably want to guard against something like this,\n            // it should never occur unless someone's actively trying to break something.\n            throw new Error(\"You can't skip a step that isn't optional.\");\n        }\n\n        this.setActiveStep(this.state.activeStep);\n\n    };\n\n    handleReset = () => {\n        this.setState({\n            activeStep: 0\n        })\n    };\n\n    setContent = (activeStep)=>{\n        if(this.state.activeStep === this.props.steps.length ){\n            let  childProps = {ImagesList: this.sharedData[1]};\n            return React.cloneElement(this.props.onFinishView, childProps);\n        }else {\n            try{\n                let  childProps = {ref: this.currentStep, a:5};\n                return React.cloneElement(this.props.children[activeStep], childProps);\n            }\n            catch (e){\n\n            }\n        }\n\n\n    }\n\n    render() {\n        return (\n            <div className={'YitStepper'}>\n                <div className=\"header\">\n                    <Stepper activeStep={this.state.activeStep}>\n                        {this.props.steps.map((step, index) => {\n                            const stepProps = {};\n                            const labelProps = {};\n                            if (this.isStepOptional(index)) {\n                                labelProps.optional = (\n                                    <Typography variant=\"caption\">Optional</Typography>\n                                );\n                            }\n                            if (this.isStepSkipped(index)) {\n                                stepProps.completed = false;\n                            }\n                            return (\n                                <Step key={step} {...stepProps}>\n                                    <StepLabel {...labelProps}>{step.label}</StepLabel>\n                                </Step>\n                            );\n                        })}\n                    </Stepper>\n                </div>\n                <div className=\"content\">\n                    {this.setContent(this.state.activeStep)}\n                </div>\n                <div className=\"operations\">\n                    {this.state.activeStep === this.props.steps.length ? (\n                        <React.Fragment>\n                            <Typography sx={{ mt: 2, mb: 1 }}>\n                                All steps completed - you&apos;re finished\n                            </Typography>\n                            <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                                <Box sx={{ flex: '1 1 auto' }} />\n                                <Button onClick={this.handleReset}>Reset</Button>\n                            </Box>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n\n                            <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                                <Button\n                                    color=\"inherit\"\n                                    disabled={this.state.activeStep === 0}\n                                    onClick={this.handleBack}\n                                    sx={{ mr: 1 }}\n                                >\n                                    Back\n                                </Button>\n                                <Box sx={{ flex: '1 1 auto' }} />\n                                {this.isStepOptional(this.state.activeStep) && (\n                                    <Button color=\"inherit\" onClick={this.handleSkip} sx={{ mr: 1 }}>\n                                        Skip\n                                    </Button>\n                                )}\n\n                                <Button onClick={this.handleNext}>\n                                    {this.state.activeStep === this.props.steps.length - 1 ? 'Finish' : 'Next'}\n                                </Button>\n                            </Box>\n                        </React.Fragment>\n                    )}\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nexport default YitStepper;","import React from \"react\"\nclass YitStep extends React.Component{\n    constructor(props) {\n        super(props);\n        this.completed = false\n    }\n\n    componentDidMount() {\n\n    }\n\n    prepareComponent(comp){\n        let  childProps = {ref: this.ref, a:5};\n        return React.cloneElement(comp, childProps);\n    }\n\n    render() {\n        return(\n            <div className={\"YitStep\"}>\n                {this.prepareComponent(this.props.children)}\n            </div>\n        )\n    }\n}\n\nexport default YitStep","import React from \"react\";\nimport \"./YitFilePicker.css\"\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from '@mui/material/IconButton';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\n\n\nconst Image = ({url}) =>{\n    let container = {\n        width: 200,\n        height: 200,\n        margin: \"10px\",\n        borderRadius: 20\n    }\n    const imageStyle = {\n        width: \"100%\",\n        height: \"100%\",\n        borderRadius: 20\n    }\n     return(\n         <div style={container}>\n             <img src={url} style={imageStyle}/>\n         </div>\n     )\n}\n\nclass YitFilePicker extends React.Component {\n    constructor(props) {\n\n        super(props);\n        this.sharedData = {}\n        this.state = {\n            currentImage: '',\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: [],\n            ImagesList: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n\n    }\n    isCompleted(){\n        if(this.sharedData !== undefined && this.sharedData !== {}){\n            return true\n        }else {\n            alert(\"no images selected\")\n            return false\n        }\n    }\n    onImageSelect(e){\n        console.log(e.target.files)\n\n        for (let i = 0; i < e.target.files.length; i++){\n            const file = e.target.files[i];\n            let Image =  URL.createObjectURL(file)\n            this.state.ImagesList.push(Image)\n\n        }\n\n        // let imageTag  = document.getElementById('imageTag')\n        this.setState({\n            ImagesList:  this.state.ImagesList\n        })\n        this.sharedData = this.state.ImagesList\n    }\n\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    renderContent(list){\n        return(\n        list.map(image =>{\n            return (<Image url={image}></Image>)\n        }))\n    }\n\n    render() {\n        return (\n            <div className={'YitFilePicker'}>\n                {this.renderContent(this.state.ImagesList)}\n                {\n\n                }\n                <div className={\"addImages\"}>\n                    <IconButton aria-label=\"delete\" size={\"large\"} onClick={()=>{document.getElementById(\"fileInput\").click()}}>\n                        <AddCircleOutlineIcon fontSize=\"inherit\" >\n\n                        </AddCircleOutlineIcon>\n                        <input\n                            id={\"fileInput\"}\n                            onChange={(e)=>this.onImageSelect(e)}\n                            type=\"file\"\n                            hidden\n                            multiple\n                        />\n                    </IconButton>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default YitFilePicker","import React from \"react\";\nimport \"./YitFileUploader.css\"\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from '@mui/material/IconButton';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\n\n\nconst Image = ({url}) =>{\n    let container = {\n        width: 200,\n        height: 200,\n        margin: \"10px\",\n        borderRadius: 20\n    }\n    const imageStyle = {\n        width: \"100%\",\n        height: \"100%\",\n        borderRadius: 20\n    }\n     return(\n         <div style={container}>\n             <img src={url} style={imageStyle}/>\n         </div>\n     )\n}\n\nclass YitFileUploader extends React.Component {\n    constructor(props) {\n\n        super(props);\n        this.sharedData = {}\n        this.state = {\n            currentImage: '',\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: [],\n            ImagesList: this.props.ImagesList !== undefined ? this.props.ImagesList : []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n\n    }\n    isCompleted(){\n        if(this.sharedData !== undefined && this.sharedData !== {}){\n            return true\n        }else {\n            alert(\"no images selected\")\n            return false\n        }\n    }\n    onImageSelect(e){\n        console.log(e.target.files)\n\n        for (let i = 0; i < e.target.files.length; i++){\n            const file = e.target.files[i];\n            let Image =  URL.createObjectURL(file)\n            this.state.ImagesList.push(Image)\n\n        }\n\n        // let imageTag  = document.getElementById('imageTag')\n        this.setState({\n            ImagesList:  this.state.ImagesList\n        })\n        this.sharedData = this.state.ImagesList\n    }\n\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    renderContent(list){\n        return(\n        list.map(image =>{\n            return (<Image url={image}></Image>)\n        }))\n    }\n\n    render() {\n        return (\n            <div className={'YitFilePicker'}>\n                {this.renderContent(this.state.ImagesList)}\n                {\n\n                }\n            </div>\n        )\n    }\n}\n\nexport default YitFileUploader","import React from 'react';\nimport \"./NewPartner.css\";\nimport ReactDOM from 'react-dom';\n\n\n//Icons\n\nimport {Link} from \"react-router-dom\";\n\n\n\n\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport YitStepper from \"../../../Components/YitStepper/YitStepper\";\nimport {ClientStats} from \"../../../Structures/ClientStats\";\nimport NewPartnerForm from \"../NewPartnerForm/NewPartnerForm\";\nimport YitFilePicker from \"../../../Components/YitFilePicker/YitFilePicker\";\nimport YitFileUploader from \"../../../Components/YitFileUploader/YitFileUploader\";\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\nfunction statToString(stat) {\n    let result = \"\"\n    ClientStats.forEach((clientStat) => {\n        if (clientStat.value == stat) {\n            result = clientStat.label\n        }\n    })\n    return result\n}\n\n\nclass NewPartner extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            filesToUpload : []\n        }\n        this.dataTable = React.createRef()\n        this.stepperRef = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async loadPartners() {\n        let getOp = await this.MODELS._Partner.getAll(0, 20)\n        if (getOp.finalResult) {\n            let partnersList = getOp.result\n            this.setState({\n                failedLoading: false,\n                data: partnersList\n            })\n        } else {\n\n            this.setState({\n                failedLoading: true\n            })\n        }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadPartners()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        //await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        } catch (error) {\n\n        }\n    }\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n            alert(JSON.stringify(createOp))\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n\n            <div className={\"newPartner\"}>\n            <YitStepper\n                ref={this.stepperRef}\n                onFinish={this.handleSubmit}\n                onFinishView={ <YitFileUploader ImagesList={this.state.filesToUpload}></YitFileUploader>}\n                steps = {[\n                    {label: 'General information', optional:false},\n                    {label: 'Images', optional:false},\n                ]}>\n                <NewPartnerForm></NewPartnerForm>\n                <YitFilePicker></YitFilePicker>\n            </YitStepper>\n            </div>\n\n\n        )\n    }\n}\n\nexport default NewPartner","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Partners.css\"\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\n\nimport {Link} from \"react-router-dom\";\n\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport NewStationForm from \"../Stations/NewStationForm/NewStationForm\";\nimport YitFragment from \"../../Components/YitFragment/YitFragment\";\nimport NewPartnerForm from \"./NewPartnerForm/NewPartnerForm\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport YitStepper from \"../../Components/YitStepper/YitStepper\";\nimport YitStep from \"../../Components/YitStepper/YitStep\";\nimport NewPartner from \"./NewPartner/NewPartner\";\nimport Chip from \"@mui/material/Chip\";\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\nfunction statToString(stat) {\n    let result = \"\"\n    ClientStats.forEach((clientStat) => {\n        if (clientStat.value == stat) {\n            result = clientStat.label\n        }\n    })\n    return result\n}\n\n\nclass Partners extends YitComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Name', field: \"fullName\"},\n                {title: 'E-mail', field: \"mail\"},\n                {title: 'Phone', field: \"phone\"},\n                {title: 'Stat', field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Trusted\", 11: \"Frozen\" },\n                    render: (rowData)=>{\n                        let result, color\n                        switch (rowData.stat){\n                            case 0: result = 'New'; color='grey'; break;\n                            case 1: result = 'Active'; color= 'darkblue'; break;\n                            case 2: result = 'Trusted'; color=\"green\"; break;\n                            case 11: result = 'Frozen'; color=\"red\"; break;\n                            default:result = \"Unknown\"; color=\"red\"\n                        }\n                        return(<Chip  label={result}  style={{width: 120, backgroundColor: color, color:\"white\", fontWeight: \"bold\"}}/>)\n                    }\n                },\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async loadPartners() {\n        let getOp = await this.MODELS._Partner.getAll(0, 20)\n        if (getOp.finalResult) {\n            let partnersList = getOp.result\n            this.setState({\n                failedLoading: false,\n                data: partnersList\n            })\n        } else {\n\n            this.setState({\n                failedLoading: true\n            })\n        }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadPartners()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n    async updatePartnerInfo(newData){\n        try{\n            let updateOp = await this.MODELS._Partner.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications1\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }else {\n                Notifications.drawActionResult(\"pagesNotifications1\", \"Could not delete partner\", \"error\")\n            }\n        } catch (error) {\n            Notifications.drawActionResult(\"pagesNotifications1\", \"Hard error, contact development team\", \"error\")\n        }\n    }\n\n    render() {\n        return (\n\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Partners\"}\n                reloadPrimaryInfo={async () => {\n                    await this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Partner\",\n                        icon: <MuiIcons.Add />,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewPartnerForm/>)}\n                    }\n\n                ]}\n            >\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    actions={[\n\n\n                    ]}\n                    onRowClick={(event, rowData) => {\n                        (event.target).ondblclick = () => {\n                            this.props.history.push(\"/Dashboard/PartnerDetails/\" + rowData.id, {  state: {data: this.state.rawData[rowData.rowIndex]}});\n\n                        }\n\n                    }}\n                    dataModel={this.MODELS._Partner}\n                    searchEntry={'fullName'}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => this.updatePartnerInfo(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            }),\n                    }}\n\n                />\n            </YitPage>\n\n\n        )\n    }\n}\n\nexport default Partners\n","\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./TabsWidget.css\"\nimport Button from \"@mui/material/Button\";\n\n\n\n\n\nclass  TabsWidget  extends React.Component {\n    static id = 0\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabsWidgetId: \"TabsWidget\" +TabsWidget.id,\n            tabContentId: \"tabContent\"+TabsWidget.id,\n            tabButtonId: \"tabButton\"+TabsWidget.id,\n            currentIndex : 0\n        }\n        TabsWidget.id++\n    }\n\n    changeSelected(selectedIndex){\n        let buttonsList = document.getElementsByClassName(this.state.tabButtonId)\n        for(let i=0; i<buttonsList.length; i++){\n            if(buttonsList[i].id == selectedIndex){\n                buttonsList[i].style.color = \"darkblue\"\n                buttonsList[i].style.textDecoration = \"underline\"\n            }else {\n                buttonsList[i].style.color = \"grey\"\n                buttonsList[i].style.textDecoration = \"\"\n            }\n        }\n\n    }\n    generateTabs(){\n\n        return (\n        this.props.tabsList.map((tab, index)=>{\n\n            return(\n            <div className={\"tabTitle\"}>\n                <div\n                    style={{color: \"green\"}}\n                    id={this.state.tabButtonId+index}\n                    fullWidth className={\"TabsWidgetTab \" + this.state.tabButtonId}\n                    onClick={async () => {\n                        this.setState({\n                            currentIndex: index\n                        })\n                        if (tab.clickHandler != undefined) {\n                            tab.clickHandler()\n                        }\n                    }}\n                >{tab.title}</div>\n            </div>\n            )\n        })\n        )\n    }\n\n     setContent(index){\n\n         this.changeSelected(this.state.tabButtonId+index)\n         if(this.props.children.length === undefined){\n             //this.tabsRefs[0].current.color = \"Primary\"\n             return(this.props.children)\n         }else{\n             return(this.props.children[index])\n             //if(this.props.tabsList[0].clickHandler != undefined){this.props.tabsList[0].clickHandler()}\n         }\n\n\n\n        //document.getElementById(this.state.tabButtonId+index).style.color=  \"red\"\n\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    render() {\n        return(\n            <React.Fragment>\n                <section className={\"TabsWidget\"} id={this.state.tabsWidgetId}>\n                    <div className=\"tabsHeader\">\n                        {this.generateTabs()}\n                    </div>\n                    <div className=\"tabContent\" id={this.state.tabContentId}>\n                        {this.setContent(this.state.currentIndex)}\n                    </div>\n                </section>\n            </React.Fragment>\n\n        )\n    }\n\n}\nexport default TabsWidget","import React from \"react\";\nimport \"./YitView.css\"\nimport Button from \"@mui/material/Button\";\nclass YitView extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state =\n            {\n                active : this.props.active\n            }\n        this.myRef = React.createRef();\n    }\n\n    setActive(state){\n        this.setState({\n            active : state\n        })\n    }\n\n\n\n    render() {\n        if(this.state.active){\n            return (\n                <div className={\"active \" + this.props.className} id={this.props.id} ref={this.myRef}>\n                    {this.props.children}\n                </div>\n            )\n        }\n        return (\n           <div  className={\"active \" + this.props.className} id={this.props.id} ref={this.myRef}>\n               {this.props.children}\n               <div className={\"anActive\"}>\n                   {this.props.anActiveContent}\n               </div>\n\n           </div>\n        )\n    }\n}\nexport default YitView","import React from \"react\";\nimport \"./StationDetails.css\"\n\n\n//import LoadingButton from '@mui/lab/LoadingButton';\nimport SaveIcon from '@mui/icons-material/Save';\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport TabsWidget from \"../../../Components/TabsWidget/TabsWidget\";\nimport YitView from \"../../../Components/YitView/YitView\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\n\nconst MuiIcons = require('@mui/icons-material');\n\nconst PowerBank =  ({PowerBank, clickHandler, id})=>{\n    function drawContent(stat){\n        if(stat){\n            return (\n                <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\"\n                        onClick={()=>{\n                            clickHandler(setStat)\n                        }}>\n                    Eject\n                </Button>\n            )\n        }else {\n            return (\n                <div>Loading</div>\n                // <LoadingButton\n                //     fullWidth\n                //     loading\n                //     loadingPosition=\"start\"\n                //     startIcon={<SaveIcon />}\n                //     variant=\"outlined\"\n                // >\n                //     Requesting\n                // </LoadingButton>\n            )\n        }\n    }\n    const [stat, setStat] = React.useState(true);\n    return(\n        <div className={\"PowerBankView\"} id={id} style={{width: 200}}>\n        <b>ID: </b>\n            {PowerBank.powerBankId}<br/>\n            <b>Power Level:</b>{PowerBank.powerLevel}<br/>\n            {drawContent(stat)}\n        </div>\n    )\n}\n\nconst APNView =  ({APN,  id})=>{\n    if(APN != undefined){\n        return(\n            <div className={\"PowerBankView\"} id={id} >\n                <Grid container spacing={2} xs={8} style={{width: \"100%\"}}>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"MCCMNC\"\n                            defaultValue={APN.MCCMNC}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"User Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Password\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }else {\n        return <div>APN information not loaded yet</div>\n    }\n}\n\nclass StationDetails extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading : false,\n            currentStation: {Partner: {}},\n            currentStationInfo: {},\n            currentTab :\"one\",\n            stationAPNs : [],\n            }\n        this.loadPrimaryData().then(r => {})\n    }\n\n    async loadPrimaryData(){\n        let loadStationOp = await this.loadStationInfo(this.props.id)\n        if(loadStationOp){\n            await this.loadPowerBanksInfo(this.state.currentStation.id)\n            await this.loadAPN(this.state.currentStation.id, 0)\n        }else {\n\n\n\n        }\n    }\n    async componentDidMount() {\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                isLoading: false\n            })\n        }\n    }\n\n    async loadStationInfo(id) {\n        let getOneOP = await this.MODELS._Station.getOneByPublicId(id)\n        if (getOneOP.finalResult === true) {\n            let currentStation = getOneOP.result\n            this.setState({\n                currentStation: currentStation,\n            })\n            return true\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPowerBanksInfo(id) {\n        if(id != undefined){\n            let currentStationInfo = await this.MODELS._Station.getOneRealTime(id)\n            if (currentStationInfo !== false) {\n                this.setState({\n                    currentStationInfo: currentStationInfo,\n                })\n            } else {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load Station primary  Data\", \"error\")\n            }\n        }\n    }\n\n    async loadAPN(stationId, index) {\n        if(stationId != undefined){\n            let APN = await this.MODELS._Station.queryAPNNs(stationId, index)\n            if(APN !== false){\n                let current  = this.state.stationAPNs\n                current[index] = APN\n                this.setState({\n                    stationAPNs: current\n                })\n            }else {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load APN info\", \"error\")\n            }\n        }\n    }\n\n    drawPowerBanks(powerBanksList){\n        if(powerBanksList != undefined){\n            if(powerBanksList.length > 0){\n                return (\n                    powerBanksList.map((powerBank, index)=>{\n                        return(\n                            <div className=\"infoEntry\">\n                                <PowerBank\n                                    id={\"PowerBank\"+index}\n                                    PowerBank={powerBank}\n                                    clickHandler={\n                                        async (setState) => {\n                                            setState(false)\n                                            let r = await this.MODELS._Station.rentPowerBank(this.state.currentStation.id)\n\n                                            if(r){\n                                                Notifications.drawActionResult(\"pagesNotifications\", \"Power Bank ejected\", \"success\")\n                                                document.getElementById(\"PowerBank\"+index).style.display = \"none\"\n                                            }else {\n                                                Notifications.drawActionResult(\"pagesNotifications\", \"Could not rent the Power Bank\", \"error\")\n                                                setState(true)\n                                            }\n                                        }\n                                    }\n                                />\n                            </div>\n                        )\n                    })\n                )\n            }else {\n                return (<div>No Power Banks on the station</div>)\n            }\n        }else {\n            return (<div>Fetching power banks data</div>)\n        }\n\n    }\n    drawAPN(){\n        this.MODELS.station.queryAPNNs(this.state.currentStation.id, \"00\").then((result)=>{\n            if(result != false){\n                return <APNView APN={result}></APNView>\n            }else {\n                Notifications.drawActionResult(\n                    \"pagesNotifications\",\n                    \"Could not load APN info\",\n                    \"error\",\n                    \"standard\",\n                    null)\n            }\n        })\n    }\n    render() {\n        return (\n            <YitFragment\n                ref={this.currentPage}\n                customClass={\"StationDetailsFragment\"}\n                customId={\"StationDetailsFragment\"}\n                title={\"Station Details\"}\n            >\n                <div className=\"globalInformationHolder\">\n                    <div className=\"infoEntry\">\n                        <b>System Id:</b> {this.state.currentStation.systemId}\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Public Id:</b>\n                        {this.state.currentStation.id}\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Total Power Banks:</b>\n                        1\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Partner:</b>\n                        {this.state.currentStation.Partner.fullName}\n                    </div>\n                </div>\n                <YitView\n                    ref={this.myRef}\n                    className=\"informationHolder\"\n                    active={true}\n                    anActiveContent={\n                        <React.Fragment>\n                            <b>Station offline</b>\n                            <Button\n                                variant=\"contained\"\n                                color={\"primary\"}\n                                onClick={()=>{\n                                    this.myRef.current.setActive(true)\n                                    this.loadStationInfo(this.props.id).then(async ()=>{\n                                        //await this.loadPowerBanksInfo(this.state.currentStation.id)\n                                        await this.loadAPN(this.state.currentStation.id, 0)\n                                    })\n                                }}>\n                                Try Again\n                            </Button>\n                        </React.Fragment>\n                    }\n                >\n                    <TabsWidget\n                        tabsList={[\n                            {\n                                title: \"Power Banks\",\n                            },\n                            {\n                                title: \"Access point names\",\n                            },\n                            {\n                                title: \"Latest Transactions\",\n                            }\n                        ]}>\n                        <div id={\"powerBanksHolder\"}>\n                            {this.drawPowerBanks(this.state.currentStationInfo.powerBanksList)}\n                        </div>\n                        <div id={\"APPNSHolder\"}>\n                            <TabsWidget\n                                tabsList={[\n                                    {\n                                        title: \"First\",\n\n                                    },\n                                    {\n                                        title: \"Second\",\n                                    },\n                                    {\n                                        title: \"Third\",\n                                    },\n                                    {\n                                        title: \"Forth\",\n                                    },\n                                    {\n                                        title: \"Fifth\",\n                                    },\n\n                                ]}>\n                                <div id=\"firstHolder\"><APNView APN={this.state.stationAPNs[0]}/></div>\n                                <div id=\"secondHolder\"><APNView APN={this.state.stationAPNs[1]}/></div>\n                                <div id=\"thirdHolder\"><APNView APN={this.state.stationAPNs[2]}/></div>\n                                <div id=\"forthHolder\"><APNView APN={this.state.stationAPNs[3]}/></div>\n                                <div id=\"fifthHolder\"><APNView APN={this.state.stationAPNs[4]}/></div>\n                            </TabsWidget>\n                        </div>\n                    </TabsWidget>\n                </YitView>\n            </YitFragment>\n        )\n    }\n}\n\nexport default StationDetails\n\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport DynamicSubmitButton from \"../DynamicSubmitButton/DynamicSubmitButton\";\n\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\nconst DoneMsg = () =>{\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n    </div>)\n}\nclass YitTcpForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            newInfo: {},\n        }\n        this.submitButton = React.createRef()\n    }\n\n    changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.value;\n        if(e.target.type === \"number\"){\n            val = parseInt(val)\n        }\n        this.state.newInfo[nam]= val\n    }\n\n    drawResult(){\n        this.props.view.pushNotification(this.props.errorMsg, \"error\", 2000)\n        //Notifications.drawActionResult(\"pagesNotifications\", this.props.errorMsg, \"error\")\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault()\n        this.submitButton.current.setState({isSubmitting : true})\n        this.setState({\n            isSubmitting: true\n        })\n        if(await this.props.handleSubmit(this.state.newInfo) === true){\n            this.setState({\n                isSubmitted: true\n            })\n\n            setTimeout(()=>{\n                this.setState({\n                    isSubmitted: false,\n                    isSubmitting: false\n                })\n            }, 2000)\n\n        }else {\n            this.drawResult()\n            this.submitButton.current.setState({isSubmitting : false})\n        }\n    }\n\n    recursiveCloneChildren(children) {\n        return React.Children.map(children, child => {\n            if(!React.isValidElement(child)) return child;\n            let  childProps = {onChange: this.changeHolder.bind(this)};\n            childProps.children = this.recursiveCloneChildren(child.props.children);\n            return React.cloneElement(child, childProps);\n        })\n    }\n\n    async componentDidMount() {\n\n    }\n\n    render() {\n        if(!this.state.isSubmitted){\n            return (\n\n                    <form  onSubmit={this.handleSubmit.bind(this)} id={\"myForm\"}>\n                        <Grid container  spacing={2} xs={12} >\n                            <Grid container item  xs={10} spacing={2}>\n                                {this.recursiveCloneChildren(this.props.children)}\n                            </Grid>\n                            <Grid item xs={2}>\n                                <DynamicSubmitButton ref={this.submitButton}></DynamicSubmitButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n\n            )\n        }else{\n            return (\n                <div className={\"YitTcpForm\"} id={\"YitTcpForm\"}>\n                    <DoneMsg/>\n                </div>\n            )\n        }\n\n    }\n}\nexport default YitTcpForm","import React from \"react\";\nimport \"./StationEditForm.css\"\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport TabsWidget from \"../../../Components/TabsWidget/TabsWidget\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitTcpForm from \"../../../Components/YitTcpForm/YitTcpForm\";\nimport {VolumeDown, VolumeUp} from \"@mui/icons-material\";\nimport Slider from \"@mui/material/Slider\";\n\nconst MuiIcons = require('@mui/icons-material');\n\nconst APNView =  ({APN,  id})=>{\n    if(APN == undefined){\n        APN = {}\n    }\n\n    return(\n        <div className={\"PowerBankView\"} id={id} >\n            <YitForm>\n                <Grid container spacing={2} xs={12} style={{width: \"100%\"}}>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"MCCMNC\"\n                            defaultValue={APN.MCCMNC}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"User Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Password\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </YitForm>\n\n        </div>\n    )\n}\n\nclass StationEditForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading : false,\n            currentStation: {Partner: {}},\n            currentStationInfo: {},\n            currentTab :\"one\",\n            stationAPNs : [],\n\n            partnersList: [],\n            statsList: [\n                {label: \"active\", id: 0},\n                {label: \"Frozen\", id: 1}\n                ]\n            }\n\n        this.fragment = React.createRef()\n        if(this.state.currentStation === undefined){\n            this.state.currentStation = {}\n        }else {\n            this.state.currentStation = this.props.station\n            this.loadPrimaryData().then(r => {})\n        }\n    }\n\n    async loadPartners(){\n        let getAllOp = await this.MODELS._Partner.getAll(0, 999)\n        if(getAllOp.finalResult !== false){\n            let partners = getAllOp.result.rows\n            let prepared = partners.map(partner =>{\n                return{value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        }else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPrimaryData(){\n\n        await this.loadPartners();\n        if(this.state.failedLoading){\n            this.fragment.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.fragment.current.setState({\n                isLoading: false\n            })\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n    static getDerivedStateFromProps(){\n\n    }\n\n    async loadStationInfo(id) {\n        let getOneOP = await this.MODELS.station.getOnById(id)\n        if (getOneOP.finalResult === true) {\n            let currentStation = getOneOP.result\n\n            this.setState({\n                currentStation: currentStation,\n            })\n            return true\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPowerBanksInfo(id) {\n        let currentStationInfo = await this.MODELS._Station.getOneRealTime(id)\n        if (currentStationInfo != false) {\n            this.setState({\n                currentStationInfo: currentStationInfo,\n            })\n        } else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load Station primary  Data\", \"error\")\n        }\n    }\n\n    async loadAPN(stationId, index) {\n        let APN = await this.MODELS._Station.queryAPNNs(stationId, index)\n        if(APN != false){\n            let current  = this.state.stationAPNs\n            current[index] = APN\n            this.setState({\n                stationAPNs: current\n            })\n        }else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load APN info\", \"error\")\n        }\n    }\n\n    async handleSubmitStationData(newData) {\n        let updateOp = await this.MODELS._Station.update(this.state.currentStation.systemId, newData)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    async handleSetAddress(newData) {\n        let updateOp = await this.MODELS._Station.setAddress(this.state.currentStation.id, newData)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    async handleSetVolume(newData) {\n        let updateOp = await this.MODELS._Station.setVolume(this.state.currentStation.id, newData.level)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    drawAPN(){\n        this.MODELS.station.queryAPNNs(this.state.currentStation.id, \"00\").then((result)=>{\n            if(result != false){\n                return <APNView APN={result}></APNView>\n            }else {\n                Notifications.drawActionResult(\n                    \"pagesNotifications\",\n                    \"Could not load APN info\",\n                    \"error\",\n                    \"standard\",\n                    null)\n            }\n        })\n    }\n\n    render() {\n        return (\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"StationEditForm\"}\n                customId={\"StationEditForm\"}\n                title={\"Station Details\"}\n                primaryInfoLoader={()=>{this.loadPrimaryData().then(r => {})}}\n            >\n\n\n                <div className=\"hardCodedInfoHolder\">\n                    <TabsWidget\n                        tabsList={[\n                            {title: \"Primary Info\"},\n                            {title: \"Server configuration\"},\n                            {title: \"APNS\"},\n                            {title: \"Sound Level\"},\n                        ]}\n                    >\n                        <YitForm\n                            handleSubmit={this.handleSubmitStationData.bind(this)}\n                        >\n                            <Grid container spacing={2} xs={12}>\n                                <Grid item xs={12}><b>Station Primary data</b></Grid>\n                                <Grid item xs={5}>\n                                    <TextField\n                                        disabled fullWidth required variant={\"outlined\"}\n                                        id=\"outlined-required\" label=\"SystemId\" defaultValue={this.state.currentStation.systemId}\n                                    >\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={7}>\n                                    <TextField\n                                        fullWidth required variant={\"outlined\"}\n                                        name={\"id\"} id=\"outlined-required\" label=\"Public Id\" defaultValue={this.state.currentStation.id}\n                                    />\n                                </Grid>\n                                <Grid item xs={5}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"demo-simple-select-label\">Partner</InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"currentPartner\"\n                                            label=\"Partner\"\n                                            name={\"currentPartner\"}\n                                            defaultValue={this.state.currentStation.currentPartner}\n\n                                        >\n                                            {this.state.partnersList.map((option) => (\n                                                <MenuItem value={option.value}> {option.label}</MenuItem>\n                                            ))}\n                                            <MenuItem value={10}>Ten</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            name={\"stat\"}\n                                            label=\"Stat\"\n                                            defaultValue={this.state.currentStation.stat}\n                                        >\n                                            {this.state.statsList.map((option) => (\n                                                <MenuItem value={option.id}> {option.label}</MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <TextField\n                                        fullWidth required variant={\"outlined\"} type={\"number\"}\n                                        id=\"outlined-required\" name=\"price\" label=\"Price\" defaultValue={this.state.currentStation.price}\n                                    >\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                        </YitForm>\n                        <YitTcpForm\n                            handleSubmit={this.handleSetAddress.bind(this)}>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth size={\"small\"} name={\"address\"}\n                                    required id=\"outlined-required\" label=\"Server address\" placeholder=\"xxx.xxx.xxx.xxx\"\n                                >\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <TextField\n                                    fullWidth required type={\"number\"} name={\"port\"} size={\"small\"}\n                                    id=\"outlined-required\" label=\"Port Number\" defaultValue=\"4000\"\n                                />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <TextField\n                                    fullWidth required type={\"number\"}  name={\"heartBit\"} size={\"small\"}\n                                    id=\"outlined-required\" label=\"Heart Bit\" defaultValue=\"30\"\n                                />\n                            </Grid>\n                        </YitTcpForm>\n                        <TabsWidget\n                            tabsList={[\n                                {\n                                    title: \"First\",\n\n                                },\n                                {\n                                    title: \"Second\",\n                                },\n                                {\n                                    title: \"Third\",\n                                },\n                                {\n                                    title: \"Forth\",\n                                },\n                                {\n                                    title: \"Fifth\",\n                                },\n\n                            ]}\n                        >\n                            <div id=\"firstHolder\"><APNView APN={this.state.stationAPNs[0]}/></div>\n                            <div id=\"secondHolder\"><APNView APN={this.state.stationAPNs[1]}/></div>\n                            <div id=\"thirdHolder\"><APNView APN={this.state.stationAPNs[2]}/></div>\n                            <div id=\"forthHolder\"><APNView APN={this.state.stationAPNs[3]}/></div>\n                            <div id=\"fifthHolder\"><APNView APN={this.state.stationAPNs[4]}/></div>\n                        </TabsWidget>\n                        <YitTcpForm\n                            view={this.fragment.current}\n                            errorMsg={\"Could not set volume correctly\"}\n                            handleSubmit={this.handleSetVolume.bind(this)}\n                        >\n                            <Grid item xs={12}>\n                                <div style={{display: \"flex\"}}>\n                                    <VolumeDown />\n                                    <Slider\n                                        name={\"level\"}\n                                        min={0}\n                                        max={15}\n                                        aria-label=\"Volume\"\n                                        onChange={\"\"} />\n                                    <VolumeUp />\n                                </div>\n                            </Grid>\n                        </YitTcpForm>\n                    </TabsWidget>\n                </div>\n            </YitFragment>\n        )\n    }\n}\nexport default StationEditForm\n\n","import React from 'react';\nimport \"./Stations.css\"\nimport ReactDOM from \"react-dom\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport NewStationForm from \"./NewStationForm/NewStationForm\";\nimport Chip from \"@mui/material/Chip\";\nimport StationDetails from \"./StationDetails/StationDetails\";\nimport StationEditForm from \"./StationEditForm/StationEditForm\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\nclass Stations extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            failedLoading : false,\n            columns: [\n                {title: 'SystemId', field: 'systemId'},\n                {title: 'ID', field: 'id'},\n                {\n                    title: 'Stat', field: 'stat',\n                    lookup: {\n                        0: <Chip  label=\"Active\" color={\"primary\"} style={{width: 120}}/>,\n                        1: <Chip variant={\"outlined\"} label=\"Offline\"  style={{width: 120, color: \"red\"}} />\n                    }\n                },\n                {\n                    title: 'Rent Fees', field: 'price',\n                    render: rowData => rowData['price'] + \" Units\"\n                },\n                {title: 'Added On', render: rowData => rowData['createdAt'].substr(0, 10)},\n            ],\n            stationsList : [],\n            page: 0,\n            totalCount: 0\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        this.tableRef = React.createRef();\n    }\n\n    async loadPrimaryData() {\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadPrimaryData()\n        setTimeout(()=>{\n            // this.tableRef.current.onToggleDetailPanel([0], rowData => <StationDetails id={rowData.systemId}/>)\n            console.log(this.tableRef.current)\n        }, 3000)\n\n    }\n\n\n    componentWillUnmount() {\n\n    }\n\n    setValid = async() =>{\n        let result = [];\n        let data = this.state.rawData;\n        for(let i=0; i<data.length; i++){\n            if (parseInt(data[i].valid) == 1){\n                result.push(data[i])\n            }\n        }\n        this.setState({data: result})\n    }\n\n    render() {\n        return (\n        <>\n            <YitPage\n                ref={this.currentPage}\n                title={\"Stations\"}\n                customClass={\"StationsPage\"}\n                customdId={\"StationsPage\"}\n                contentCustomId={\"StationsPageContent\"}\n                reloadPrimaryInfo={()=>{\n                    this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Station\",\n                        icon : <MuiIcons.Add/>,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewStationForm></NewStationForm>)}\n                    }\n                ]}\n                reloadPrimaryInfo={()=>this.loadPrimaryData()}\n            >\n                <YitDataTable\n                    ref={this.tableRef}\n                    columns={this.state.columns}\n                    actions={[\n                        {\n                            icon: ()=><MuiIcons.Block style={{color: \"darkred\"}}/>,\n                            tooltip: 'Delete',\n                        },\n                        {\n                            icon: ()=><MuiIcons.Delete style={{color: \"darkred\"}}/>,\n                            tooltip: 'Delete',\n                        },\n                        {\n                            icon: () => <MuiIcons.Edit style={{color: \"\"}}/>,\n                            tooltip: \"Edit\",\n                            onClick: (event, data) => this.currentPage.current.mountBackDrop(<StationEditForm station={data}/>)\n                        }\n                    ]}\n                    dataModel={this.MODELS._Station}\n                    detailPanel={(rowData) => {\n                        return (\n                            <div className={\"stationDetailsHolder\"}>\n                                <StationDetails id={rowData['rowData'].id}/>\n                            </div>\n                        )\n                    }}\n\n                />\n            </YitPage>\n            </>\n\n\n        )\n    }\n}\n\nexport default Stations","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./PartnerEditForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {LoadScript} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport {MAP_API_KEY} from \"../../../Apis/GlobalConfig\";\n\n\nclass PartnerEditForm extends YitComponent {\n    constructor(props) {\n        super(props);\n        console.clear()\n        console.log(this.props.partner)\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n\n        }\n        this.fragment = React.createRef()\n\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n\n    async handleSubmit(newData) {\n        let updateOp = await this.MODELS._Partner.update(this.props.partner.id, newData)\n        if (updateOp.finalResult) {\n            this.formRef.current.setState({\n                doneMsg: updateOp.result\n            })\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: updateOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"PartnerEditForm\"}\n                customId={\"PartnerEditForm\"}\n                isLoading={false}\n                primaryInfoLoader={() => this.loadPrimaryData().then()}\n            >\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                    onSuccess={()=>{\n                        window.location.reload()\n                    }}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                id=\"outlined-required\" name={'fullName'}\n                                label=\"Name\" defaultValue={this.props.partner.fullName}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n                                    variant={\"outlined\"}\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Rent Policy\"\n                                    defaultValue={this.props.partner.type}\n                                >\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Stat</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"stat\"}\n                                    label=\"State\"\n                                    defaultValue={this.props.partner.stat}\n                                >\n                                    {PartnerStates.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={5}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"phone\"} id=\"outlined-required\"\n                                label=\"Phone\" placeholder={\"0X XX XX XX XX\"} defaultValue={this.props.partner.phone}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"mail\"} id=\"outlined-required\" defaultValue={this.props.partner.mail}\n                                label=\"Address mail\" placeholder={\"xxx@xxx.xxx\"}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"password\"} id=\"outlined-required\"\n                                label=\"Password\" placeholder={\"unchanged\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <LoadScript\n                                googleMapsApiKey={MAP_API_KEY}\n                            >\n                              <YitLocationPicker center={{lat: this.props.partner.x, lng: this.props.partner.y}}/>\n                            </LoadScript>\n                        </Grid>\n                    </Grid>\n                </YitForm>\n            </YitFragment>\n        )\n\n\n    }\n}\n\nexport default PartnerEditForm\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./CodeGeneratorForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport RechargeCodeStates from \"../../../Structures/RechargeCodeStates\";\nimport YitComponent from \"../../../Structures/YitComponent\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\n\nclass CodeGeneratorForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            partners: []\n        }\n        this.currentForm = React.createRef()\n    }\n    async componentDidMount() {\n\n    }\n    async  doGenerate(data){\n        data[\"partnerId\"] = this.props.partner.id\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            this.currentForm.current.setState({errMsg: JSON.stringify(c.error)})\n            return false\n        }\n    }\n    render() {\n        return (\n            <div className={\"CodeGeneratorForm\"}>\n                <YitForm\n                    ref={this.currentForm}\n                    errorMsg={\"Lot created successfully\"}\n                    handleSubmit={this.doGenerate.bind(this)}\n                >\n\n                        <TextField\n                            disabled fullWidth variant={\"outlined\"}\n                            name=\"partnerId\" labelId={\"Partner-select-label\"} label={\"Partner\"}\n                            defaultValue={this.props.partner.fullName}\n                        >\n\n                        </TextField>\n\n                    <br/><br/>\n                    <TextField\n                        required fullWidth variant={\"outlined\"}\n                        name={\"amount\"}\n                        label=\"Amount\"\n                        type={\"number\"}\n                    >\n                    </TextField>\n                    <br/><br/>\n                    <TextField\n                        required fullWidth variant={\"outlined\"}\n                        name={\"number\"} label=\"Number\"\n                        type=\"number\"\n                    >\n                    </TextField>\n                    <br/><br/>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"algorithm-select-label\">Algorithm</InputLabel>\n                        <Select\n                            fullWidth\n                            name=\"algorithm\"\n                            label={\"Algorithm\"}\n                            defaultValue={0}\n                        >\n                            <MenuItem value={0}>bcrypt + JWT</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br/><br/>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                        <Select\n                            required\n                            fullWidth\n                            name={\"stat\"}\n                            labelId=\"demo-simple-select-label\"\n                            label=\"Stat\"\n                            defaultValue={1}\n                        >\n                            {RechargeCodeStates.map(cs =>{\n                                return       <MenuItem value={cs.value}>{cs.label}</MenuItem>\n                            })}\n                        </Select>\n                    </FormControl>\n                </YitForm>\n            </div>\n\n\n        )\n    }\n}\nexport default CodeGeneratorForm","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./RechargeCodes.css\"\nimport MaterialTable, {MTableToolbar} from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\n\nimport {Link} from \"react-router-dom\";\n\n\n\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport RechargeCodeStates from \"../../Structures/RechargeCodeStates\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitForm from \"../../Components/YitForm/YitForm\";\nimport StatBox from \"../../Components/StatBox/StatBox\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport YitFragment from \"../../Components/YitFragment/YitFragment\";\nimport MuiIcons from \"@mui/icons-material\";\nimport StationEditForm from \"../Stations/StationEditForm/StationEditForm\";\nimport TransactionOperations from \"../../Structures/TransactionOperations\";\n\nconst Icons = require(\"@mui/icons-material\")\n\n\n\n\nclass RechargeCodes extends YitComponent {\n\n    constructor(props){\n        let t =  RechargeCodeStates.reduce((reducer ,reCodeState)=> {\n\n            return  reducer + ` ${reCodeState.value} : \"${reCodeState.label}\", `\n        }, '')\n\n        super(props);\n\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: {0 : \"New\",  1 : \"Printed\",  2 : \"Consumed\"}\n                },\n                {title: 'Amount', field: \"amount\"},\n                {title: 'Date', render: rowData =>rowData['createdAt'].substr(0, 10)},\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n\n        this.submitButton = React.createRef()\n    }\n\n    async  doGenerate(data){\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            return false\n        }\n    }\n\n    async componentDidMount() {\n        this.currentPage.current.setState({\n            isLoading: false\n        })\n        let t = await this.dataModel.getAll(0, 50)\n\n    }\n\n    async changeStat(rowData, stat){\n        try{\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if(updateResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                let currentRow = this.state.data.indexOf(rowData)\n                let newData = this.state.data\n                newData[currentRow].stat = stat\n                this.setState({\n                    data: newData\n                })\n\n            }\n        }catch (e){\n\n        }\n    }\n\n    dataModel = {\n        getAll : async (offset, limit) => {\n            let result = await this.MODELS._RechargeCode.getAllForPartner(offset, limit, this.props.id)\n            return result\n        }\n    }\n\n\n    render() {\n        return (\n                <YitFragment\n                    ref={this.currentPage}\n                    customClass={\"ReCodesPage\"} customId={\"ReCodesPage\"} title={\"Recharge Codes\"}\n                    customContentClass={\"ReCodesContent\"}>\n                    <div className={\"codesContainer\"}>\n                    <YitDataTable\n                        columns={this.state.columns}\n                        dataModel={this.dataModel}\n                        options={{search: false, toolbar: false,  filtering: true, paginationPosition: \"bottom\", selection: true}}\n                        actions={[\n                            {\n                                icon: ()=>\"delete\",\n                                tooltip: 'Delete',\n                                isFreeAction: true\n                            }\n                        ]}\n                    >\n\n                    </YitDataTable>\n                    </div>\n                </YitFragment>\n        )\n    }\n}\n\nexport default RechargeCodes","import React from \"react\";\nimport \"./YitImageSlider.css\"\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from '@mui/material/IconButton';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport {Delete} from \"@mui/icons-material\";\nimport {CircularProgress} from \"@material-ui/core\";\nimport {Notifications} from \"../../Apis/Notifications\";\n\n\nclass Image extends React.Component{\n    constructor(props) {\n        super(props);\n        this.container = {\n            width: 200,\n            height: 200,\n            margin: \"10px\",\n            borderRadius: 20,\n            position: \"relative\"\n        }\n        this.imageStyle = {\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: 20\n        }\n        this.deleteImage= {\n\n        }\n        this.state ={\n\n        }\n\n    }\n    componentDidMount() {\n        document.getElementById(this.props.id).onmouseenter = ()=>{\n            document.getElementById(\"delete\"+this.props.id).style.display = \"flex\"\n        }\n        document.getElementById(this.props.id).onmouseleave = ()=>{\n            document.getElementById(\"delete\"+this.props.id).style.display = \"none\"\n        }\n    }\n\n    render() {\n        return(\n            <div style={this.container}  id={this.props.id}>\n                <img className={\"image\"} src={this.props.url} />\n                <div\n                    className=\"deleteImage\" style={this.deleteImage} id={\"delete\"+this.props.id}\n                    onClick={()=>this.props.onDelete(this.props.systemId)}\n                >\n                    <Delete style={{color: 'red'}}></Delete>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass NewImage extends React.Component{\n    constructor(props) {\n        super(props);\n        this.container = {\n            width: 200,\n            height: 200,\n            margin: \"10px\",\n            borderRadius: 20,\n            position: \"relative\"\n        }\n        this.imageStyle = {\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: 20\n        }\n        this.deleteImage= {\n\n        }\n        this.state ={\n            uploading: false\n        }\n\n    }\n    componentDidMount() {\n        document.getElementById(\"containerNew\"+ this.props.id).onmouseenter = ()=>{\n            document.getElementById(\"delete\"+this.props.id).style.display = \"flex\"\n            document.getElementById(\"new\"+this.props.id).style.display = \"flex\"\n        }\n        document.getElementById('containerNew' +this.props.id).onmouseleave = ()=>{\n            document.getElementById(\"delete\"+this.props.id).style.display = \"none\"\n            document.getElementById(\"new\"+this.props.id).style.display = \"none\"\n        }\n\n    }\n    isUploading(uploading){\n        if(uploading){\n            return (<CircularProgress />)\n        }\n\n    }\n    render() {\n        return(\n            <div style={this.container}  id={\"containerNew\"+this.props.id} >\n                <img className={\"image\"} src={this.props.url} />\n                <div className=\"deleteImage\" id={\"delete\"+this.props.id} onClick={this.props.onClick.bind(this)}>\n                    <Delete style={{color: 'red'}}></Delete>\n                </div>\n                <div className=\"newLabel\" style={this.deleteImage} id={\"new\"+this.props.id}>\n                    New\n                </div>\n\n            </div>\n        )\n    }\n}\n\nclass YitImageSlider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.sharedData = {}\n        this.state = {\n            working: false,\n            currentImage: '',\n            done: false,\n            partnersList: [],\n            markers: [],\n            propsImages: this.props[\"ImagesList\"] ?? [],\n            toUpload: [],\n            toBeUploaded: [],\n            ImagesList : []\n        }\n        this.state.propsImages.forEach((image, index) =>{\n            this.state.ImagesList.push({id: image.id, link: image.link, toUpload : false})\n        })\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        this.setState({\n            ImagesList: this.state.ImagesList\n        })\n    }\n\n    isCompleted(){\n        if(this.sharedData !== undefined && this.sharedData !== {}){\n            return true\n        }else {\n            alert(\"no images selected\")\n            return false\n        }\n    }\n\n    onImageSelect(e){\n        for (let i = 0; i < e.target.files.length; i++){\n            const file = e.target.files[i];\n            console.log(file)\n            let imageLink =  URL.createObjectURL(file)\n            this.state.ImagesList.push({link: imageLink, toUpload: true, file: file})\n\n        }\n\n        // let imageTag  = document.getElementById('imageTag')\n        this.setState({\n            ImagesList:  this.state.ImagesList\n        })\n        this.sharedData = this.state.toUpload\n    }\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    deleteToBeUploaded(image){\n        let newImages = []\n        this.state.ImagesList.forEach(imagee =>{\n            if(image.link !== imagee.link) newImages.push(imagee)\n        })\n        this.setState({\n            ImagesList: newImages\n        })\n        // const index = this.state.ImagesList.indexOf(image);\n        // this.setState({\n        //     ImagesList: this.state.ImagesList\n        // })\n        // alert(index)\n        // alert(JSON.stringify(this.state.ImagesList))\n    }\n\n    deleteAlreadyUploaded(id){\n        this.props.onDelete([{id: id}])\n    }\n\n    renderContent(list){\n        return(\n        list.map((image, index) =>{\n            if(image.toUpload){\n                return (\n                    <NewImage\n                        url={image.link} id={index} ref={image}\n                        onClick={() =>this.deleteToBeUploaded({link: image.link, toUpload: true, file: image.file})}>\n\n                    </NewImage>)\n            }else {\n                return (\n                    <Image\n                        url={image.link}\n                        id={index}\n                        systemId={image.id}\n                        onDelete={this.deleteAlreadyUploaded.bind(this)}\n                    />\n                )\n            }\n\n        }))\n    }\n\n    async onSave(){\n\n        this.setState({working: true})\n        let toUpload = []\n        for (const image of this.state.ImagesList) {\n            if (image.toUpload) {\n                toUpload.push(image)\n            }\n        }\n        let result = await this.props.onSave(toUpload)\n        if(result){\n            Notifications.drawActionResult(\"notificationsContainer1\", \"Images uploaded ad attached to partner\", \"success\")\n            this.setState({working: false})\n        }else {\n            Notifications.drawActionResult(\"notificationsContainer1\", \"Failed to finish the operation \", \"error\")\n\n            this.setState({working: false})\n        }\n\n\n    }\n\n    renderGlobalOperations(list){\n\n        let show = false\n        for (const image of list) {\n            if(image.toUpload){\n\n\n                show = true\n                break;\n            }\n        }\n        if(show){\n            return (<div>\n                <Button\n                    variant={\"contained\"} color={\"primary\"}\n                    onClick={this.onSave.bind(this)}\n                >\n                    Upload\n                </Button>\n            </div>)\n        }\n    }\n\n    render() {\n        if(this.state.working){\n            return (\n                <div className={'YitImageSlider'}><CircularProgress></CircularProgress></div>\n            )\n        }else{\n            return (\n                <div className={'YitImageSlider'}>\n                    <div className=\"Content\">\n                        <div className={\"addImages\"}  onClick={()=>{document.getElementById(\"fileInput\").click()}}>\n                            <IconButton aria-label=\"delete\" size={\"large\"}>\n                                <AddCircleOutlineIcon fontSize=\"inherit\" >\n\n                                </AddCircleOutlineIcon>\n                                <input\n                                    id={\"fileInput\"}\n                                    onChange={(e)=>this.onImageSelect(e)}\n                                    type=\"file\"\n                                    hidden\n                                    multiple\n                                />\n                            </IconButton>\n                        </div>\n                        {this.renderContent(this.state.ImagesList)}\n                    </div>\n                    {this.renderGlobalOperations(this.state.ImagesList)}\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default YitImageSlider","import React from \"react\";\nimport \"./PartnerDetails.css\"\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport {GoogleMap, LoadScript} from \"@react-google-maps/api\";\nimport TabsWidget from \"../../Components/TabsWidget/TabsWidget\";\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\nimport StationDetails from \"../Stations/StationDetails/StationDetails\";\nimport Chip from \"@mui/material/Chip\";\nimport {Edit,  QrCode2Outlined} from \"@mui/icons-material\";\nimport PartnerEditForm from \"./PartnerEditForm/PartnerEditForm\";\nimport CodeGeneratorForm from \"./CodeGeneratorForm/CodeGeneratorForm\";\nimport RechargeCodes from \"../RechargeCodes/RechargeCodes\";\nimport {MAP_API_KEY} from \"../../Apis/GlobalConfig\";\nimport YitImageSlider from \"../../Components/PartnerImages/YitImageSlider\";\nimport AccountBoxIcon from '@mui/icons-material/AccountBox';\nimport AssignmentIndIcon from '@mui/icons-material/AssignmentInd';\nimport PhoneInTalkIcon from '@mui/icons-material/PhoneInTalk';\nimport AppsIcon from '@mui/icons-material/Apps';\n\n\nconst MuiIcons = require(\"@mui/icons-material\")\nconst PartnerStations = ({data, icons}) => {\n\n    let columns = [\n        {title: 'SystemId', field: 'systemId'},\n        {title: 'ID', field: 'id'},\n        {\n            title: 'Stat', field: 'stat',\n            lookup: {\n                0: <Chip label=\"Active\" color={\"primary\"} style={{width: 120}}/>,\n                1: <Chip variant={\"outlined\"} label=\"Offline\" style={{width: 120, color: \"red\"}}/>\n            }\n        },\n    ]\n    return (\n        <MaterialTable\n            style={{height: \"100%\"}}\n            components={\n                {\n                    Container: props => (\n                        <div style={\n                            {\n                                position: \"relative\", width: '100%', height: \"100%\",\n                                overflow: \"auto\"\n                        }}>\n                            {props.children}\n                        </div>\n                    ),\n\n                }\n            }\n            icons={icons}\n            title={\"\"}\n            columns={columns}\n            data={data}\n            localization={{body: {editRow: {deleteText: 'are you sur you wanna delete this item '}}}}\n            actions={[\n                {\n                    icon: () => <MuiIcons.Block style={{color: \"darkred\"}}/>,\n                    tooltip: 'Delete',\n\n                },\n                {\n                    icon: () => <MuiIcons.Delete style={{color: \"darkred\"}}/>,\n                    tooltip: 'Delete',\n                },\n                (rowData) => {\n                    return {\n                        icon: () => <MuiIcons.Launch\n                            style={{color: \"black\"}}\n                            onClick={()=>{\n                                this.currentPage.current.mountBackDrop(\n                                    <StationDetails id={rowData.id}></StationDetails>\n                                )\n                            }\n                            }\n                        />,\n                        tooltip: \"Details\",\n                    }\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                exportButton: true,\n                toolbar: false,\n            }}\n        />\n    )\n}\n\nclass PartnerDetails extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state =\n            {\n                isLoading: true,\n                failedLoading: true,\n                currentPartner: {Stations : {}, Images: []},\n                partnerImages: []\n            }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadCurrentPartner(this.props.id)\n        if(this.state.failedLoading){\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async loadCurrentPartner(id) {\n        let getOneOp = await this.MODELS._Partner.getOnById(id)\n        if (getOneOp.finalResult === true) {\n            let currentPartner = getOneOp.result, partnerImages = []\n\n            currentPartner.Images.forEach(image=>{\n                partnerImages.push(image.link)\n            })\n            this.setState({\n                failedLoading: false,\n                currentPartner: currentPartner,\n                partnerImages: partnerImages\n            })\n\n\n\n\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadPrimaryData()\n    }\n\n    async uploadImage(image){\n        let data = new FormData()\n        data.append(\"file\", image.file)\n        let uploadOp = await this.MODELS._Tools.uploadFiles(\"partnerImages\", data)\n        return uploadOp\n    }\n\n    deleteImage\n\n    async onDelete(images){\n        console.clear()\n        console.log(\"starting\")\n        let success = true, deletedImages = []\n        for (const image of images) {\n            let deleteOp = await this.MODELS._Partner.deleteImage(image.id)\n            console.log(deleteOp)\n            if (deleteOp.finalResult) {\n\n            } else {\n                success = false\n            }\n        }\n        if (success) {\n            return true\n        } else {\n            return false\n        }\n    }\n    async onSave(images){\n        console.clear()\n        console.log(\"starting\")\n        let success = true, uploadedFiles = []\n        for (const image of images) {\n            if (image.toUpload) {\n                let uploadOp = await this.uploadImage(image)\n                if (uploadOp.finalResult) {\n                    uploadedFiles.push(uploadOp.result)\n                } else {\n                    success = false\n                }\n            }\n        }\n        if (success) {\n            try {\n                let addImagesOp = await this.MODELS._Partner.addImages(this.state.currentPartner.id, uploadedFiles)\n                return true\n            }\n            catch (e){\n                return  false\n            }\n\n        } else {\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"PartnerDetails\"}\n                customId={\"PartnerDetailsPage\"}\n                title={\"Partner Details\"}\n                topOperations={[\n                    {\n                        text:\"Generator\",\n                        icon: <QrCode2Outlined fontSize={\"medium\"}></QrCode2Outlined>,\n                        onClick: ()=>{\n                            this.currentPage.current.mountBackDrop(\n                                <CodeGeneratorForm partner={this.state.currentPartner}/>\n                            )\n                        }\n                    },\n                    {\n                        text: \"Edit\",\n                        icon: <Edit fontSize={\"medium\"} />,\n                        onClick: ()=>{\n                            this.currentPage.current.mountBackDrop(\n                                <PartnerEditForm partner={this.state.currentPartner}/>\n                            )\n                        }\n                    }\n                ]}\n                reloadPrimaryInfo={()=>{this.loadPrimaryData().then()}}\n            >\n                <TabsWidget\n                    tabsList={[\n                        {title: \"Global Information\"},\n                        {title: \"Stations\"},\n                        {title: \"Transactions\"},\n                        {title: \"Recharge Codes\"},\n                    ]}\n                >\n                    <div id={\"GlobalInfoHolder\"}>\n                        <div className=\"globalInformationHolder\">\n                            <span style={{display: \"flex\", alignItems: \"center\"}}><AssignmentIndIcon></AssignmentIndIcon>{this.state.currentPartner.fullName}</span>\n                            <span style={{display: \"flex\", alignItems: \"center\"}}>\n                                <AppsIcon></AppsIcon>\n                                {this.state.currentPartner.Stations.length} affected stations\n                            </span>\n                            <span style={{display: \"flex\", alignItems: \"center\"}}><PhoneInTalkIcon/>{this.state.currentPartner.phone}</span>\n                            <span style={{display: \"flex\", alignItems: \"center\"}}> <b>Current Stat:</b>{this.state.currentPartner.stat}</span>\n                        </div>\n                        <div className=\"partnerImagesSlide\">\n                            <YitImageSlider\n                                ImagesList={this.state.currentPartner.Images}\n                                onSave={this.onSave.bind(this)}\n                                onDelete={this.onDelete.bind(this)}\n                            />\n                        </div>\n                        <div className=\"mapHolder\">\n                            <LoadScript\n                                googleMapsApiKey={MAP_API_KEY}\n                            >\n                                <GoogleMap\n                                    mapContainerStyle={{width: \"100%\", height: \"100%\"}}\n                                    center={{\n                                        lat: this.state.currentPartner.x,\n                                        lng: this.state.currentPartner.y\n                                    }}\n                                    zoom={15}\n                                >\n                                    <></>\n                                </GoogleMap>\n                            </LoadScript>\n                        </div>\n                    </div>\n                    <>\n                        <PartnerStations\n                            data={this.state.currentPartner.Stations}\n                            icons={tableIcons}\n                        ></PartnerStations>\n                    </>\n                    <></>\n                    <>\n                        <RechargeCodes id={this.state.currentPartner.id}></RechargeCodes>\n                    </>\n                </TabsWidget>\n            </YitPage>\n        )\n    }\n}\nexport default PartnerDetails","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Transactions.css\"\nimport MaterialTable,  {MTableToolbar}from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\nimport {Link} from \"react-router-dom\";\n\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport RechargeCodeStates from \"../../Structures/RechargeCodeStates\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitForm from \"../../Components/YitForm/YitForm\";\nimport StatBox from \"../../Components/StatBox/StatBox\";\n\nimport TransactionOperations from \"../../Structures/TransactionOperations\";\nconst MuiIcons = require('@mui/icons-material');\nfunction statToString(stat){\n    let result = \"\"\n    RechargeCodeStates.forEach((reCodeState)=>{\n        if(reCodeState.value == stat){\n            result = reCodeState.label\n        }\n    })\n    return result\n}\n\nclass ReCodeGeneratorForm extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            partners: []\n        }\n    }\n    async componentDidMount() {\n        let partners = await this.props.getPartners(0, 999)\n        let prepared = partners.map(partner => {\n\n            return {value: partner.id, label: partner.fullName}\n        })\n        this.setState({\n            partners : prepared\n        })\n    }\n    render() {\n        return (\n            <YitForm\n                errorMsg={\"Lot created successfully\"}\n                handleSubmit={this.props.handleSubmit}>\n                <FormControl fullWidth>\n                    <InputLabel id=\"Partner-select-label\">Partner</InputLabel>\n                    <Select\n                        fullWidth\n                        name=\"partnerId\"\n                        labelId={\"Partner-select-label\"}\n                        label={\"Partner\"}\n                    >\n                        {this.state.partners.map(partner =>{\n                            return   <MenuItem value={partner.value}>{partner.label}</MenuItem>\n                        })\n                        }\n                    </Select>\n                </FormControl>\n                <br/><br/>\n                <TextField\n                    required\n                    fullWidth\n                    name={\"amount\"}\n                    label=\"Amount\"\n                    size=\"small\"\n                    type={\"number\"}\n                >\n                </TextField>\n                <br/><br/>\n                <TextField\n                    required\n                    fullWidth\n                    name={\"number\"}\n                    label=\"Number\"\n                    size=\"small\"\n                    type=\"number\"\n                >\n                </TextField>\n                <br/><br/>\n                <FormControl fullWidth>\n                    <InputLabel id=\"algorithm-select-label\">Algorithm</InputLabel>\n                    <Select\n                        fullWidth\n                        name=\"algorithm\"\n                        label={\"Algorithm\"}\n                    >\n                        <MenuItem value={10}>MD5 + JWT</MenuItem>\n                        <MenuItem value={20}>Bcrypt Only</MenuItem>\n                        <MenuItem value={30}>Bcrypt + JWT</MenuItem>\n                    </Select>\n                </FormControl>\n                <br/><br/>\n                <FormControl fullWidth>\n                    <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                    <Select\n                        required\n                        fullWidth\n                        name={\"stat\"}\n                        labelId=\"demo-simple-select-label\"\n                        label=\"Stat\"\n                    >\n                        {RechargeCodeStates.map(cs =>{\n                            return       <MenuItem value={cs.value}>{cs.label}</MenuItem>\n                        })}\n                    </Select>\n                </FormControl>\n            </YitForm>\n\n        )\n    }\n}\n\nconst RentDetailedPanel = ({MetaData}) =>{\n    return(\n        <MaterialTable\n            icons={tableIcons}\n            title={''}\n            components={{\n                Toolbar: props => (\n                    <div>\n\n                    </div>\n                ),\n                Container: props => <div\n                    style={{\n                        overflow: \"auto\",\n                        marginLeft: \"5%\",\n                        background: 'grey', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n            }}\n            columns={[\n                {title: '1', field: \"dataTitle\"},\n                {title: '2', field: \"dataValue\"},\n            ]}\n            data={MetaData}\n            options={{\n                pageSize: 5,\n                actionsColumnIndex: -1,\n                showTitle: false,\n            }}\n        />\n    )\n}\n\nclass Transactions extends YitComponent {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {title: 'Operation',   field: \"operation\", lookup: {0 : \"Rent\",  1 : \"Return\"}},\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n\n        this.submitButton = React.createRef()\n    }\n\n    async  doGenerate(data){\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            return false\n        }\n    }\n\n\n    async componentDidMount() {\n        //this.submitButton.current.changeState(false)\n        this.setTransactionsList(TransactionOperations.Station.rent.id).then()\n        this.currentPage.current.setState({\n            isLoading: false\n        })\n\n    }\n\n    async dataLoader(query, resolve) {\n        let rechargeCodes = await this.MODELS._Transaction.getAll(query.pageSize * query.page, query.pageSize);\n        console.log(rechargeCodes)\n        if (rechargeCodes !== false) {\n            resolve({\n                data: rechargeCodes,\n                page: query.page,\n                totalCount: 100\n            })\n        } else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not load Stations data\", \"error\")\n            resolve({\n                data: [],\n                page: query.page,\n                totalCount: 100\n            })\n        }\n    }\n\n    async loadRentTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(0, 0, 100)\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            await transactions.forEach((transaction, index, transactions)  =>{\n                let newEntry = {\n                    id: transaction.id,\n                    operation: transaction.operation,\n                    date: transaction.createdAt.substr(0, 10)\n                }\n                transaction.MetaData.forEach(entry => {\n                    newEntry[entry.dataTitle] = entry.dataValue\n                })\n                transactions[index]  = newEntry\n            })\n            this.setState({\n                columns: [\n                    {title: 'Id', field: \"id\"},\n                    {title: 'Operation', field: \"operation\", lookup: {0: \"Rent\", 1: \"Return\"}},\n                    {title: 'StationId', field: \"stationId\", render: rowData => <Link target={\"_blank\"} to={\"/DashBoard/StationsDetails/\"+rowData.stationId}>{rowData.stationId}</Link>},\n                    {title: 'Client Id', field: \"clientId\"},\n                    {title: 'Power Bank Id', field: \"powerBankId\"},\n                    {title: 'amount', field: \"amount\"},\n                    {title: 'Date', field: 'date'}\n                ]\n            })\n            return transactions\n        }else {\n            return []\n        }\n    }\n\n    async loadReturnTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(TransactionOperations.Station.return.id, 0, 100)\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            await transactions.forEach((transaction, index, transactions)  =>{\n                let newEntry = {\n                    id: transaction.id,\n                    operation: transaction.operation,\n                    date: transaction.createdAt.substr(0, 10)\n                }\n                transaction.MetaData.forEach(entry => {\n                    newEntry[entry.dataTitle] = entry.dataValue\n                })\n                transactions[index]  = newEntry\n            })\n            this.setState({\n\n                columns: [\n                    {title: 'Id', field: \"id\"},\n                    {title: 'Operation', field: \"operation\", lookup: {0: \"Rent\", 1: \"Return\"}},\n                    {title: 'StationId', field: \"stationId\", render: rowData => <Link target={\"_blank\"} to={\"/DashBoard/StationsDetails/\"+rowData.stationId}>{rowData.stationId}</Link>},\n                    {title: 'Client Id', field: \"clientId\"},\n                    {title: 'Power Bank Id', field: \"powerBankId\"},\n                    {title: 'Date', field: 'date'},\n                ]\n            })\n            return transactions\n        }else {\n            return []\n        }\n    }\n\n    async loadCartTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(11, 0, 100)\n        let transactions = getAllOp.result\n        await transactions.forEach((transaction, index, transactions)  =>{\n            let newEntry = {\n                id: transaction.id,\n                operation: transaction.operation,\n                date: transaction.createdAt.substr(0, 10)\n            }\n            transaction.MetaData.forEach(entry => {\n                newEntry[entry.dataTitle] = entry.dataValue\n            })\n            transactions[index]  = newEntry\n        })\n        this.setState({\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {\n                    title: 'Operation', field: \"operation\",\n                    lookup: {0: \"Rent\", 1: \"Return\", 11 : \"recharge\"}\n                },\n                {title: 'Client Id', field: \"clientId\"},\n                {title: 'Recharge code ID', field: \"rechargeCodeId\"},\n                {title: 'Date', field: \"date\"},\n            ]\n        })\n        return transactions\n\n    }\n\n    async setTransactionsList(type){\n        let transactionList\n        switch (type) {\n            case TransactionOperations.Station.rent.id:\n                transactionList = await this.loadRentTransactions()\n                break;\n            case TransactionOperations.Station.return.id:\n                transactionList = await this.loadReturnTransactions()\n                break;\n            case TransactionOperations.wallet.recharge.id:\n                transactionList = await this.loadCartTransactions()\n        }\n        if(typeof transactionList === \"object\"){\n            this.setState({\n                    data: transactionList\n                }\n            )\n        }else {\n            this.setState({ data: [] })\n        }\n    }\n\n    async tabClickHandler(e) {\n        this.setTransactionsList(e.target.id).then()\n    }\n\n    render() {\n        return (\n                <YitPage\n                    ref={this.currentPage}\n                    customClass={\"TransactionsPage\"} customId={\"TransactionsPage\"} title={\"Transactions\"}\n                    customContentClass={\"TransactionsPageContent\"}>\n                        <MaterialTable\n                            icons={tableIcons}\n                            title={''}\n                            components={{\n                                Toolbar: props => {\n                                    return  (\n                                        <div className={\"TableHeader\"}>\n                                            <div className={\"tableHeaderTabsContainer\"}>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={(e)=>{\n                                                        this.tabClickHandler(e)\n                                                    }}\n                                                    id={TransactionOperations.Station.rent.id}\n                                                >\n                                                    Rent Transactions\n                                                </span>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={(e)=>{\n                                                        this.tabClickHandler(e)\n                                                    }}\n                                                    id={TransactionOperations.Station.return.id}\n                                                >\n                                                    Return Transactions\n                                                </span>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={this.tabClickHandler.bind(this)}\n                                                    id={TransactionOperations.wallet.recharge.id}\n                                                >\n                                                    Card Transactions\n                                                </span>\n                                            </div>\n                                            <MTableToolbar {...props} />\n                                        </div>\n                                    )},\n\n                                Container: props => <div\n                                    style={{\n                                        overflow: \"auto\",\n                                        background: '#FFFFFF', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n                            }}\n                            columns={this.state.columns}\n                            data={this.state.data}\n                            //onRowClick={(event, rowData, togglePanel) => togglePanel()}\n                            options={{\n                                pageSize: 5,\n                                actionsColumnIndex: -1,\n                                showTitle: false,\n                                grouping: true,\n                                exportButton: true\n                            }}\n                            actions={[\n                                {\n                                    icon: () => <MuiIcons.PersonAdd />,\n                                    tooltip: 'Add User',\n                                    isFreeAction: true,\n                                    onClick: (event, rowData, props) => {\n                                        console.log(props)\n                                        const rows = [\n                                            [\"name1\", \"city1\", \"some other info\"],\n                                            [\"name2\", \"city2\", \"more info\"]\n                                        ];\n\n                                        let csvContent = \"data:text/csv;charset=utf-8,\";\n\n                                        rows.forEach(function(rowArray) {\n                                            let row = rowArray.join(\",\");\n                                            csvContent += row + \"\\r\\n\";\n                                        });\n\n                                        let encodedUri = encodeURI(csvContent);\n                                        window.open(encodedUri);\n                                    },\n                                    render: \"Hello\"\n                                },\n                                (rowData) => {\n                                    switch (rowData.stat ){\n                                        case 0:\n                                            return {\n                                                icon: () =><MuiIcons.Check style={{color: \"blue\"}}></MuiIcons.Check>,\n                                                onClick: (event, rowData) => this.changeStat(rowData, 1),\n                                                tooltip: \"validate\",\n                                            }\n                                            break\n                                        case 1:\n                                            return {\n                                                icon: () =><MuiIcons.Block style={{color: \"red\"}}></MuiIcons.Block>,\n                                                tooltip: \"Freeze User\",\n                                                onClick: (event, rowData) => this.changeStat(rowData, 2)\n                                            }\n                                        case 2:\n                                            return {\n                                                icon: () =><MuiIcons.Beenhere style={{color: \"green\"}}></MuiIcons.Beenhere>,\n                                                tooltip: \"Reactivate User\",\n                                                onClick: (event, rowData) => this.changeStat(rowData, 1)\n                                            }\n                                    }\n\n                                },\n\n\n                                (rowData) => {\n                                    return {\n                                        icon: () =><Link to={{\n                                            pathname: \"/Dashboard/PartnerDetails/\"+rowData.id,\n                                            search: '',\n                                            state: { data: this.state.rawData[rowData.rowIndex]}\n                                        }}><MuiIcons.Launch style={{color: \"black\"}}/></Link>,\n                                        tooltip: \"Details\",\n                                    }\n                                }\n                            ]}\n                        />\n                </YitPage>\n        )\n    }\n}\n\nexport default Transactions","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewAd.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {GoogleMap, LoadScript, Marker} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport LocationSearchModal from \"../../../Components/LocationSearchModal/LocationSearchModal\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport YitFilePicker from \"../../../Components/YitFilePicker/YitFilePicker\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\nclass NewAd extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n    generatePassword(){\n        let chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        let passwordLength = 8;\n        let password = \"\";\n        for (let i = 0; i <= passwordLength; i++) {\n            let randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber +1);\n        }\n        return password\n    }\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        alert(password)\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'NewPartnerForm'}>\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Audience\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Audience</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel >State</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Stat\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select initial state</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <YitFilePicker/>\n                        </Grid>\n\n                    </Grid>\n                </YitForm>\n            </div>\n        )\n    }\n}\n\nexport default NewAd","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Ads.css\"\nimport DeviceEmulator from 'react-device-emulator';\nimport 'react-device-emulator/lib/styles/style.css';\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport NewPartnerForm from \"../Partners/NewPartnerForm/NewPartnerForm\";\nimport {Input, MenuItem, Select, TextField} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {PhotoCamera} from \"@mui/icons-material\";\nimport NewAd from \"./NewAd/NewAd\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\n\nclass AdImage extends React.Component{\n    static id=0\n    constructor(props) {\n        super(props);\n        this.state= {\n            AdImageContainer : 'AdImageContainer'+AdImage.id,\n            preImageContainer : 'preImageContainer'+AdImage.id,\n            preImage : 'preImage'+AdImage.id\n        }\n        AdImage.id++\n    }\n\n    componentDidMount() {\n        let AdImageContainer = document.getElementById(this.state.AdImageContainer)\n        let preImageContainer = document.getElementById(this.state.preImageContainer)\n        AdImageContainer.addEventListener(\"mouseenter\", ()=>{\n            preImageContainer.style.display = \"block\"\n            ReactDOM.render(\n                <img className={\"preImage\"} id={this.state.preImage} src={this.props.image}/>,\n                preImageContainer\n            )\n\n\n        })\n        AdImageContainer.addEventListener(\"mouseleave\", ()=>{\n            ReactDOM.unmountComponentAtNode(preImageContainer)\n            preImageContainer.style.display = \"none\"\n        })\n    }\n    render() {\n        return(\n            <div className={\"AdImageContainer\"} id={this.state.AdImageContainer}>\n                <span className={\"prSpan\"}>Preview</span>\n                <div className={\"preImageContainer\"} id={this.state.preImageContainer}></div>\n            </div>\n        )\n    }\n\n\n}\n\nclass Ads extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'ID', field: \"id\", editable: 'never' },\n                {\n                    title: 'Image', field: \"image\",\n                    render: rowData => <AdImage image={rowData.image}/>,\n                    editComponent: props => {\n                        if(props.value !== undefined){\n                            return(\n                                <div>\n                                    <TextField\n                                        disabled fullWidth\n                                        defaultValue={props.value}>\n\n                                    </TextField>\n                                </div>\n                            )\n                        }\n                        else {\n                            return(\n                                <Select>\n                                    <MenuItem value={0}>Upload File</MenuItem>\n                                    <MenuItem value={1}>Enter Link</MenuItem>\n                                </Select>\n\n                            )\n                        }\n\n                    }\n                },\n                {\n                    title: 'Type',   field: \"type\",\n                    lookup: { 0: 'Show to all', 1: 'Vip Only', 2: \"Normal Only\" },\n                },\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Frozen\" },\n                },\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    async updateAd(newData){\n        try{\n            let updateOp = await this.MODELS._Ad.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Ad  Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    async loadAds() {\n        let updateResult = await this.MODELS._Ad.getAll()\n        this.setState({\n            failedLoading: false,\n            data: []\n        })\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadAds()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        } catch (error) {\n\n        }\n    }\n\n\n    render() {\n        return (\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Advertising\"}\n                reloadPrimaryInfo={async () => {\n                    await this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Advertising \",\n                        icon: <MuiIcons.Add />,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewAd/>)}\n                    }\n\n                ]}\n            >\n\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    onRowClick={(event, rowData) => {\n                        (event.target).ondblclick = () => {\n                            this.props.history.push(\"/Dashboard/PartnerDetails/\" + rowData.id, {  state: {data: this.state.rawData[rowData.rowIndex]}});\n\n                        }\n                    }}\n                    dataModel={this.MODELS._Ad}\n                    searchEntry={'fullName'}\n                    actions={[\n                        {\n                            icon: ()=><MuiIcons.Preview/>,\n                            tooltip: 'Preview',\n                            onClick: (event, rowData) => {\n                                this.currentPage.current.mountBackDrop(\n                                    <DeviceEmulator type=\"mobile\" withDeviceSwitch withRotator url=\"https://nestjs.com/\"></DeviceEmulator>\n                                )\n                            }\n                        },\n                    ]}\n\n                    editable={{\n                        onRowAdd: newData =>\n                            new Promise((resolve, reject) => {\n\n                            }),\n                        onRowUpdate: (newData, oldData) => this.updateAd(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            })\n                    }}\n\n\n                />\n            </YitPage>\n\n\n        )\n    }\n}\n\nexport default Ads","\nimport Home from \"./Pages/Home/Home\";\nimport Clients from \"./Pages/Clients/Clients\";\nimport Partners from \"./Pages/Partners/Partners\";\nimport Stations from \"./Pages/Stations/Stations\";\nimport PartnerDetails from \"./Pages/PartnerDetails/PartnerDetails\";\nimport Transactions from \"./Pages/Transactions/Transactions\";\nimport Ads from \"./Pages/Ads/Ads\";\nimport NewPartner from \"./Pages/Partners/NewPartner/NewPartner\";\n\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\nconst dashboardRoutes = [\n    {\n      path: \"/DashBoard/Dashboard\",\n      name: \"Dashboard\",\n      icon: MuiIcons.Dashboard,\n      component: Home,\n    },\n\n    {\n    path: \"/DashBoard/Stations\",\n    name: \"Stations\",\n    icon: MuiIcons.Apps,\n    component: Stations,\n     },\n\n    {\n        path: \"/DashBoard/Clients\",\n        name: \"Clients\",\n        rtlName: \"Sessions\",\n        icon: MuiIcons.PeopleAltSharp,\n        component: Clients,\n        layout: \"/admin\",\n    },\n    {\n        path: \"/DashBoard/Partners\",\n        name: \"Partners\",\n        icon: MuiIcons.PeopleOutlineRounded,\n        component: Partners,\n    },\n    {\n        path: \"/DashBoard/PartnerDetails/:id\",\n        parametrised: true,\n        component: PartnerDetails,\n        layout: \"/admin\",\n    },\n    {\n        path: \"/DashBoard/Transactions\",\n        name: \"Transactions\",\n        icon: MuiIcons.Receipt,\n        component: Transactions,\n    },\n    {\n        path: \"/DashBoard/Ads\",\n        name: \"Ads Manager\",\n        icon: MuiIcons.BurstModeSharp,\n        component: Ads,\n    },\n];\n\nexport default dashboardRoutes;\n","import React from \"react\";\nimport \"../Style/NavBar.css\"\nimport {Link, NavLink} from \"react-router-dom\";\n\nimport routes from \"../routes\";\nfunction createMenu (routes) {\n    return (\n        routes.map((prop, index) => {\n            if(prop.parametrised === undefined){\n                return (\n                    <NavLink className={\"navEntry\"} to={prop.path} key={index}>\n                        <div className={\"navIcon\"}>{<prop.icon style={{fontSize: \"xx-large\"}}/>}</div>\n                        <span className={\"navText\"}>{prop.name}</span>\n                    </NavLink>\n                );\n            }\n            return\n\n        })\n    )\n};\n\nclass NavBar extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n\n    componentDidMount() {\n\n    }\n    render(){\n        return(\n            <div className={\"NavBar\"}>\n                {createMenu(routes)}\n            </div>\n        )\n    }\n}\nexport default NavBar","import React from \"react\";\nimport {render} from \"react-dom\";\nimport \"../Style/Logo.css\"\nimport logoImage from \"../Imgs/logo.svg\"\n\nclass Logo extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <img className={\"Logo\"} src={logoImage}/>\n            </React.Fragment>\n\n        )\n    }\n}\n\n\nexport default Logo","import React from \"react\";\nimport \"../Style/LeftPane.css\"\nimport {Link} from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport Logo from \"./Logo\";\n\nimport {LOCALSTORAGE} from \"../Apis/GlobalConfig\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Button from \"@mui/material/Button\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\nclass LeftPane extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state ={\n            openDialog : false\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    logOut(){\n        LOCALSTORAGE.removeItem(\"adminMail\")\n        LOCALSTORAGE.removeItem(\"adminToken\")\n        window.location.assign(\"/Login\")\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <div className=\"LeftPane\">\n                    <Dialog\n                        open={this.state.openDialog}\n                        onClose={()=>{\n\n                        }}\n                    >\n\n                        <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">\n                                You are about to leave the application\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.logOut}>Log Out</Button>\n                            <Button onClick={() => {\n                                    this.setState({\n                                        openDialog : false\n                                    })\n                                }}>\n                                close\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n\n                    <div className=\"logoContainer\">\n                        <Logo/>\n                    </div>\n                    <div className=\"navBarContainer\">\n                        <NavBar/>\n                    </div>\n\n                    <span className={\"logOutButton\"} onClick={\n                        () => {\n                            this.setState({\n                                openDialog : true\n                            })\n                        } }>\n                        <MuiIcons.LogoutOutlined/>\n                        <p className={\"navText\"}>Log Out</p>\n                    </span>\n                </div>\n            </React.Fragment>\n\n        )\n    }\n}\nexport default LeftPane","import React from \"react\";\nimport \"../Style/RightPane.css\"\nimport {Redirect, Route} from \"react-router-dom\";\n\nimport { Switch } from \"react-router-dom\";\n\nimport routes from \"../routes\";\n\nfunction switchRoutes (routes) {\n    return (\n        <Switch>\n            {routes.map((route, key) => {\n                if((route.parametrised === undefined) || (route.parametrised) === false){\n                    return (<Route key={key} exact path={route.path}  component={route.component}></Route>)\n                }else {\n                    return(\n                        <Route key={key} exact path={route.path} render={(props) => {\n                            return (<route.component id={props.match.params.id}/>);\n                        }}>\n                        </Route>\n                    )\n                }\n            })}\n            <Redirect from={\"/\"} to={\"/DashBoard/Dashboard\"}></Redirect>\n        </Switch>\n    )\n};\n\nclass RightPane extends React.Component{\n    render(){\n        return(\n            <React.Fragment>\n                    <div className=\"RightPane\" id={\"RightPane\"}>\n                        {switchRoutes(routes)}\n                    </div>\n\n            </React.Fragment>\n        )\n    }\n}\nexport default RightPane","import {SERVER} from \"../Apis/GlobalConfig\";\nimport server from \"../config/globalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\n\n\nlet actor = \"Session/\"\nconst _Admin  = {\n\n    login: async (postData) => {\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(postData)\n            };\n            const response = await fetch(SERVER+\"Guest/adminLogin\", requestOptions);\n            const data = await response.json();\n            return data;\n        } catch (e){\n            return {finalResult: false, error: \"Could not connect to the server\"}\n        }\n    },\n\n    HeartBit: async () => {\n        try {\n            let result = await RequestHandler.GET(SERVER+\"HeartBit\")\n            return result\n        } catch (e){\n            return {finalResult : false, error: e}\n        }\n    }\n}\nexport default _Admin;","const server = 'http://localhost:3000/admin'\nlet myStorage = window.localStorage;\n\n\nexport  default server;","import {LOCALSTORAGE} from \"./GlobalConfig\";\n\nconst authOperations = {\n    isLoggedIn :  () => {\n        let adminMail =  LOCALSTORAGE.getItem(\"adminMail\")\n        return adminMail != null\n    },\n}\n\nexport {authOperations}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport \"./LoginPage.css\"\n\n\nimport {Link} from \"react-router-dom\";\nimport _Admin from \"../../Models/_Admin\";\nimport {LOCALSTORAGE} from \"../../Apis/GlobalConfig\";\nimport Alert from \"@mui/material/Alert\";\nimport {authOperations} from \"../../Apis/authOperations\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Typography from \"@mui/material/Typography\";\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                CBC ALTEC\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\nfunction validateLogin(mail, admin, token){\n    LOCALSTORAGE.setItem(\"adminMail\", mail)\n    LOCALSTORAGE.setItem(\"admin\", admin)\n    LOCALSTORAGE.setItem(\"adminToken\", token)\n    ReactDOM.render(\n        <Alert  severity=\"success\" onClose={() => {}}>Login success, redirecting...</Alert>,\n        document.getElementById(\"resultContainer\"))\n        setTimeout(function(){ window.location.assign(\"/DashBoard\") }, 1500);\n}\n\nexport default function LoginPage() {\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        // eslint-disable-next-line no-console\n        let mail = data.get(\"email\")\n        let password = data.get(\"password\")\n        let loginResult = await _Admin.login({mail , password})\n        if(loginResult !== undefined){\n            if(loginResult.finalResult === true){\n                validateLogin(mail, loginResult.admin, loginResult.token)\n            }else {\n                ReactDOM.render(\n                    <Alert  severity=\"error\" onClose={() => {}}>{loginResult.error}</Alert>,\n                    document.getElementById(\"resultContainer\"))\n            }\n        }else {\n            ReactDOM.render(\n                <Alert  severity=\"error\" onClose={() => {}}>Unknown error occurred</Alert>,\n                document.getElementById(\"resultContainer\"))\n        }\n\n    };\n    authOperations.isLoggedIn() ?   window.location.assign(\"/Dashboard/Dashboard\") : void(0)\n\n    return (\n            <section className={\"LoginPage\"}>\n                <div className=\"leftSide\" style={{\n                    backgroundImage: 'url(https://source.unsplash.com/random)',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                }}>\n                </div>\n                <div className=\"rightSide\">\n                    <div className=\"resultContainer\" id=\"resultContainer\">\n\n                    </div>\n\n                    <Box\n                        sx={{\n                            my: 8,\n                            mx: 4,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            backgroundColor: \"grey\"\n                        }}\n                    >\n                            Sign in\n                        <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                autoFocus\n                            />\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"current-password\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                                label=\"Remember me\"\n                            />\n                            <Button\n                                color={\"primary\"}\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                sx={{ mt: 3, mb: 2 }}\n                            >\n                                Sign In\n                            </Button>\n                            <Grid container>\n                                <Grid item xs>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        Forgot password?\n                                    </Link>\n                                </Grid>\n                                <Grid item>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        {\"Don't have an account? Sign Up\"}\n                                    </Link>\n                                </Grid>\n                            </Grid>\n\n                            <Copyright sx={{ mt: 5 }} />\n                        </Box>\n                    </Box>\n                </div>\n\n            </section>\n    );\n}","import {HeartBit, Internet} from '../Actions/Types';\n\nconst initialState = {\n    items: [],\n    item: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case HeartBit:\n            return {\n                ...state,\n                server: action.payLoad\n            };\n            break;\n        case Internet:\n            return {\n                ...state,\n                internet: action.payLoad\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport serverReducers from './serverReducers';\n\nexport default combineReducers({\n    AppStates: serverReducers\n});\n\n\nexport const serverStatToProps = state => ({\n    server: state.AppStates.server,\n    internet : state.AppStates.internet\n})","export const HeartBit = 'HeartBit';\nexport const Internet = 'internet';","import React from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport \"../../Style/yitClasses.css\"\nimport \"./Main.css\"\nimport LeftPane from \"../../Components/LeftPane\";\nimport RightPane from \"../../Components/RightPane\";\nimport LoginPage from \"../../Pages/LoginPage/LoginPage\";\nimport {serverStatToProps} from \"../../Apis/Redux/Reducers\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n\nclass Main extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state= {\n            server:true\n        }\n    }\n    async componentDidMount() {\n\n    }\n\n\n\n    drawStatus(internet, server){\n        if(internet){\n            if(server != false){\n\n            }else {\n                return(<Alert  variant={\"filled\"} severity=\"error\" style={{fontSize: \"1.1vw\", fontWeight: \"bold\"}}>Server connection lost</Alert>)\n            }\n        }else{\n            return(<Alert  variant={\"filled\"} severity=\"error\" style={{fontSize: \"1.1vw\", fontWeight: \"bold\"}}>Internet connection lost !!</Alert>)\n\n        }\n\n\n    }\n    render() {\n        if(false){\n            return (\n                <div></div>\n            )\n        }else {\n            return (\n                <div className={\"Main\"}>\n                    <div className=\"statusBar\" id={\"statusBar\"}>\n                        {this.drawStatus(this.props.internet, this.props.server)}\n                    </div>\n                    <div className=\"Content\">\n                        <BrowserRouter>\n                            <Switch>\n                                <Route path={\"/Login\"} component={LoginPage}></Route>\n                                <Route path={\"/DashBoard\"}>\n                                    <LeftPane/>\n                                    <RightPane/>\n                                </Route>\n                            </Switch>\n                        </BrowserRouter>\n                    </div>\n                </div>\n            );\n        }\n\n    }\n}\n\nexport default connect(serverStatToProps, {})(Main)\n","import React from 'react';\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\nimport \"./Style/yitClasses.css\"\nimport {connect, Provider} from 'react-redux'\nimport LeftPane from \"./Components/LeftPane\";\nimport RightPane from \"./Components/RightPane\";\nimport { Switch } from \"react-router-dom\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\nimport Main from \"./Layouts/MAIN/Main\";\nimport _Admin from \"./Models/_Admin\";\nimport {HeartBit} from \"./Apis/Redux/Actions/Types\";\nimport {Internet} from \"./Apis/Redux/Actions/Types\";\nimport {serverStatToProps} from \"./Apis/Redux/Reducers\";\nimport {LOCALSTORAGE} from \"./Apis/GlobalConfig\";\nimport {authOperations} from \"./Apis/authOperations\";\n\n\nconst checkServer = () => async dispatch => {\n    let heartBit = await _Admin.HeartBit()\n    if (heartBit.finalResult) {\n        dispatch({\n            type: HeartBit,\n            payLoad: true\n        })\n    } else {\n        dispatch({\n            type: HeartBit,\n            payLoad: false\n        })\n    }\n    let internet = navigator.onLine\n\n    dispatch({\n        type: Internet,\n        payLoad: internet\n    })\n\n}\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n\n        let adminMail = LOCALSTORAGE.getItem(\"adminMail\")\n        let adminToken = LOCALSTORAGE.getItem(\"adminToken\")\n        authOperations.isLoggedIn() ?   void(0) : window.location.assign(\"/Login\")\n    }\n    componentDidMount() {\n\n    }\n\n    async componentWillMount() {\n        let test = this.props.checkServer\n        setInterval(()=>{test()}, 1000)\n    }\n\n    render() {\n\n\n    return (\n        <React.Fragment>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={\"/\"} >\n                        <Main/>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </React.Fragment>\n    );\n    }\n}\n\nexport default connect(serverStatToProps,  {checkServer})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reduxStore = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default reduxStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reduxStore from \"./Apis/Redux/reduxStore\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\n\n\nReactDOM.render(\n\n      <React.StrictMode>\n          <Provider store={reduxStore}>\n              <BrowserRouter>\n                  <Switch>\n                      <Route path={\"/Login\"}>\n                          <LoginPage></LoginPage>\n                      </Route>\n                      <Route path={\"/DashBoard\"}>\n                          <App></App>\n                      </Route>\n                  </Switch>\n              </BrowserRouter>\n          </Provider>\n      </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}