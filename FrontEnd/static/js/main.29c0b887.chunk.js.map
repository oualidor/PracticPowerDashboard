{"version":3,"sources":["Structures/TransactionOperations.js","Structures/PartnerTypes.js","Structures/RechargeCodeStates.js","Structures/ClientStats.js","Structures/PartnerStates.js","Apis/GlobalConfig.js","Imgs/logo.svg","Components/StatBox/StatBox.js","Apis/RequestHandler.js","Models/_Model.js","Models/_Station.js","Models/_Clients.js","Models/_Partner.js","Models/_Setting.js","Models/_RechareCode.js","Models/_Transaction.js","Models/_Ad.js","Structures/YitComponent.js","Apis/Notifications.js","Components/DynamicSubmitButton/DynamicSubmitButton.js","Components/YitForm/YitForm.js","Components/YitFragment/YitFragment.js","Pages/Stations/NewStationForm/NewStationForm.js","Components/YitPage/YitPage.js","Components/TransactionsGraph/CharOptions.js","Components/TransactionsGraph/TransactionsGraph.js","Components/YitFullLocationPeeker/Autocomplete.js","Components/YitFullLocationPeeker/Marker.js","Components/YitFullLocationPeeker/YitFullLocationPicker.js","Pages/Home/Home.js","Components/tableIcons.js","Components/YitDataTable/YitDataTable.js","Pages/Clients/Clients.js","Components/LocationSearchModal/LocationSearchModal.js","Components/YitLocationPicker.js","Pages/Partners/NewPartnerForm/NewPartnerForm.js","Pages/Partners/Partners.js","Components/TabsWidget/TabsWidget.js","Components/YitView/YitView.js","Pages/Stations/StationDetails/StationDetails.js","Components/YitTcpForm/YitTcpForm.js","Pages/Stations/StationEditForm/StationEditForm.js","Pages/Stations/Stations.js","Pages/PartnerDetails/PartnerEditForm/PartnerEditForm.js","Pages/PartnerDetails/CodeGeneratorForm/CodeGeneratorForm.js","Pages/RechargeCodes/RechargeCodes.js","Pages/PartnerDetails/PartnerDetails.js","Pages/Transactions/Transactions.js","Components/YitFilePicker/YitFilePicker.js","Pages/Ads/NewAd/NewAd.jsx","Pages/Ads/Ads.js","routes.js","Components/NavBar.js","Components/Logo.js","Components/LeftPane.js","Components/RightPane.js","Models/_Admin.js","config/globalConfig.js","Apis/authOperations.js","Pages/LoginPage/LoginPage.js","Apis/Redux/Reducers/serverReducers.js","Apis/Redux/Reducers/index.js","Apis/Redux/Actions/Types.js","Layouts/MAIN/Main.js","App.js","serviceWorker.js","Apis/Redux/reduxStore.js","index.js"],"names":["module","exports","Station","rent","label","id","return","wallet","recharge","payment","value","ClientStats","LOCALSTORAGE","window","localStorage","SERVER","ACTOR","MAP_API_KEY","StatBox","props","style","backgroundColor","icon","state","a","Fragment","className","this","title","number","text","React","Component","RequestHandler","GET","URL","token","controller","AbortController","setTimeout","abort","requestOptions","method","headers","authorization","timeout","fetch","response","json","data","finalResult","error","POST","DATA","body","JSON","stringify","_Model","adminToken","MODEL","create","postData","MAIN_ENTRY","result","update","newData","offset","index","console","log","attribute","key","StationModel","stationId","parseInt","level","_Client","_Partner","_Setting","RechargeCode","partnerId","_Transaction","operation","limit","_Ad","YitComponent","currentPage","createRef","MODELS","_Station","getItem","_RechargeCode","failedLoading","flag","Notifications","container","Msg","severity","variant","duration","View","Alert","sx","mb","action","IconButton","aria-label","color","size","onClick","alert","ReactDOM","unmountComponentAtNode","document","getElementById","close","Close","fontSize","render","err","DynamicSubmitButton","isSubmitting","LoadingButton","fullWidth","loading","loadingPosition","startIcon","Button","type","DoneMsg","xmlns","viewBox","cx","cy","r","fill","d","YitForm","isSubmitted","done","newInfo","doneMsg","undefined","errMsg","submitButton","e","nam","target","name","val","lat","long","newLat","newLng","preventDefault","current","setState","handleSubmit","onSuccess","children","Children","map","child","isValidElement","displayName","childProps","onDragEnd","bind","cloneElement","onChange","changeHolder","recursiveCloneChildren","onSubmit","Grid","item","spacing","xs","defaultValue","ref","YitFragment","isLoading","notifications","Map","notId","set","delete","list","forEach","push","component","addEventListener","display","event","stopPropagation","topOperations","marginLeft","width","primaryInfoLoader","CircularProgress","unmount","drawNotifications","customClass","customId","NewStationForm","partnersList","statsList","stationTypes","formRef","getAll","getOp","partners","rows","prepared","partner","fullName","createOp","toString","fragment","loadPrimaryData","then","TextField","disabled","required","FormControl","InputLabel","Select","labelId","MenuItem","option","YitPage","pageId","backDropId","backDropContentId","notificationsContainerId","length","alignItems","cursor","selector","visibility","reloadPrimaryInfo","drawOperations","customContentClass","contentCustomId","CharOptions","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","offsetGridLines","LineChart","require","Line","TransactionsGraph","charData","labels","weekDays","datasets","fillColor","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","fragmentRef","loadTransactionsData","rentTransactions","returnTransactions","baseDate","Date","indexes","i","setDate","getDate","toLocaleDateString","weekday","getDay","getAllOp","acceptedDate","transaction","transactionDate","tempData","slice","entry","options","x","height","y","AutoComplete","styled","div","onPlaceChanged","addplace","place","autoComplete","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","mapApi","places","Autocomplete","addListener","bindTo","clearInstanceListeners","onFocus","placeholder","Wrapper","Marker","alt","defaultProps","YitFullLocationPicker","main","onMarkerInteraction","childKey","mouse","draggable","lng","onMarkerInteractionMouseUp","_generateAddress","_onChange","center","zoom","_onClick","apiHasLoaded","maps","mapApiLoaded","mapInstance","addPlace","geoCoder","address","setCurrentLocation","Geocoder","geocode","results","status","formatted_address","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","onChildMouseDown","onChildMouseUp","onChildMouseMove","onChildClick","bootstrapURLKeys","libraries","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","MuiIcons","Home","settings","statistics","graphHeight","graphWidth","checked","dataValue","pushNotification","temp","actors","actor","loader","count","getTotal","model","loadSettings","loadStatistics","offsetHeight","offsetWidth","onresize","setDimensions","Person","People","Apps","LocalAtm","List","ListItem","ListItemText","primary","ListItemIcon","Switch","edge","inputProps","QrCode2","QrCodeScanner","tableIcons","Add","forwardRef","AddBox","Check","Clear","Delete","DeleteOutline","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowDownward","ThirdStateCheck","Remove","ViewColumn","Retry","YitDataTable","page","totalCount","searchEntry","search","actionsColumnIndex","exportButton","paginationPosition","pageSizeOptions","URLSearchParams","tableRef","newOptions","query","pageSize","dataModel","searchBy","total","filters","accepted","filter","filterCol","filterValue","minHeight","fontFamily","icons","Promise","resolve","reject","loadData","localization","opacity","onQueryChange","Clients","handleClose","reason","rawData","columns","field","rowData","substr","editable","lookup","0","1","2","stat","Chip","fontWeight","selectedRowId","open","dataTable","clientsList","onRowUpdate","oldData","updateClientInfo","onRowDelete","deleteEntry","Geocode","setApiKey","enableDebug","YitLocationPicker","onMarkerDragEnd","latLng","markerPosition","mapPosition","mapContainerStyle","google","onClose","onInfoWindowClose","padding","margin","NewPartnerForm","markers","chars","password","randomNumber","Math","floor","random","substring","generatePassword","PartnerTypes","PartnerStates","Partners","clientStat","statToString","loadPartners","mountBackDrop","actions","changeStat","tooltip","Block","Beenhere","to","pathname","rowIndex","Launch","onRowClick","ondblclick","history","TabsWidget","tabsWidgetId","tabContentId","tabButtonId","currentIndex","selectedIndex","buttonsList","getElementsByClassName","textDecoration","tabsList","tab","clickHandler","changeSelected","generateTabs","setContent","YitView","active","myRef","anActiveContent","PowerBank","useState","setStat","powerBankId","powerLevel","drawContent","APNView","APN","MCCMNC","InputProps","readOnly","StationDetails","currentStation","Partner","currentStationInfo","currentTab","stationAPNs","loadStationInfo","loadPowerBanksInfo","loadAPN","clear","getOneByPublicId","getOneOP","getOneRealTime","queryAPNNs","powerBanksList","powerBank","rentPowerBank","station","systemId","setActive","drawPowerBanks","YitTcpForm","view","errorMsg","drawResult","StationEditForm","getOnById","setAddress","setVolume","handleSubmitStationData","currentPartner","price","handleSetAddress","handleSetVolume","VolumeDown","Slider","min","max","VolumeUp","Stations","setValid","valid","stationsList","customdId","detailPanel","PartnerEditForm","updateOp","reload","phone","mail","googleMapsApiKey","API_KEY","CodeGeneratorForm","currentForm","c","doGenerate","RechargeCodeStates","cs","RechargeCodes","reduce","reducer","reCodeState","getAllForPartner","t","currentRow","indexOf","toolbar","filtering","PartnerStations","components","Container","overflow","editRow","deleteText","PartnerDetails","loadCurrentPartner","getOneOp","QrCode2Outlined","Transactions","setTransactionsList","TransactionOperations","rechargeCodes","transactions","newEntry","MetaData","dataTitle","11","loadRentTransactions","transactionList","loadReturnTransactions","loadCartTransactions","Toolbar","tabClickHandler","background","showTitle","grouping","exportAllData","PersonAdd","isFreeAction","YitFilePicker","currentImage","Image","createObjectURL","files","imageTag","src","onImageSelect","hidden","NewAd","AdImage","AdImageContainer","preImageContainer","preImage","image","Ads","editComponent","loadAds","Preview","withDeviceSwitch","withRotator","url","onRowAdd","updateAd","dashboardRoutes","path","Dashboard","rtlName","PeopleAltSharp","layout","PeopleOutlineRounded","parametrised","Receipt","BurstModeSharp","NavBar","routes","prop","Logo","logoImage","LeftPane","openDialog","removeItem","assign","Dialog","DialogContent","DialogContentText","DialogActions","logOut","LogoutOutlined","RightPane","route","exact","match","params","from","_Admin","login","HeartBit","authOperations","Copyright","Typography","align","href","getFullYear","validateLogin","admin","setItem","LoginPage","FormData","currentTarget","get","loginResult","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Box","my","mx","flexDirection","noValidate","mt","autoFocus","FormControlLabel","control","Checkbox","initialState","items","combineReducers","AppStates","server","payLoad","internet","serverStatToProps","Main","drawStatus","connect","App","test","checkServer","setInterval","dispatch","onLine","Boolean","hostname","middleware","thunk","reduxStore","createStore","rootReducer","compose","applyMiddleware","StrictMode","store","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uHAaAA,EAAOC,QAbuB,CAC1BC,QAAU,CACNC,KAAO,CAAEC,MAAO,OAAQC,GAAI,KAC5BC,OAAS,CAAEF,MAAO,SAAUC,GAAI,MAEpCE,OAAQ,CACJC,SAAU,CAACJ,MAAO,WAAYC,GAAI,MAClCI,QAAS,CAACL,MAAO,UAAWC,GAAI,S,kBCOxCL,EAAOC,QAZc,CACjB,CACIG,MAAO,QACPC,GAAI,KAER,CACID,MAAO,OACPC,GAAI,O,kBCGZL,EAAOC,QAZoB,CACvB,CACIG,MAAO,MACPM,MAAO,KAEX,CACIN,MAAO,iBACPM,MAAO,O,kBCUfV,EAAOC,QAAU,CAACU,YAjBE,CAChB,CACIP,MAAO,MACPM,MAAO,KAGX,CACIN,MAAO,SACPM,MAAO,KAEX,CACIN,MAAO,SACPM,MAAO,Q,kBCEfV,EAAOC,QAZe,CAClB,CACIG,MAAO,SACPC,GAAI,KAER,CACID,MAAO,SACPC,GAAI,O,iBCTZ,IAGMO,EAAeC,OAAOC,aAI5Bd,EAAOC,QAAU,CAACc,OAPF,8BAOUC,MALZ,SAKmBJ,eAAcK,YAH3B,4C,0CCJpBjB,EAAOC,QAAU,IAA0B,kC,y5BCwC5BiB,G,gEAnCX,WAAYC,GAAO,IAAD,sBAEd,IAAIC,EAAQ,CACRC,iBAFJ,cAAMF,IAEqBA,MAAME,iBAE7BC,EAAO,EAAKH,MAAMG,KALR,OAMd,EAAKC,MAAQ,CACTH,MAAOA,EACPE,KAAMA,GARI,E,4FAYlB,sBAAAE,EAAA,0F,0EAKA,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,6BAASC,UAAW,WAChB,yBAAKA,UAAU,aAAaN,MAAOO,KAAKJ,MAAMH,OACzCO,KAAKR,MAAMG,MAEhB,yBAAKI,UAAU,eACX,0BAAMA,UAAW,SAAUC,KAAKR,MAAMS,OACtC,0BAAMF,UAAW,UAAWC,KAAKR,MAAMU,SAE3C,0BAAMH,UAAW,OAAQC,KAAKR,MAAMW,Y,GA9BlCC,IAAMC,Y,mCCqCbC,EAxCQ,CACbC,IADa,SACTC,EAAKC,GAAQ,OAAD,uHACZC,EAAa,IAAIC,gBACvBC,YAAW,kBAAMF,EAAWG,UAAS,GAC/BC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAC,eAAgB,mBAAoBC,cAAe,UAAYR,GACzEQ,cAAe,UAAYR,EAC3BS,QAAS,GAPK,kBAUSC,MAAMX,EAAKM,GAVpB,cAURM,EAVQ,gBAWKA,EAASC,OAXd,cAWRC,EAXQ,yBAYPA,GAZO,2DAcP,CAACC,aAAa,EAAOC,MAAM,EAAD,KAdnB,6DAmBfC,KApBY,SAoBPjB,EAAKkB,EAAMjB,GAAQ,OAAD,qHACpBK,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,mBAAoBC,cAAe,UAAYR,GACzEkB,KAAMC,KAAKC,UAAUH,IAJC,kBAOCP,MAAMX,EAAKM,GAPZ,cAOhBM,EAPgB,gBAQHA,EAASC,OARN,cAQhBC,EARgB,yBASfA,GATe,2DAWf,CAACC,aAAa,EAAOC,MAAM,EAAD,KAXX,8DCyEnBM,E,WAtFX,WAAYC,EAAYC,GAAQ,IAAD,gCAM/BC,OAN+B,uCAMtB,WAAMC,GAAN,iBAAArC,EAAA,6DACCW,EAAM,EAAK2B,WAAW,SADvB,SAEc7B,EAAemB,KAAKjB,EAAK0B,EAAU,EAAKH,YAFtD,cAEDK,EAFC,yBAGEA,GAHF,2CANsB,2DAa/BC,OAb+B,uCAatB,WAAM3D,EAAI4D,GAAV,iBAAAzC,EAAA,6DACCW,EAAM,EAAK2B,WAAW,UAAUzD,EADjC,SAEc4B,EAAemB,KAAKjB,EAAK8B,EAAS,EAAKP,YAFrD,cAEDK,EAFC,yBAGEA,GAHF,2CAbsB,wDAE3BpC,KAAK+B,WAAcA,EACnB/B,KAAKmC,WAAa/C,SAAOC,QAAM2C,E,iFAgBnC,WAAaO,EAAQC,GAArB,iBAAA3C,EAAA,sEAGcW,EAAMR,KAAKmC,WAAW,UAAUI,EAAO,IAAIC,EAHzD,SAI2BlC,EAAeC,IAAIC,EAAKR,KAAK+B,YAJxD,cAIYK,EAJZ,yBAKeA,GALf,uCAOQK,QAAQC,IAAR,MAPR,kBAQe,CAACnB,aAAa,IAR7B,yD,uHAYA,WAAgB7C,GAAhB,iBAAAmB,EAAA,sEAEcW,EAAMR,KAAKmC,WAAW,UAAUzD,EAF9C,SAG2B4B,EAAeC,IAAIC,EAAKR,KAAK+B,YAHxD,cAGYK,EAHZ,yBAIeA,GAJf,yDAOe,CAACb,aAAa,IAP7B,yD,oHAWA,WAAeoB,EAAWC,GAA1B,iBAAA/C,EAAA,sEAEcW,EAAMR,KAAKmC,WAAW,YAAYQ,EAAU,IAAIC,EAF9D,SAG2BtC,EAAeC,IAAIC,EAAKR,KAAK+B,YAHxD,cAGYK,EAHZ,yBAIeA,GAJf,yDAMe,CAACb,aAAa,IAN7B,yD,mHAUA,8BAAA1B,EAAA,sEAEcW,EAAMR,KAAKmC,WAAW,QAFpC,SAG2B7B,EAAeC,IAAIC,EAAKR,KAAK+B,YAHxD,cAGYK,EAHZ,yBAIeA,GAJf,yDAOe,CAACb,aAAa,IAP7B,yD,qHAWA,WAAiBoB,EAAW5D,GAA5B,iBAAAc,EAAA,sEAEcW,EAAMR,KAAKmC,WAAW,SAASQ,EAAU,IAAI5D,EAF3D,SAG2BuB,EAAeC,IAAIC,EAAKR,KAAK+B,YAHxD,cAGYK,EAHZ,yBAIeA,GAJf,yDAOe,CAACb,aAAa,IAP7B,yD,oHAWA,WAAa7C,GAAb,iBAAAmB,EAAA,sEAEcW,EAAMR,KAAKmC,WAAW,UAAUzD,EAF9C,SAG2B4B,EAAeC,IAAIC,EAAKR,KAAK+B,YAHxD,cAGYK,EAHZ,yBAIeA,GAJf,yDAOe,CAACb,aAAa,IAP7B,yD,8DC7EEY,EAAa/C,SAAOC,QADZ,WA6DCwD,E,kDAzDX,WAAYd,GAAa,IAAD,8BACpB,cAAMA,EALA,aAMDA,WAAcA,EAFC,E,2FAKxB,WAAuBrD,GAAvB,iBAAAmB,EAAA,6DACUW,EAAM2B,EAAW,oBAAoBzD,EAD/C,SAEuB4B,EAAeC,IAAIC,EAAKR,KAAK+B,YAFpD,cAEQK,EAFR,yBAGWA,GAHX,gD,0HAMA,WAAqB1D,GAArB,iBAAAmB,EAAA,6DACUW,EAAM2B,EAAW,mBAAmBzD,EAD9C,SAEuB4B,EAAeC,IAAIC,EAAKR,KAAK+B,YAFpD,YAEQK,EAFR,QAGcb,YAHd,yCAIea,EAAOd,MAJtB,iCAMe,GANf,gD,yHAUA,WAAoB5C,GAApB,iBAAAmB,EAAA,6DACQW,EAAO2B,EAAW,iBAAiBzD,EAD3C,SAEuB4B,EAAeC,IAAIC,EAAKR,KAAK+B,YAFpD,cAEQK,EAFR,yBAGWA,EAAOb,aAHlB,gD,sHAMA,WAAiBuB,EAAWN,GAA5B,iBAAA3C,EAAA,6DACI2C,EAAQO,SAASP,GAEbhC,EAAO2B,EAAW,cAAcW,EAAU,KAD9CN,EAAQ,IAAIA,GAFhB,SAIuBlC,EAAeC,IAAIC,EAAKR,KAAK+B,YAJpD,YAIQK,EAJR,QAKcb,YALd,0CAMgBa,EAAOd,MANvB,kCAQe,GARf,iD,wHAYA,WAAiBwB,EAAWxB,GAA5B,iBAAAzB,EAAA,6DACQW,EAAO2B,EAAW,cAAcW,EADxC,SAGuBxC,EAAemB,KAAKjB,EAAKc,EAAMtB,KAAK+B,YAH3D,cAGQK,EAHR,OAIIK,QAAQC,IAAIN,GAJhB,kBAKWA,GALX,gD,uHAQA,WAAgBU,EAAWE,GAA3B,iBAAAnD,EAAA,6DACImD,EAAQD,SAASC,GACbxC,EAAO2B,EAAW,aAAaW,EAAU,IAAIE,EAFrD,SAGuB1C,EAAeC,IAAIC,EAAKR,KAAK+B,YAHpD,cAGQK,EAHR,yBAIWA,GAJX,gD,8DAjDuBN,GCDrBK,EAAa/C,SAAOC,QADZ,UAqCC4D,E,kDAjCX,WAAYlB,GAAa,IAAD,8BACpB,cAAMA,EALA,YASVE,OALwB,uCAKf,WAAMC,GAAN,iBAAArC,EAAA,6DACCW,EAAM2B,EAAW,iBADlB,SAEc7B,EAAemB,KAAKjB,EAAK0B,GAFvC,YAEDE,EAFC,QAGKb,YAHL,yCAIMa,EAAOA,QAJb,gCAMMA,GANN,2CALe,sDAEpB,EAAKL,WAAcA,EAFC,E,oFAgBxB,WAAgBrD,GAAhB,qBAAAmB,EAAA,6DACUW,EAAM2B,EAAW,UAAUzD,EAC3BoC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAC,eAAgB,qBAJlC,SAM2BG,MAAMX,EAAKM,GANtC,cAMUM,EANV,gBAOuBA,EAASC,OAPhC,UAQ4B,IADlBC,EAPV,QAQaC,YARb,0CASeD,EAAKc,QATpB,iCAWe,MAXf,4C,4DAlBkBN,GCDhBK,EAAa/C,SAAOC,QADZ,WAiBC6D,E,kDAbX,WAAYnB,GAAa,IAAD,8BACpB,cAAMA,EALA,aASVM,OALwB,uCAKf,WAAM3D,EAAIwD,GAAV,iBAAArC,EAAA,6DACCW,EAAM2B,EAAW,UAAUzD,EAD5B,SAEc4B,EAAemB,KAAKjB,EAAK0B,EAAU,EAAKH,YAFtD,cAEDK,EAFC,yBAGEA,GAHF,2CALe,wDAEpB,EAAKL,WAAcA,EAFC,E,UAFLD,GCDjBK,EAAa/C,SAAOC,QADZ,WAiBC8D,E,kDAbX,WAAYpB,GAAa,IAAD,8BACpB,cAAMA,EALA,aASVM,OALwB,uCAKf,WAAM3D,EAAIwD,GAAV,iBAAArC,EAAA,6DACCW,EAAM2B,EAAW,UAAUzD,EAD5B,SAEc4B,EAAemB,KAAKjB,EAAK0B,EAAU,EAAKH,YAFtD,cAEDK,EAFC,yBAGEA,GAHF,2CALe,wDAEpB,EAAKL,WAAcA,EAFC,E,UAFLD,GCDjBK,EAAa/C,SAAOC,QADZ,gBAqCC+D,E,kDAjCX,WAAYrB,GAAa,IAAD,8BACpB,cAAMA,EALA,kBAMDA,WAAcA,EAFC,E,oFAKxB,WAAgBrD,GAAhB,qBAAAmB,EAAA,6DACUW,EAAM2B,EAAW,UAAUzD,EAC3BoC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAC,eAAgB,qBAJlC,SAM2BG,MAAMX,EAAKM,GANtC,cAMUM,EANV,gBAOuBA,EAASC,OAPhC,UAQ4B,IADlBC,EAPV,QAQaC,YARb,0CASeD,EAAKc,QATpB,iCAWe,MAXf,4C,4HAeA,WAAuBG,EAAQC,EAAOa,GAAtC,iBAAAxD,EAAA,sEAEcW,EAAMR,KAAKmC,WAAW,UAAUI,EAAO,IAAIC,EAAM,IAAIa,EAFnE,SAG2B/C,EAAeC,IAAIC,EAAKR,KAAK+B,YAHxD,cAGYK,EAHZ,yBAIeA,GAJf,uCAMQK,QAAQC,IAAR,MANR,kBAOe,CAACnB,aAAa,IAP7B,yD,gEAtBwBO,GCYbwB,E,kDAXX,WAAYvB,GAAa,uCACfA,EAJA,qB,iFAOV,WAAawB,EAAWhB,EAAQiB,GAAhC,iBAAA3D,EAAA,6DACUW,EAAMR,KAAKmC,WAAW,UAAUoB,EAAU,IAAIhB,EAAO,IAAIiB,EADnE,SAEuBlD,EAAeC,IAAIC,EAAKR,KAAK+B,YAFpD,cAEQK,EAFR,yBAGWA,GAHX,gD,gEALuBN,GCFrBK,EAAa/C,SAAOC,QADZ,OA2BCoE,E,kDAvBX,WAAY1B,GAAa,IAAD,8BACpB,cAAMA,EALA,SAMDA,WAAcA,EAFC,E,oFAMxB,WAAgBrD,GAAhB,qBAAAmB,EAAA,6DACUW,EAAM2B,EAAW,UAAUzD,EAC3BoC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAC,eAAgB,qBAJlC,SAM2BG,MAAMX,EAAKM,GANtC,cAMUM,EANV,gBAOuBA,EAASC,OAPhC,UAQ4B,IADlBC,EAPV,QAQaC,YARb,0CASeD,EAAKc,QATpB,iCAWe,MAXf,4C,4DARcN,GCkCH4B,E,kDAzBX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IACDmE,YAAcvD,IAAMwD,YAEzB,EAAKC,OAAS,CACVC,SAAU,IAAIA,EAAS7E,eAAa8E,QAAQ,eAC5Cd,QAAU,IAAIA,EAAQhE,eAAa8E,QAAQ,eAC3CZ,SAAU,IAAIA,EAASlE,eAAa8E,QAAQ,eAC5Cb,SAAU,IAAIA,EAASjE,eAAa8E,QAAQ,eAC5CC,cAAe,IAAIA,EAAc/E,eAAa8E,QAAQ,eACtDT,aAAe,IAAIA,EAAarE,eAAa8E,QAAQ,eACrDN,IAAM,IAAIA,EAAIxE,eAAa8E,QAAQ,gBAEvC,EAAKnE,MAAQ,CACTqE,eAAe,GAdJ,E,mDAkBnB,SAAgBC,Q,GAnBQ9D,IAAMC,W,qLCF3B,IAAM8D,GAAgB,SACPC,EAAWC,EAAKC,EAAUC,EAAUC,GAC/B,kBAARH,IACPA,EAAM,iCAEV,IAAMI,EAAO,SAAC,GAEV,OAFkB,gBAGd,oCACI,kBAACC,EAAA,EAAD,CACIhG,GAAI,QACJ4F,SAAUA,EACVK,GAAI,CAACC,GAAI,GACTC,OACI,kBAACC,EAAA,EAAD,CACIC,aAAW,QACXC,MAAM,UACNC,KAAK,QACLC,QAAS,YArBzC,SAAed,EAAWe,GACtBC,IAASC,uBAAuBC,SAASC,eAAenB,IAqBxBoB,CAAMpB,KAGV,kBAACqB,EAAA,EAAD,CAAOC,SAAS,cAIvBrB,KAMjB,IACIe,IAASO,OAAO,kBAAClB,EAAD,MAASa,SAASC,eAAenB,IAClC,MAAZI,GACC5D,YAAW,WACPwE,IAASC,uBAAuBC,SAASC,eAAenB,MACzDI,GAGT,MAAOoB,GACLnD,QAAQC,IAAI,mDACZD,QAAQC,IAAIkD,K,ICOTC,G,kDAxBX,WAAYrG,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAQ,CACTkG,cAAe,GAHL,E,4FAQlB,sBAAAjG,EAAA,0F,wFAIA,c,oBAKA,WACI,OACeG,KAAKJ,MAAMkG,aAnCtB,kBAACC,GAAA,EAAD,CACIC,WAAS,EACTC,SAAO,EACPC,gBAAgB,QAChBC,UAAW,kBAAC,IAAD,MACX5B,QAAQ,YALZ,cARA,kBAAC6B,EAAA,EAAD,CAAQJ,WAAS,EAACG,UAAW,kBAAC,IAAD,MAAc5B,QAAQ,YAAYS,MAAM,UAAUqB,KAAM,UAArF,c,GAuBsB3C,GCClC,IAAM4C,GAAU,WACZ,OAAQ,yBAAKvG,UAAU,qBACnB,yBAAKA,UAAU,YAAYwG,MAAM,6BAA6BC,QAAQ,aAClE,4BAAQzG,UAAU,oBAAoB0G,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,SAClE,0BAAM7G,UAAU,mBAAmB6G,KAAK,OAAOC,EAAE,oCAwI9CC,G,kDAlIX,WAAYtH,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTmH,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNC,QAAS,GACTC,aAAiCC,IAAvB,EAAK3H,MAAM0H,QAAwB,oBAAsB,mBACnEE,YAA+BD,IAAtB,EAAK3H,MAAM4H,OAAuB,EAAK5H,MAAM4H,OAAS,oBAEnE,EAAKC,aAAejH,IAAMwD,YAVX,E,gDAcnB,SAAa0D,GACT,IAAIC,EAAMD,EAAEE,OAAOC,KACfC,EAAMJ,EAAEE,OAAOzI,MACE,WAAlBuI,EAAEE,OAAOnB,OACRqB,EAAM3E,SAAS2E,IAEnB1H,KAAKJ,MAAMqH,QAAQM,GAAMG,I,uBAG7B,SAAUC,EAAKC,GACX,IAAIC,EAASF,EACTG,EAASF,EACb5H,KAAKJ,MAAMqH,QAAX,EAAyBY,EACzB7H,KAAKJ,MAAMqH,QAAX,EAAyBa,I,iEAG7B,WAAmBR,GAAnB,oBAAAzH,EAAA,6DACIyH,EAAES,iBACF/H,KAAKqH,aAAaW,QAAQC,SAAS,CAC/BnC,cAAc,IAElB9F,KAAKiI,SAAS,CACVnC,cAAc,IANtB,SASa9F,KAAKR,MAAM0I,aAAalI,KAAKJ,MAAMqH,SAThD,uBAS6D,IAT7D,sBAWQjH,KAAKiI,SAAS,CAAClB,aAAa,IAC5B5C,GAA+B,qBAAsBnE,KAAKJ,MAAMsH,QAAS,gBAC7CC,IAAzBnH,KAAKR,MAAM2I,WACVnI,KAAKR,MAAM2I,YAEfvH,YAAW,WACP,EAAKqH,SAAS,CACVlB,aAAa,EACbjB,cAAc,MAEnB,KArBX,wBAwBQ9F,KAAKiI,SAAS,CACVlB,aAAa,EACbjB,cAAc,IAElB3B,GAA+B,qBAAsBnE,KAAKJ,MAAMwH,OAAQ,SACxEpH,KAAKqH,aAAaW,QAAQC,SAAS,CAC/BnC,cAAc,IA9B1B,iD,2FAmCA,SAAuBsC,GAAW,IAAD,OAE7B,OAAOhI,IAAMiI,SAASC,IAAIF,GAAU,SAAAG,GAEhC,IAAInI,IAAMoI,eAAeD,GAAQ,OAAOA,EACxC,GAA8B,sBAA3BA,EAAMlC,KAAKoC,YAAoC,CAE9C,IAAIC,EAAa,CAACC,UAAW,EAAKA,UAAUC,KAAK,IACjD,OAAOxI,IAAMyI,aAAaN,EAAOG,GAEjC,IAAKA,EAAa,CAACI,SAAU,EAAKC,aAAaH,KAAK,IAEpD,OADAF,EAAWN,SAAW,EAAKY,uBAAuBT,EAAM/I,MAAM4I,UACvDhI,IAAMyI,aAAaN,EAAOG,Q,sEAQ7C,sBAAA7I,EAAA,0F,0EAIA,WACI,OAAIG,KAAKJ,MAAMmH,YAgCP,yBAAKhH,UAAW,UAAWrB,GAAI,WAC3B,kBAAC,GAAD,OA/BJ,yBAAKqB,UAAW,UAAWrB,GAAI,WAC3B,0BAAOuK,SAAUjJ,KAAKkI,aAAaU,KAAK5I,MAAOtB,GAAI,UAC9CsB,KAAKgJ,uBAAuBhJ,KAAKR,MAAM4I,UACxC,6BACA,6BACA,kBAACc,EAAA,EAAD,CAAM9E,WAAS,EAAC+E,MAAI,EAACC,QAAS,GAC1B,kBAACF,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IAEf,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACI9E,QAAS,WACTyB,WAAS,EACThB,MAAM,YACNtG,GAAG,6BACHD,MAAM,WACN6K,aAAc,UACdjD,KAAM,SAPV,UAYJ,kBAAC6C,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC,GAAD,CAAqBE,IAAKvJ,KAAKqH,uB,GAnHzC3D,G,wCCyFP8F,G,kDAzHX,WAAYhK,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAQ,CACT6J,eAAuCtC,IAA5B,EAAK3H,MAAL,WAA6C,EAAKA,MAAL,UACxDyE,eAAe,EACfyF,cAAe,IAAIC,KAEvB,EAAKC,MAAQ,EAPC,E,oDASlB,SAAiBvF,EAAKC,EAAUE,GAAU,IAAD,OACjC9F,EAAGsB,KAAK4J,MACZ5J,KAAKJ,MAAM8J,cAAcG,IACrBnL,EACA,kBAACgG,EAAA,EAAD,CACIhG,GAAIA,EACJ4F,SAAUA,EACVK,GAAI,CAACC,GAAI,GACTC,OACI,kBAACC,EAAA,EAAD,CACIC,aAAW,QACXC,MAAM,UACNC,KAAK,QACLC,QAAS,WACL,EAAKtF,MAAM8J,cAAcI,OAAOpL,GAChC,EAAKuJ,SAAS,CAACyB,cAAe,EAAK9J,MAAM8J,kBAG7C,kBAACjE,EAAA,EAAD,CAAOC,SAAS,cAIvBrB,IAGTrE,KAAK4J,QACL5J,KAAKiI,SAAS,CAACyB,cAAe1J,KAAKJ,MAAM8J,qBACzBvC,IAAb3C,GACC5D,YAAW,WACP,EAAKhB,MAAM8J,cAAcI,OAAOpL,GAChC,EAAKuJ,SAAS,CAACyB,cAAe,EAAK9J,MAAM8J,kBAC1ClF,K,sEAGX,sBAAA3E,EAAA,0F,qFAIA,SAAkByI,GACd,IAAIyB,EAAO,GAIX,OAHAzB,EAAI0B,SAAQ,SAACjL,EAAO6D,GAChBmH,EAAKE,KAAKlL,MAENgL,I,mCAEZ,SAAsBG,GAClB5E,SAASC,eAAe,YAAY4E,iBAAiB,SAAS,WAC1D7E,SAASC,eAAe,YAAY9F,MAAM2K,QAAU,UAExD9E,SAASC,eAAe,mBAAmB4E,iBAAiB,SAAS,SAACE,GAClEA,EAAMC,qBAEVhF,SAASC,eAAe,YAAY9F,MAAM2K,QAAU,OACpDhF,IAASO,OAAOuE,EAAW5E,SAASC,eAAe,sB,qBAGvD,SAAQ2E,GACJ5E,SAASC,eAAe,YAAY9F,MAAM2K,QAAU,S,4BAIxD,WACI,QAA+BjD,GAA5BnH,KAAKR,MAAM+K,cACV,OAAQvK,KAAKR,MAAM+K,cAAcjC,KAAI,SAAA/E,GACjC,OACI,yBAAK9D,MAAO,CAAC+K,WAAY,KAAMjH,Q,oBAO/C,WAAU,IAAD,OACL,OAAGvD,KAAKJ,MAAMqE,cAEN,yBAAKlE,UAAW,oBACZ,sEACA,6BACA,kBAAC,IAAD,CACIN,MAAO,CAACgL,MAAO,QACflG,QAAS,YAAc4B,UAAW,kBAAC,IAAD,MAClCjB,QAAS,kBAAI,EAAK1F,MAAMkL,oBAH5B,UAUL1K,KAAKJ,MAAM6J,UACF,yBAAK1J,UAAW,eAAe,kBAAC4K,EAAA,EAAD,OAInC,yBAAK5K,UAAW,eACZ,yBAAKA,UAAW,WAAYrB,GAAI,YAC5B,yBAAKqB,UAAU,QAAQmF,QAASlF,KAAK4K,SAAS,kBAAC,KAAD,CAAYlF,SAAS,QAAQjG,MAAO,CAACuF,MAAO,UAC1F,yBAAKjF,UAAU,UAAUrB,GAAI,qBAEjC,yBAAKqB,UAAU,qBAAqBrB,GAAI,sBACnCsB,KAAK6K,kBAAkB7K,KAAKJ,MAAM8J,gBAEvC,6BAAS3J,UAAS,sBAAiBC,KAAKR,MAAMsL,aAAepM,GAAIsB,KAAKR,MAAMuL,UACnE/K,KAAKR,MAAM4I,e,GAhHlB1E,G,UCuIXsH,G,kDApIX,WAAYxL,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTmH,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNiE,aAAc,GACdC,UAAW,CACP,CAACzM,MAAO,SAAUC,GAAI,GACtB,CAACD,MAAO,SAAUC,GAAI,KAK9B,EAAKyM,aAAe,CAChB,CACI1M,MAAO,SACPM,MAAU,GAEd,CACIN,MAAO,WACPM,MAAU,IAGrB,EAAKqM,QAAUhL,IAAMwD,YAxBH,E,4FA2BnB,gCAAA/D,EAAA,sEACsBG,KAAK6D,OAAOX,SAASmI,OAAO,EAAG,KADrD,QAE6B,KADrBC,EADR,QAEa/J,cACDgK,EAAWD,EAAMlJ,OAAOoJ,KACxBC,EAAWF,EAASjD,KAAI,SAAAoD,GACxB,MAAM,CAAC3M,MAAO2M,EAAQhN,GAAID,MAAOiN,EAAQC,aAE7C3L,KAAKiI,SAAS,CACVgD,aAAcQ,KAR1B,gD,uHAeA,WAAmBnJ,GAAnB,iBAAAzC,EAAA,sEACyBG,KAAK6D,OAAOC,SAAS7B,OAAOK,GADrD,YACQsJ,EADR,QAEgBrK,YAFhB,0CAGe,GAHf,cAKYC,EAAQoK,EAASpK,MAAMqK,WAC3B7L,KAAKoL,QAAQpD,QAAQC,SAAS,CAC1Bb,OAAQ5F,IAPpB,mBASc,GATd,iD,2EAaA,WAAU,IAAD,OACR,OACO,kBAAC,GAAD,CACI+H,IAAKvJ,KAAK8L,SACVhB,YAAa,iBACbC,SAAU,iBACV9K,MAAO,kBACPwJ,WAAW,EACXiB,kBAAmB,WAAK,EAAKqB,kBAAkBC,SAEnD,kBAAC,GAAD,CACIzC,IAAKvJ,KAAKoL,QACVlD,aAAclI,KAAKkI,aAAaU,KAAK5I,OAErC,kBAACkJ,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IAAI,oDACnB,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIC,UAAQ,EAAClG,WAAS,EAACmG,UAAQ,EAC3B5H,QAAS,WACT7F,GAAG,oBAAoBD,MAAM,WAAW6K,aAAc,eAI9D,kBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC1E,KAAM,KACzBlD,QAAS,WACT7F,GAAG,oBAAoBD,MAAM,YAAY6K,aAAc,MAG/D,kBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,CAAY3N,GAAG,4BAAf,WACA,kBAAC4N,EAAA,EAAD,CACIC,QAAQ,2BACR7N,GAAG,iBACHD,MAAM,UACNgJ,KAAM,iBACN6B,cAAe,GAGf,kBAACkD,EAAA,EAAD,CAAUzN,OAAQ,EAAG6D,KAAM,IAA3B,kBACC5C,KAAKJ,MAAMqL,aAAa3C,KAAI,SAACmE,GAAD,OACzB,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO1N,MAAO6D,IAAK6J,EAAO1N,OAA3C,IAAoD0N,EAAOhO,aAM3E,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,CAAY3N,GAAG,4BAAf,QACA,kBAAC4N,EAAA,EAAD,CACIC,QAAQ,2BACR7N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,OACN6K,cAAe,GAEf,kBAACkD,EAAA,EAAD,CAAUzN,OAAQ,EAAG6D,KAAM,KAA3B,eACC5C,KAAKJ,MAAMsL,UAAU5C,KAAI,SAACmE,GAAD,OACtB,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,GAAIkE,IAAK6J,EAAO1N,OAAxC,IAAiD0N,EAAOhO,oB,GAtH/DiF,GCAvBgJ,G,kDAEF,WAAYlN,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAQ,CACT6J,WAAW,EACXxF,eAAe,EACfyF,cAAe,IAAIC,KAGvB,EAAKgD,OAAS,SAASD,EAAQhO,GAC/B,EAAKkO,WAAc,kBAAkBF,EAAQhO,GAC7C,EAAKmO,kBAAoB,yBAAyBH,EAAQhO,GAC1D,EAAKoO,yBAA2B,yBAAyBJ,EAAQhO,GACjE,EAAKkL,MAAQ,EACb8C,EAAQhO,KAbM,E,wDAgBlB,c,8BAIA,SAAiB2F,EAAKC,EAAUE,GAAU,IAAD,OACjC9F,EAAGsB,KAAK4J,MACZ5J,KAAKJ,MAAM8J,cAAcG,IACrBnL,EACA,kBAACgG,EAAA,EAAD,CACIhG,GAAIA,EACJ4F,SAAUA,EACVK,GAAI,CAACC,GAAI,GACTC,OACI,kBAACC,EAAA,EAAD,CACIC,aAAW,QACXC,MAAM,UACNC,KAAK,QACLC,QAAS,WACL,EAAKtF,MAAM8J,cAAcI,OAAOpL,GAChC,EAAKuJ,SAAS,CAACyB,cAAe,EAAK9J,MAAM8J,kBAG7C,kBAACjE,EAAA,EAAD,CAAOC,SAAS,cAIvBrB,IAGTrE,KAAK4J,QACL5J,KAAKiI,SAAS,CAACyB,cAAe1J,KAAKJ,MAAM8J,qBACzBvC,IAAb3C,GACC5D,YAAW,WACP,EAAKhB,MAAM8J,cAAcI,OAAOpL,GAChC,EAAKuJ,SAAS,CAACyB,cAAe,EAAK9J,MAAM8J,kBAC1ClF,K,sEAIX,sBAAA3E,EAAA,0F,iFAIA,SAAcqK,GAAW,IAAD,OACpB5E,SAASC,eAAevF,KAAK4M,YAAYzC,iBAAiB,SAAS,WAC/D/E,IAASC,uBAAuBC,SAASC,eAAe,EAAKsH,oBAC7DvH,SAASC,eAAe,EAAKqH,YAAYnN,MAAM2K,QAAU,UAE7D9E,SAASC,eAAevF,KAAK6M,mBAAmB1C,iBAAiB,SAAS,SAACE,GACvEA,EAAMC,qBAEVhF,SAASC,eAAevF,KAAK4M,YAAYnN,MAAM2K,QAAU,OACzDhF,IAASO,OAAOuE,EAAW5E,SAASC,eAAevF,KAAK6M,sB,qBAG5D,SAAQ3C,GACJ5E,SAASC,eAAevF,KAAK4M,YAAYnN,MAAM2K,QAAU,S,4BAI7D,WACI,QAAgCjD,IAA7BnH,KAAKR,MAAM+K,eAA+BvK,KAAKR,MAAM+K,cAAcwC,OAAS,EAC3E,OACI,oCACI,yBAAKhN,UAAU,mBAAmBrB,GAAI,oBACjCsB,KAAKR,MAAM+K,cAAcjC,KAAI,SAAC/E,EAAWf,GACtC,OACI,yBACII,IAAKJ,EACLzC,UAAW,iBACXN,MAAO,CAAC+K,WAAY,GAAIJ,QAAS,OAAQ4C,WAAW,UACpD9H,QAAS3B,EAAU2B,SAElB3B,EAAU5D,KANf,IAMsB4D,EAAUpD,UAI5C,kBAAC,IAAD,CACIuF,SAAU,QAASjG,MAAO,CAACwN,OAAQ,WACnC/H,QAAS,WACL,IAAIgI,EAAW5H,SAASC,eAAe,oBACL,WAA9B2H,EAASzN,MAAM0N,WACfD,EAASzN,MAAM0N,WAAa,UAE5BD,EAASzN,MAAM0N,WAAa,e,+BAQxD,SAAkB7E,GACd,IAAIyB,EAAO,GAIX,OAHAzB,EAAI0B,SAAQ,SAACjL,EAAO6D,GAChBmH,EAAKE,KAAKlL,MAENgL,I,oBAIZ,WAAU,IAAD,OACL,OAAG/J,KAAKJ,MAAMqE,cAEN,yBAAKlE,UAAW,oBACZ,kEACA,6BACA,kBAACqG,EAAA,EAAD,CACI3G,MAAO,CAACgL,MAAO,QACfzF,MAAO,UACPT,QAAS,YAAc4B,UAAW,kBAAC,IAAD,MAClCjB,QAAS,WACL,IACI,EAAK1F,MAAM4N,oBAEf,MAAO5L,OARf,UAkBLxB,KAAKJ,MAAM6J,UACF,yBAAK1J,UAAW,eAAe,kBAAC4K,EAAA,EAAD,OAInC,6BAAS5K,UAAW,UAAWrB,GAAIsB,KAAK2M,QACpC,yBAAK5M,UAAW,kBAAmBrB,GAAIsB,KAAK4M,YACxC,yBAAK7M,UAAU,yBAAyBrB,GAAIsB,KAAK6M,qBAErD,yBAAK9M,UAAU,gCAAgCrB,GAAIsB,KAAK8M,0BACnD9M,KAAK6K,kBAAkB7K,KAAKJ,MAAM8J,gBAEvC,yBAAK3J,UAAS,0BAAqBC,KAAKR,MAAMsL,aAAepM,GAAIsB,KAAKR,MAAMuL,UACxE,yBAAKhL,UAAU,cAAeC,KAAKR,MAAMS,OACzC,yBAAKF,UAAU,mBACVC,KAAKqN,kBAEV,yBAAKtN,UAAS,uBAAkBC,KAAKR,MAAM8N,oBAAsB5O,GAAIsB,KAAKR,MAAM+N,iBAC3EvN,KAAKR,MAAM4I,gB,GAjKtB1E,GAAhBgJ,GACKhO,GAAG,EA2KCgO,I,MAAAA,M,kDCtICc,GAnDI,CAGhBC,oBAAqB,EAGrBC,mBAAqB,kBAGrBC,mBAAqB,EAGrBC,0BAA0B,EAG1BC,wBAAwB,EAGxBC,aAAc,EAGdC,mBAAqB,GAGrBC,UAAW,EAGXC,eAAiB,EAGjBC,oBAAsB,EAGtBC,wBAA0B,GAG1BC,eAAgB,EAGhBC,mBAAqB,EAGrBC,aAAc,EAMdC,iBAAkB,GC5ClBC,GAAYC,EAAQ,KAAiBC,KAwH1BC,G,kDApHX,WAAYnP,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTqE,eAAgB,EAChB2K,SAAY,CACRC,OAAQ,EAAKC,WAAWA,SACxBC,SAAU,CACN,CACItQ,MAAO,oBACPuQ,UAAW,wBACXC,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,sBACtB/N,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAElC,CACI7C,MAAO,qBACPuQ,UAAW,wBACXC,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,sBACtB/N,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,QAK9C,EAAKgO,YAAclP,IAAMwD,YA9BV,E,4FAkCnB,8BAAA/D,EAAA,sEACiCG,KAAKuP,qBAAqB,EAAG,EAAG,KADjE,cACQC,EADR,gBAEmCxP,KAAKuP,qBAAqB,EAAG,EAAG,KAFnE,OAEQE,EAFR,OAIIzP,KAAKJ,MAAMgP,SAAX,SAAgC,GAAhC,KAA6CY,EAC7CxP,KAAKJ,MAAMgP,SAAX,SAAgC,GAAhC,KAA6Ca,EAC7CzP,KAAKiI,SAAS,CACV2G,SAAU5O,KAAKJ,MAAMgP,WAGzB5O,KAAKsP,YAAYtH,QAAQC,SAAS,CAC9BwB,WAAY,EACZxF,cAAgBjE,KAAKJ,MAAMqE,gBAZnC,iD,4EAgBA,WAII,IAHA,IAAIyL,EAAW,IAAIC,KACfb,EAAW,GACXc,EAAU,GACNC,EAAI,EAAGA,EAAI,EAAGA,IAElBH,EAASI,QAAQJ,EAASK,UAAY,GACtCjB,EAAS7E,KACLyF,EAASM,mBAAmB,KAAM,CAAEC,QAAS,UAEjDL,EAAQ3F,KAAKyF,EAASQ,UAG1B,MAAO,CAACpB,WAAUc,a,yBAGtB,c,yEAKA,WAA2BrM,EAAWhB,EAAQiB,GAA9C,qBAAA3D,EAAA,sEACyBG,KAAK6D,OAAOP,aAAa+H,OAAO9H,EAAWhB,EAAQiB,GAD5E,cACQ2M,EADR,QAEQC,EAAe,IAAIT,MACVG,QAAQM,EAAaF,SAAS,GACvC5O,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3B6O,EAAS5O,cACW4O,EAAS/N,OACf4H,SAAQ,SAAAqG,GACjB,IAAIC,EAAkB,IAAIX,KAAKU,EAAW,WACvCC,EAAkBF,IACjB9O,EAAKgP,EAAgBJ,UAAY5O,EAAKgP,EAAgBJ,UAAY,MAGtEK,EAAWjP,EAAKkP,QACpBxQ,KAAK8O,WAAWc,QAAQ5F,SAAQ,SAACyG,EAAOjO,GACpClB,EAAKmP,EAAM,GAAKF,EAAS/N,MAE7B+N,EAAW,MAGfvQ,KAAKiI,SAAS,CACVhE,eAAgBkM,EAAS5O,cArBjC,kBAuBWD,GAvBX,gD,+EA0BA,WACI,OACI,oCACI,kBAAC,GAAD,CACIiI,IAAKvJ,KAAKsP,aAEV,kBAACd,GAAD,CACIlN,KAAMtB,KAAKJ,MAAMgP,SACjB8B,QAASlD,GACT/C,MAAOzK,KAAKR,MAAMmR,EAClBC,OAAQ5Q,KAAKR,MAAMqR,U,GA5GXnN,G,gDCkEjBoN,IArECC,KAAOC,IAAV,kK,kDAUT,WAAYxR,GAAQ,IAAD,8BACf,cAAMA,IAsBVyR,eAAiB,WAAqC,IAAD,yDAAf,EAAKzR,MAAvB8I,EAAiC,EAAjCA,IAAK4I,EAA4B,EAA5BA,SACfC,EAAQ,EAAKC,aAAaC,WAE3BF,EAAMG,WACPH,EAAMG,SAASC,SACfjJ,EAAIkJ,UAAUL,EAAMG,SAASC,WAE7BjJ,EAAImJ,UAAUN,EAAMG,SAASI,UAC7BpJ,EAAIqJ,QAAQ,KAGhBT,EAASC,GACT,EAAKS,YAAYC,SAjCjB,EAAKC,eAAiB,EAAKA,eAAelJ,KAApB,iBAFP,E,qDAKnB,WAAiD,IAAD,yDAAZ5I,KAAKR,MAArB8I,EAA4B,EAA5BA,IAAKyJ,EAAuB,EAAvBA,OACfrB,EAAU,GAKhB1Q,KAAKoR,aAAe,IAAIW,EAAOC,OAAOC,aAClCjS,KAAK4R,YACLlB,GAEJ1Q,KAAKoR,aAAac,YAAY,gBAAiBlS,KAAKiR,gBACpDjR,KAAKoR,aAAae,OAAO,SAAU7J,K,kCAGvC,WAA+C,IAAD,yDAAZtI,KAAKR,MAAhBuS,EAAuB,EAAvBA,OACnBA,EAAO1H,MAAM+H,uBAAuBpS,KAAK4R,e,4BAkB7C,WACI5R,KAAK4R,YAAY7S,MAAQ,K,oBAG7B,WAAU,IAAD,OACL,OACI,yBAAKgB,UAAW,iCACZ,2BACIA,UAAU,eACVwJ,IAAK,SAACA,GACF,EAAKqI,YAAcrI,GAEvBlD,KAAK,OACLgM,QAASrS,KAAK8R,eACdQ,YAAY,0B,GArDLjS,cCRrBkS,GAAUxB,KAAOC,IAAV,seAgBPwB,GAAS,SAAC,GAAD,IAAGrS,EAAH,EAAGA,KAAM+E,EAAT,EAASA,QAAT,OACX,kBAAC,GAAD,CACIuN,IAAKtS,EACL+E,QAASA,KAIjBsN,GAAOE,aAAe,CAClBxN,QAAS,MAQEsN,I,GAAAA,MCyIAG,IAnKC5B,KAAO6B,KAAV,gE,kDAOT,WAAYpT,GAAQ,IAAD,8BACf,cAAMA,IAuBVqT,oBAAsB,SAACC,EAAUpK,EAAYqK,GACzC,EAAK9K,SAAS,CACV+K,WAAW,EACXrL,IAAKoL,EAAMpL,IACXsL,IAAKF,EAAME,OA5BA,EA+BnBC,2BAA6B,SAACJ,EAAUpK,EAAYqK,GAChD,EAAK9K,SAAS,CAAE+K,WAAW,IAC3B,EAAKG,oBAjCU,EAoCnBC,UAAY,YAAuB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACnB,EAAKrL,SAAS,CACVoL,OAAQA,EACRC,KAAMA,KAvCK,EA4CnBC,SAAW,SAACxU,GACR,EAAKkJ,SAAS,CACVN,IAAK5I,EAAM4I,IACXsL,IAAKlU,EAAMkU,OA/CA,EAmDnBO,aAAe,SAAClL,EAAKmL,GACjB,EAAKxL,SAAS,CACVyL,cAAc,EACdC,YAAarL,EACbyJ,OAAQ0B,IAGZ,EAAKN,oBA1DU,EA6DnBS,SAAW,SAACzC,GAER,EAAKlJ,SAAS,CACV+J,OAAQ,CAACb,GACTxJ,IAAKwJ,EAAMG,SAASI,SAAS/J,MAC7BsL,IAAK9B,EAAMG,SAASI,SAASuB,QAEjC,EAAKE,oBAlELR,EAAsBlK,YAAc,oBACpC,EAAK7I,MAAQ,CACT8T,cAAc,EACdC,YAAa,KACb5B,OAAQ,KACR8B,SAAU,KACV7B,OAAQ,GACRqB,OAAQ,GACRC,KAAM,EACNQ,QAAS,GACTd,WAAW,EACXrL,IAAK,KACLsL,IAAK,MAdM,E,sDAmBnB,WACIjT,KAAK+T,uB,8BAmDT,WAAoB,IAAD,QAME,IAFb/T,KAAKJ,MADLmS,OAGwBiC,UAEnBC,QAAQ,CAAE,SAAY,CAAEtM,IAAK3H,KAAKJ,MAAM+H,IAAKsL,IAAKjT,KAAKJ,MAAMqT,OAAS,SAACiB,EAASC,GACrF1R,QAAQC,IAAIwR,GACZzR,QAAQC,IAAIyR,GACG,OAAXA,EACID,EAAQ,IACR,EAAKZ,KAAO,GACZ,EAAKrL,SAAS,CAAE6L,QAASI,EAAQ,GAAGE,qBAEpClV,OAAOiG,MAAM,oBAGjBjG,OAAOiG,MAAM,2BAA6BgP,WAItBhN,IAAzBnH,KAAKR,MAAMmJ,WAA0D,mBAAxB3I,KAAKR,MAAMmJ,WACvD3I,KAAKR,MAAMmJ,UAAU3I,KAAKJ,MAAM+H,IAAK3H,KAAKJ,MAAMqT,O,gCAKxD,WAAsB,IAAD,OACb,gBAAiBoB,WACjBA,UAAUC,YAAYC,oBAAmB,SAACC,GACtC,EAAKvM,SAAS,CACVoL,OAAQ,CAACmB,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WACnDhN,IAAK6M,EAASC,OAAOC,SACrBzB,IAAKuB,EAASC,OAAOE,iB,oBAMrC,WAAU,IAAD,OACL,EAEI3U,KAAKJ,MADG8T,GADZ,EACI1B,OADJ,EACY0B,cAAcC,EAD1B,EAC0BA,YAAa5B,EADvC,EACuCA,OAIvC,OACI,yBAAKhS,UAAW,qBACX2T,GACG,6BACI,kBAAC,GAAD,CAAcpL,IAAKqL,EAAa5B,OAAQA,EAAQb,SAAUlR,KAAK4T,YAGvE,kBAAC,KAAD,CACIP,OAAQrT,KAAKJ,MAAMyT,OACnBC,KAAMtT,KAAKJ,MAAM0T,KACjBN,UAAWhT,KAAKJ,MAAMoT,UACtBlK,SAAU9I,KAAKoT,UACfwB,iBAAkB5U,KAAK6S,oBACvBgC,eAAgB7U,KAAKkT,2BACrB4B,iBAAkB9U,KAAK6S,oBACvBkC,aAAc,kBAAMtS,QAAQC,IAAI,gBAChCwC,QAASlF,KAAKuT,SACdyB,iBAAkB,CACdpS,IAAKtD,cACL2V,UAAW,CAAC,SAAU,aAE1BC,oCAAkC,EAClCC,kBAAmB,gBAAG7M,EAAH,EAAGA,IAAKmL,EAAR,EAAQA,KAAR,OAAmB,EAAKD,aAAalL,EAAKmL,KAG7D,kBAAC,GAAD,CACItT,KAAMH,KAAKJ,MAAMkU,QACjBnM,IAAK3H,KAAKJ,MAAM+H,IAChBsL,IAAKjT,KAAKJ,MAAMqT,Y,GApJJ5S,cCA9B+U,GAAW3G,EAAQ,IA8PV4G,G,kDAzPX,WAAY7V,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTqE,eAAe,EACfwF,WAAW,EACX6L,SAAU,GACVC,WAAY,GACZC,YAAa,EACbC,WAAY,GAEhB,EAAK9R,YAAcvD,IAAMwD,YAVV,E,uFAYnB,WAAmB0D,GAAnB,iBAAAzH,EAAA,6DACQ0H,EAAMD,EAAEE,OAAOC,KACfC,EAAMJ,EAAEE,OAAOkO,QACG,WAAlBpO,EAAEE,OAAOnB,OACTqB,EAAM3E,SAAS2E,IAJvB,SAMyB1H,KAAK6D,OAAOV,SAASd,OAAOkF,EAAK,CAACoO,UAAWjO,IANtE,cAOgBnG,aACRvB,KAAKJ,MAAM0V,SAAS/N,GAAOG,EAC3B1H,KAAKiI,SAAS,CACVqN,SAAUtV,KAAKJ,MAAM0V,YAGzBtV,KAAK2D,YAAYqE,QAAQ4N,iBAAiB,4BAA6B,QAAS,KAbxF,gD,wHAiBA,WAAmBrT,EAAQiB,GAA3B,iBAAA3D,EAAA,sEACyBG,KAAK6D,OAAOV,SAASkI,OAAO9I,EAAQiB,GAD7D,QACQ2M,EADR,QAEgB5O,cACJsU,EAAO,GACX1F,EAAS/N,OAAO4H,SAAQ,SAAAyG,GACpBoF,EAAKpF,EAAMhJ,MAAQgJ,EAAMkF,aAE7B3V,KAAKiI,SAAS,CAACqN,SAAUO,KAE7B7V,KAAKiI,SAAS,CAAChE,eAAgBkM,EAAS5O,cAT5C,gD,4HAYA,WAAqBuU,GAArB,qBAAAjW,EAAA,oEACwBiW,GADxB,gEACeC,EADf,iBAE6BA,EAAMC,OAAOC,QAF1C,QAEYC,EAFZ,QAGoB3U,cACRvB,KAAKJ,MAAM2V,WAAWQ,EAAMI,OAASD,EAAS9T,OAC9CpC,KAAKiI,SAAS,CAACsN,WAAYvV,KAAKJ,MAAM2V,cAE1CvV,KAAKiI,SAAS,CAAChE,eAAgBiS,EAAS3U,cAPhD,uM,2HAWA,4BAAA1B,EAAA,6DACQiW,EAAS,CACT,CAACK,MAAO,UAAWH,OAAQhW,KAAK6D,OAAOZ,SACvC,CAACkT,MAAO,WAAYH,OAAQhW,KAAK6D,OAAOC,UACxC,CAACqS,MAAO,WAAYH,OAAQhW,KAAK6D,OAAOX,WAJhD,SAMUlD,KAAKoW,aAAa,EAAG,IAN/B,uBAOUpW,KAAKqW,eAAeP,GAP9B,OAQO9V,KAAKJ,MAAMqE,cACVjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,IAGnBjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,EACfwF,WAAW,IAfvB,gD,+HAoBA,sBAAA5J,EAAA,sDACmBG,KAAK6D,OAAOP,aAAa+H,OAAO,EAAG,EAAG,KADzD,gD,iFAIA,WAAgB,IAAD,OAIPjH,EAAYkB,SAASC,eAAe,yBACxC,GAAiB,OAAdnB,EAAmB,CAClB,IAAIyM,EAAIzM,EAAUkS,aACd3F,EAAIvM,EAAUmS,YAClBvW,KAAKiI,SAAS,CACV0I,EAAEA,EAAE,GACJE,EAAEA,EAAE,KAIZ3R,OAAOsX,SAAW,WACd,IAAIpS,EAAYkB,SAASC,eAAe,yBACxC,GAAiB,OAAdnB,EAAmB,CAClB,IAAIyM,EAAIzM,EAAUkS,aACd3F,EAAIvM,EAAUmS,YAClB,EAAKtO,SAAS,CACV0I,EAAEA,EAAE,GACJE,EAAEA,EAAE,S,sEAMpB,sBAAAhR,EAAA,sEACUG,KAAK+L,kBADf,OAEI/L,KAAKyW,gBAFT,gD,0EAKA,WAAS,IAAD,OACJ,OACQ,kBAAC,GAAD,CACIlN,IAAKvJ,KAAK2D,YACV1D,MAAO,aACP6K,YAAa,OACbwC,mBAAoB,cACpB/C,cAAe,GACf6C,kBAAmB,WACf,EAAKrB,kBAAkBC,SAG3B,yBAAKjM,UAAU,kBACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CACIE,MAAO,UACPC,OAAQF,KAAKJ,MAAM2V,WAAX,QACRpV,KAAM,gBACNR,KAAM,kBAACyV,GAASsB,OAAV,CAAiBjX,MAAO,CAACiG,SAAU,GAAIV,MAAM,cAI3D,yBAAKjF,UAAU,aACX,kBAAC,EAAD,CACIG,OAAQF,KAAKJ,MAAM2V,WAAX,SACRpV,KAAM,WACNF,MAAO,WACPN,KAAM,kBAACyV,GAASuB,OAAV,CAAiBlX,MAAO,CAACiG,SAAU,GAAIV,MAAO,kBAG5D,yBAAKjF,UAAU,aACX,kBAAC,EAAD,CACIE,MAAO,WACPC,OAAQF,KAAKJ,MAAM2V,WAAX,SACR5V,KAAM,kBAACyV,GAASwB,KAAV,CAAenX,MAAO,CAACiG,SAAU,GAAIV,MAAM,WACjD7E,KAAM,qBAId,yBAAKJ,UAAU,aACX,kBAAC,EAAD,CACIE,MAAO,eACPC,OAAQ,IACRP,KAAM,kBAACyV,GAASyB,SAAV,CAAmBpX,MAAO,CAACiG,SAAU,GAAIV,MAAM,WACrD7E,KAAM,YAIlB,yBAAKJ,UAAW,wBAAyBrB,GAAI,yBACzC,yDACA,kBAAC,GAAD,CAAmBiS,EAAG3Q,KAAKJ,MAAM+Q,EAAGE,EAAG7Q,KAAKJ,MAAMiR,KAEtD,yBAAK9Q,UAAU,0BACX,kBAAC+W,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAActY,GAAG,yBAAyBuY,QAAS,0CAEvD,kBAACF,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,KAAc,kBAAC,IAAD,OACd,kBAACF,GAAA,EAAD,CAActY,GAAG,yBAAyBuY,QAAQ,iBAClD,kBAACE,GAAA,EAAD,CACI1P,KAAM,SACN2P,KAAK,MACLtO,SAAU9I,KAAK+I,aAAaH,KAAK5I,MACjC0V,QAAS1V,KAAKJ,MAAM0V,SAAX,OACT+B,WAAY,CACR,kBAAmB,6BAI/B,kBAACN,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,KACI,kBAAC9B,GAASuB,OAAV,OAEJ,kBAACK,GAAA,EAAD,CAActY,GAAG,yBAAyBuY,QAAQ,kBAClD,kBAACE,GAAA,EAAD,CACIC,KAAK,MACLtO,SAAU9I,KAAK+I,aACf2M,QAAS1V,KAAKJ,MAAM0V,SAAX,aACT+B,WAAY,CACR,kBAAmB,6BAI/B,kBAACN,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,KACI,kBAAC9B,GAASuB,OAAV,OAEJ,kBAACK,GAAA,EAAD,CAActY,GAAG,yBAAyBuY,QAAQ,kBAClD,kBAACE,GAAA,EAAD,CACIC,KAAK,MACLtO,SAAU9I,KAAK+I,aACf2M,QAAS1V,KAAKJ,MAAM0V,SAAX,aACT+B,WAAY,CACR,kBAAmB,6BAI/B,kBAACN,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,KACI,kBAAC9B,GAASwB,KAAV,OAEJ,kBAACI,GAAA,EAAD,CAActY,GAAG,8BAA8BuY,QAAQ,qBACvD,kBAACE,GAAA,EAAD,CACI1P,KAAM,OACN2P,KAAK,MACLtO,SAAU9I,KAAK+I,aAAaH,KAAK5I,MACjC0V,QAAS1V,KAAKJ,MAAM0V,SAAX,KACT+B,WAAY,CACR,kBAAmB,kCAI/B,kBAACN,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,KACI,kBAAC9B,GAASkC,QAAV,OAEJ,kBAACN,GAAA,EAAD,CAActY,GAAG,8BAA8BuY,QAAQ,eACvD,kBAACE,GAAA,EAAD,CACIC,KAAK,MACLtO,SAAU9I,KAAK+I,aAAaH,KAAK5I,MACjC0V,QAAS1V,KAAKJ,MAAM0V,SAAX,SAGjB,kBAACyB,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,KACI,kBAAC9B,GAASmC,cAAV,OAEJ,kBAACP,GAAA,EAAD,CAActY,GAAG,8BAA8BuY,QAAQ,kBACvD,kBAACE,GAAA,EAAD,CACIC,KAAK,MACLtO,SAAU9I,KAAK+I,aAAaH,KAAK5I,MACjC0V,QAAS1V,KAAKJ,MAAM0V,SAAX,mB,GAlP1B5R,G,uMCiBJ8T,GAtBI,CACfC,IAAKC,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACoO,GAAA,EAAD,iBAAYnY,EAAZ,CAAmB+J,IAAKA,QACxDqO,MAAOF,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACqO,GAAA,EAAD,iBAAWpY,EAAX,CAAkB+J,IAAKA,QACzDsO,MAAOH,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACsO,GAAA,EAAD,iBAAWrY,EAAX,CAAkB+J,IAAKA,QACzDuO,OAAQJ,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACwO,GAAA,EAAD,iBAAmBvY,EAAnB,CAA0B+J,IAAKA,QAClEyO,YAAaN,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC0O,GAAA,EAAD,iBAAkBzY,EAAlB,CAAyB+J,IAAKA,QACtE2O,KAAMR,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC2O,GAAA,EAAD,iBAAU1Y,EAAV,CAAiB+J,IAAKA,QACvD4O,OAAQT,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC6O,GAAA,EAAD,iBAAa5Y,EAAb,CAAoB+J,IAAKA,QAC5D8O,OAAQX,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC+O,GAAA,EAAD,iBAAgB9Y,EAAhB,CAAuB+J,IAAKA,QAC/DgP,UAAWb,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACgP,GAAA,EAAD,iBAAe/Y,EAAf,CAAsB+J,IAAKA,QACjEiP,SAAUd,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACiP,GAAA,EAAD,iBAAchZ,EAAd,CAAqB+J,IAAKA,QAC/DkP,SAAUf,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC0O,GAAA,EAAD,iBAAkBzY,EAAlB,CAAyB+J,IAAKA,QACnEmP,aAAchB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACoP,GAAA,EAAD,iBAAiBnZ,EAAjB,CAAwB+J,IAAKA,QACtEqP,YAAalB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACsO,GAAA,EAAD,iBAAWrY,EAAX,CAAkB+J,IAAKA,QAC/DsP,OAAQnB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACsP,GAAA,EAAD,iBAAYrZ,EAAZ,CAAmB+J,IAAKA,QAC3DuP,UAAWpB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAACwP,GAAA,EAAD,iBAAmBvZ,EAAnB,CAA0B+J,IAAKA,QACrEyP,gBAAiBtB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC0P,GAAA,EAAD,iBAAYzZ,EAAZ,CAAmB+J,IAAKA,QACpE2P,WAAYxB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kBAAC2P,GAAA,EAAD,iBAAgB1Z,EAAhB,CAAuB+J,IAAKA,QACnE4P,MAAOzB,sBAAW,SAAClY,EAAO+J,GAAR,OAAgB,kCC4GvB6P,G,kDApIX,WAAY5Z,GAAO,IAAD,uBACd,cAAMA,IACDI,MAAQ,CACTyZ,KAAM,EACNC,WAAY,EACZC,iBAAwCpS,IAA3B,EAAK3H,MAAM+Z,YAA4B,EAAK/Z,MAAM+Z,YAAc,KAC7E7I,QAAS,CACL8I,QAAQ,EACRC,oBAAqB,EAAGC,cAAc,EAAMC,mBAAoB,MAChEC,gBAAiB,CAAC,EAAG,GAAI,GAAI,GAAI,KAGvB,IAAIC,gBAAgB3a,OAAOwS,SAAS8H,QAZxC,OAad,EAAKM,SAAW1Z,IAAMwD,YAbR,E,4FAmBlB,8BAAA/D,EAAA,sDACI,QAA0BsH,IAAvBnH,KAAKR,MAAMkR,QAAsB,CAEhC,IAAWjE,KADPsN,EAAa/Z,KAAKJ,MAAM8Q,QACP1Q,KAAKR,MAAMkR,QAC5BqJ,EAAWtN,GAAUzM,KAAKR,MAAMkR,QAAQjE,GAE5CzM,KAAKiI,SAAS,CAACyI,QAAUqJ,IANjC,gD,oHAUA,sBAAAla,EAAA,0F,mHAIA,WAAema,GAAf,yBAAAna,EAAA,yDACI4C,QAAQC,IAAIsX,GACRzX,EAASyX,EAAMX,KAAKW,EAAMC,SAAUzW,EAASwW,EAAMC,SAGnC,KAAjBD,EAAMR,OALb,gCAMyBxZ,KAAKR,MAAM0a,UAAU7O,OAAO9I,EAAQiB,GAN7D,OAMQ2M,EANR,+CAUyBnQ,KAAKR,MAAM0a,UAAUC,SAASna,KAAKJ,MAAM2Z,YAAaS,EAAMR,QAVrF,QAUQrJ,EAVR,mBAaOA,EAAS5O,YAbhB,wBAcYa,EAAS,CACTd,KAAO6O,EAAS/N,OAAOoJ,KACvB4O,MAAOjK,EAAS/N,OAAO6T,OAExB+D,EAAMK,QAAQtN,OAAS,IAElBsN,EAAUL,EAAMK,QAChB1T,EAAI,GACRvE,EAAOd,KAAK0I,SAAQ,SAAAyG,GAChB,IADwB,EACpB6J,GAAW,EADS,cAELD,GAFK,IAExB,2BAA2B,CAAC,IAAnBE,EAAkB,QACnBC,EAAYD,EAAM,OAAN,MACZE,EAAcF,EAAM,MACrB9J,EAAM+J,IAAgBC,IACrBH,GAAW,IANK,8BAUrBA,GACC3T,EAAEsD,KAAKwG,MAIfhO,QAAQC,IAAIiE,GACZvE,EAAOd,KAAOqF,GAtC1B,kBAwCevE,GAxCf,kCA0Ce,GA1Cf,iD,yFA8CA,c,oBAKA,WAAU,IAAD,OACL,OACI,kBAAC,KAAD,iBACQpC,KAAKR,MADb,CAEIC,MAAO,CAAEib,UAAW,OAAQC,WAAY,WACxCb,SAAU9Z,KAAK8Z,SACfc,MAAOpD,GACPvX,MAAO,GACPqB,KAAM,SAAA0Y,GAAK,OAAI,IAAIa,SAAQ,SAACC,EAASC,GAC7B,EAAKC,SAAShB,GACThO,MAAK,SAAA5J,GACW,GAAVA,EACC2Y,IAEAD,EAAQ,CACJxZ,KAAMc,EAAM,KACZiX,KAAMW,EAAMX,KACZC,WAAYlX,EAAM,eAM1CsO,QAAS1Q,KAAKJ,MAAM8Q,QACpBuK,aAAc,CACVzZ,MACI,yBAAKzB,UAAW,kBACZ,0DACA,6BAAK,6BACL,kBAACqG,EAAA,EAAD,CACI3G,MAAO,CAACC,gBAAiB,MAAOwb,QAAS,IACzClW,MAAO,UACPT,QAAS,YACTW,QAAS,WACL,EAAK4U,SAAS9R,QAAQmT,cAAc,MAL5C,kB,GAlHD/a,IAAMC,W,UC8HlB+a,G,kDAzHX,WAAY5b,GAAO,IAAD,8BACd,cAAMA,IAgCV6b,YAAc,SAAChR,EAAOiR,KA/BlB,EAAK1b,MAAQ,CACT2b,QAAS,GACTC,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,MACrB,CAACxb,MAAO,OAAQwb,MAAO,YACvB,CAACxb,MAAO,SAAUwb,MAAO,QACzB,CAACxb,MAAO,QAAWwb,MAAO,SAC1B,CAACxb,MAAO,WAAcwb,MAAO,YAAa9V,OAAQ,SAAA+V,GAAO,OAAIA,EAAO,UAAcC,OAAO,EAAG,KAAKC,UAAU,GAC3G,CACI3b,MAAO,OAAUwb,MAAO,OACxBI,OAAQ,CAAEC,EAAG,MAAOC,EAAG,SAAUC,EAAG,UACpCrW,OAAQ,SAAC+V,GACL,IAAItZ,EAAQ4C,EACZ,OAAQ0W,EAAQO,MACZ,KAAK,EAAG7Z,EAAS,MAAO4C,EAAM,QAAS,MACvC,KAAK,EAAG5C,EAAS,SAAU4C,EAAO,WAAY,MAC9C,KAAK,EAAG5C,EAAS,SAAU4C,EAAM,MAAO,MACxC,QAAQ5C,EAAS,UAAW4C,EAAM,MAEtC,OAAO,kBAACkX,GAAA,EAAD,CAAOzd,MAAO2D,EAAS3C,MAAO,CAACgL,MAAO,IAAK/K,gBAAiBsF,EAAOA,MAAM,QAASmX,WAAY,aAKjH7a,KAAM,GACN8a,cAAe,KACfC,MAAM,GAEV,EAAKC,UAAYlc,IAAMwD,YA9BT,E,6FAqClB,4BAAA/D,EAAA,+EAEgCG,KAAK6D,OAAOZ,QAAQoI,OAAO,EAAG,IAF9D,OAG0B,OADdkR,EAFZ,UAIYvc,KAAKiI,SAAS,CAEV3G,KAAMib,IAEVvc,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BwB,WAAW,KAT3B,uG,4HAmBA,sBAAA5J,EAAA,0F,qHAKA,WAAiB6b,EAASO,GAA1B,SAAApc,EAAA,+EAEiCG,KAAK6D,OAAOZ,QAAQZ,OAAOqZ,EAAQhd,GAAI,CAACud,KAAMA,IAF/E,gBAIY9X,GAA+B,qBAAsB,4BAA6B,WAClFnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,cAAc,KALlE,uG,yHAYA,WAAkBO,GAAlB,SAAA7b,EAAA,+EAEiCG,KAAK6D,OAAOZ,QAAQ6G,OAAO4R,EAAQhd,IAFpE,eAIYyF,GAA+B,qBAAsB,iBAAkB,WAJnF,uG,4HAUA,WAAuB7B,GAAvB,SAAAzC,EAAA,+EAE6BG,KAAK6D,OAAOZ,QAAQZ,OAAOC,EAAQ5D,GAAI4D,GAFpE,cAGoBf,aACR4C,GAA+B,qBAAsB,iBAAkB,WACvEnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,iBAExChX,GAA+B,qBAAsB,sBAAuB,SAPxF,gDAUQA,GAA+B,qBAAsB,+BAAgC,SAV7F,yD,2EAcA,WAAU,IAAD,OACL,OACI,kBAAC,GAAD,CACI2G,YAAa,cAAeC,SAAU,cAAe9K,MAAO,UAC5DsJ,IAAKvJ,KAAK2D,aAEV,kBAAC,GAAD,CACI4F,IAAKvJ,KAAKsc,UACVd,QAASxb,KAAKJ,MAAM4b,QACpBtB,UAAWla,KAAK6D,OAAOZ,QACvBsW,YAAa,WACbqC,SAAU,CACNY,YAAa,SAACla,EAASma,GAAV,OAAsB,EAAKC,iBAAiBpa,IACzDqa,YAAa,SAAAF,GAAO,OAChB,IAAI5B,SAAQ,SAACC,EAASC,GAClB,EAAK6B,YAAYH,GAASzQ,MAAK,SAAArF,GAAC,OAAImU,mB,GAlH9CpX,G,qHCFtBmZ,KAAQC,UAAU,2CAClBD,KAAQE,cAE0B3c,IAAMC,U,ICqFzB2c,G,kDA5FX,WAAYxd,GAAQ,IAAD,8BACf,cAAMA,IAkBVsJ,SAAW,SAACuB,GACR,EAAKpC,SAAL,gBAAiBoC,EAAM7C,OAAOC,KAAO4C,EAAM7C,OAAOzI,SApBnC,EAwBnBke,gBAAkB,SAAC3V,GAEf,IAAIO,EAASP,EAAE4V,OAAOvV,MAAOG,EAASR,EAAE4V,OAAOjK,MAE/C,EAAKhL,SAAS,CACVkV,eAAgB,CACZxV,IAAKE,EACLoL,IAAKnL,GAETsV,YAAa,CACTzV,IAAKE,EACLoL,IAAKnL,UAGeX,IAAzB,EAAK3H,MAAMmJ,WAA0D,mBAAxB,EAAKnJ,MAAMmJ,WACvD,EAAKnJ,MAAMmJ,UAAUrB,IArCzB0V,EAAkBvU,YAAc,oBAChC,EAAK7I,MAAQ,CACT0T,KAAM,GACN1C,OAAQ,IACRwM,iBAAmCjW,IAAtB,EAAK3H,MAAM6T,OAAuB,CAAC1L,KAAM,MAAOsL,KAAM,QAAU,EAAKzT,MAAM6T,OACxF8J,oBAAsChW,IAAtB,EAAK3H,MAAM6T,OAAuB,CAAC1L,KAAM,MAAOsL,KAAM,QAAU,EAAKzT,MAAM6T,QAPhF,E,qDAanB,c,oBA8BA,WAAU,IAAD,OACL,OAEQ,kBAAC,KAAD,CACIgK,kBAAmB,CAACzM,OAAQ,OAAQnG,MAAO,QAC3C6I,KAAMtT,KAAKJ,MAAM0T,KACjBD,OAAQ,CAAE1L,IAAK3H,KAAKJ,MAAMwd,YAAYzV,IAAKsL,IAAKjT,KAAKJ,MAAMwd,YAAYnK,MAMvE,kBAAC,KAAD,CACIqK,OAAQtd,KAAKR,MAAM8d,OACnB7V,KAAM,eACNuL,WAAW,EACXrK,UAAW,SAACrB,GACR,EAAK2V,gBAAgB3V,IAGzBkN,SAAU,CAAE7M,IAAK3H,KAAKJ,MAAMud,eAAexV,IAAKsL,IAAKjT,KAAKJ,MAAMud,eAAelK,OAE/E,kBAAC,KAAD,CACIsK,QAASvd,KAAKwd,kBACdhJ,SAAU,CAAE7M,IAAM3H,KAAKJ,MAAMud,eAAexV,IAAM,MAASsL,IAAKjT,KAAKJ,MAAMud,eAAelK,MAE1F,6BACI,0BAAMxT,MAAO,CAAEge,QAAS,EAAGC,OAAQ,IAAnC,uBAGZ,kBAAC,KAAD,W,GA1EYtd,IAAMC,WCwKvBsd,G,kDA3IX,WAAYne,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTmH,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNiE,aAAc,GACd2S,QAAS,IAGb,EAAKzS,aAAe,CAChB,CACI1M,MAAO,SACPM,MAAO,GAEX,CACIN,MAAO,WACPM,MAAO,IAGf,EAAKqM,QAAUhL,IAAMwD,YApBN,E,4FAuBnB,gCAAA/D,EAAA,sEACsBG,KAAK6D,OAAOX,SAASmI,OAAO,EAAG,KADrD,QAE8B,KADtBC,EADR,QAEc/J,cACFgK,EAAWD,EAAMlJ,OAAOoJ,KACxBC,EAAWF,EAASjD,KAAI,SAAAoD,GACxB,MAAO,CAAC3M,MAAO2M,EAAQhN,GAAID,MAAOiN,EAAQC,aAE9C3L,KAAKiI,SAAS,CACVgD,aAAcQ,KAR1B,gD,oFAeA,WAII,IAHA,IAAIoS,EAAQ,2EAERC,EAAW,GACNjO,EAAI,EAAGA,GAFK,EAEgBA,IAAK,CACtC,IAAIkO,EAAeC,KAAKC,MAAMD,KAAKE,SAAWL,EAAM9Q,QACpD+Q,GAAYD,EAAMM,UAAUJ,EAAcA,EAAc,GAE5D,OAAOD,I,iEAGX,WAAmBxb,GAAnB,iBAAAzC,EAAA,6DACQie,EAAW9d,KAAKoe,mBAEpB9b,EAAO,SAAewb,EAH1B,SAIyB9d,KAAK6D,OAAOX,SAASjB,OAAOK,GAJrD,YAIQsJ,EAJR,QAKiBrK,YALjB,0CAMe,GANf,cAQQ4D,MAAMvD,KAAKC,UAAU+J,IACrB5L,KAAKoL,QAAQpD,QAAQC,SAAS,CAC1Bb,OAAQwE,EAASpK,QAV7B,mBAYe,GAZf,iD,2EAgBA,WACI,OACI,yBAAKzB,UAAW,kBACZ,kBAAC,GAAD,CACIwJ,IAAKvJ,KAAKoL,QACVlD,aAAclI,KAAKkI,aAAaU,KAAK5I,OAErC,kBAACkJ,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,EAAGC,GAAI,IAC5B,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5B7F,GAAG,oBAAoB+I,KAAM,WAAYhJ,MAAM,eAIvD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CAEI5N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,cACN6K,cAAe,GAEf,kBAACkD,EAAA,EAAD,CAAUzN,OAAQ,GAAlB,iBACCsf,KAAa/V,KAAI,SAACmE,GAAD,OACd,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CAEI5N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,QACN6K,cAAe,GAEf,kBAACkD,EAAA,EAAD,CAAUzN,OAAQ,GAAlB,eACCuf,KAAchW,KAAI,SAACmE,GAAD,OACf,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5BkD,KAAM,QAAS/I,GAAG,oBAClBD,MAAM,QAAQ6T,YAAa,oBAGnC,kBAACpJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5BkD,KAAM,OAAQ/I,GAAG,oBACjBD,MAAM,eAAe6T,YAAa,iBAG1C,kBAACpJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,kBAAC,GAAD,c,GAlIC3F,GCbvB0R,GAAW3G,EAAQ,I,IAgMV8P,G,kDAjLX,WAAY/e,GAAQ,IAAD,8BACf,cAAMA,IAiBV6b,YAAc,SAAChR,EAAOiR,KAhBlB,EAAK1b,MAAQ,CACT2b,QAAS,GACTC,QAAS,CACL,CAACvb,MAAO,OAAQwb,MAAO,YACvB,CAACxb,MAAO,SAAUwb,MAAO,QACzB,CAACxb,MAAO,QAASwb,MAAO,SACxB,CAACxb,MAAO,OAAQwb,MAAO,OAAQ9V,OAAQ,SAAA+V,GAAO,OArB9D,SAAsBO,GAClB,IAAI7Z,EAAS,GAMb,OALApD,eAAYgL,SAAQ,SAACwU,GACbA,EAAWzf,OAASkd,IACpB7Z,EAASoc,EAAW/f,UAGrB2D,EAcuDqc,CAAa/C,EAAQO,OAAOL,SAAU,UAG5Fta,KAAM,GACN8a,cAAe,KACfC,MAAM,GAEV,EAAKC,UAAYlc,IAAMwD,YAfR,E,uFAsBnB,8BAAA/D,EAAA,sEACsBG,KAAK6D,OAAOX,SAASmI,OAAO,EAAG,IADrD,QACQC,EADR,QAEc/J,aACF0J,EAAeK,EAAMlJ,OACzBpC,KAAKiI,SAAS,CACVhE,eAAe,EACf3C,KAAM2J,KAIVjL,KAAKiI,SAAS,CACVhE,eAAe,IAX3B,gD,0HAiBA,sBAAApE,EAAA,sEACUG,KAAK0e,eADf,OAEQ1e,KAAKJ,MAAMqE,cAEXjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,IAGnBjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,EACfwF,WAAW,IAVvB,gD,6HAgBA,sBAAA5J,EAAA,sEACUG,KAAK+L,kBADf,gD,4HAKA,sBAAAlM,EAAA,0F,qHAMA,WAAiB6b,EAASO,GAA1B,SAAApc,EAAA,+EAEiCG,KAAK6D,OAAOX,SAASb,OAAOqZ,EAAQhd,GAAI,CAACud,KAAMA,IAFhF,gBAIY9X,GAA+B,qBAAsB,4BAA6B,WAClFnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,iBALpD,uG,yHAYA,WAAkBO,EAASO,GAA3B,SAAApc,EAAA,+EAEiCG,KAAK6D,OAAOX,SAAS4G,OAAO4R,EAAQhd,IAFrE,gBAIYyF,GAA+B,qBAAsB,kBAAmB,WACxEnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,cAAc,KALlE,uG,6EAYA,WAAU,IAAD,OACL,OAEI,kBAAC,GAAD,CACI5R,IAAKvJ,KAAK2D,YACVmH,YAAa,cAAeC,SAAU,cAAe9K,MAAO,WAC5DmN,kBAAiB,sBAAE,sBAAAvN,EAAA,sEACT,EAAKkM,kBADI,2CAGnBxB,cAAe,CACX,CACIpK,KAAM,cACNR,KAAM,kBAAC,GAAS8X,IAAV,MACNvS,QAAS,WAAK,EAAKvB,YAAYqE,QAAQ2W,cAAc,kBAAC,GAAD,WAO7D,kBAAC,GAAD,CACIpV,IAAKvJ,KAAKsc,UACVd,QAASxb,KAAKJ,MAAM4b,QACpBoD,QAAS,CACL,SAAClD,GACG,OAAQA,EAAQO,MACZ,KAAK,EACD,MAAO,CACHtc,KAAM,kBAAM,kBAAC,GAASiY,MAAV,CAAgBnY,MAAO,CAACuF,MAAO,WAC3CE,QAAS,SAACmF,EAAOqR,GAAR,OAAoB,EAAKmD,WAAWnD,EAAS,IACtDoD,QAAS,YAGjB,KAAK,EACD,MAAO,CACHnf,KAAM,kBAAM,kBAAC,GAASof,MAAV,CAAgBtf,MAAO,CAACuF,MAAO,UAC3C8Z,QAAS,cACT5Z,QAAS,SAACmF,EAAOqR,GAAR,OAAoB,EAAKmD,WAAWnD,EAAS,KAE9D,KAAK,EACD,MAAO,CACH/b,KAAM,kBAAM,kBAAC,GAASqf,SAAV,CAAmBvf,MAAO,CAACuF,MAAO,YAC9C8Z,QAAS,kBACT5Z,QAAS,SAACmF,EAAOqR,GAAR,OAAoB,EAAKmD,WAAWnD,EAAS,OAKtE,SAACA,GAAY,MAAM,CACf/b,KAAM,kBAAM,kBAAC,GAASmY,OAAV,CAAiBrY,MAAO,CAACuF,MAAO,UAC5CE,QAAS,SAACmF,EAAOqR,GAEb,EAAKkB,YAAYlB,GAAS1P,MAAK,SAAArF,QAGnCmY,QAAS,aAGb,SAACpD,GACG,MAAO,CACH/b,KAAM,kBAAM,kBAAC,IAAD,CAAMsf,GAAI,CAClBC,SAAU,6BAA+BxD,EAAQhd,GACjD8a,OAAQ,GACR5Z,MAAO,CAAC0B,KAAM,EAAK1B,MAAM2b,QAAQG,EAAQyD,aAC1C,kBAAC,GAASC,OAAV,CAAiB3f,MAAO,CAACuF,MAAO,aACnC8Z,QAAS,aAIrBO,WAAY,SAAChV,EAAOqR,GACfrR,EAAM7C,OAAQ8X,WAAa,WACxB,EAAK9f,MAAM+f,QAAQtV,KAAK,6BAA+ByR,EAAQhd,GAAI,CAAGkB,MAAO,CAAC0B,KAAM,EAAK1B,MAAM2b,QAAQG,EAAQyD,eAKvHjF,UAAWla,KAAK6D,OAAOX,SACvBqW,YAAa,kB,GAzKV7V,G,kBCrBhB8b,I,gEAEH,WAAYhgB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT6f,aAAc,aAAcD,EAAW9gB,GACvCghB,aAAc,aAAaF,EAAW9gB,GACtCihB,YAAa,YAAYH,EAAW9gB,GACpCkhB,aAAe,GAEnBJ,EAAW9gB,KARI,E,kDAWnB,SAAemhB,GAEX,IADA,IAAIC,EAAcxa,SAASya,uBAAuB/f,KAAKJ,MAAM+f,aACrD9P,EAAE,EAAGA,EAAEiQ,EAAY/S,OAAQ8C,IAC5BiQ,EAAYjQ,GAAGnR,IAAMmhB,GACpBC,EAAYjQ,GAAGpQ,MAAMuF,MAAQ,WAC7B8a,EAAYjQ,GAAGpQ,MAAMugB,eAAiB,cAEtCF,EAAYjQ,GAAGpQ,MAAMuF,MAAQ,OAC7B8a,EAAYjQ,GAAGpQ,MAAMugB,eAAiB,M,0BAKlD,WAAe,IAAD,OAEV,OACAhgB,KAAKR,MAAMygB,SAAS3X,KAAI,SAAC4X,EAAK1d,GAE1B,OACA,yBAAKzC,UAAW,YACZ,yBACIN,MAAO,CAACuF,MAAO,SACftG,GAAI,EAAKkB,MAAM+f,YAAYnd,EAC3BwD,WAAS,EAACjG,UAAW,iBAAmB,EAAKH,MAAM+f,YACnDza,QAAO,sBAAE,sBAAArF,EAAA,sDACL,EAAKoI,SAAS,CACV2X,aAAcpd,SAEM2E,GAApB+Y,EAAIC,cACJD,EAAIC,eALH,4CAQXD,EAAIjgB,a,wBAOjB,SAAWuC,GAGP,OADAxC,KAAKogB,eAAepgB,KAAKJ,MAAM+f,YAAYnd,QACT2E,IAA/BnH,KAAKR,MAAM4I,SAAS2E,OAEZ/M,KAAKR,MAAM4I,SAEXpI,KAAKR,MAAM4I,SAAS5F,K,sEAUpC,sBAAA3C,EAAA,0F,0EAKA,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,6BAASC,UAAW,aAAcrB,GAAIsB,KAAKJ,MAAM6f,cAC7C,yBAAK1f,UAAU,cACVC,KAAKqgB,gBAEV,yBAAKtgB,UAAU,aAAarB,GAAIsB,KAAKJ,MAAM8f,cACtC1f,KAAKsgB,WAAWtgB,KAAKJ,MAAMggB,qB,GAlFzBxf,IAAMC,YAA1Bmf,GACI9gB,GAAK,EA0FD8gB,UC5DAe,I,yDArCX,WAAY/gB,GAAQ,IAAD,8BACf,cAAMA,IAEDI,MACD,CACI4gB,OAAS,EAAKhhB,MAAMghB,QAE5B,EAAKC,MAAQrgB,IAAMwD,YAPJ,E,6CAUnB,SAAUhE,GACNI,KAAKiI,SAAS,CACVuY,OAAS5gB,M,oBAMjB,WACI,OAAGI,KAAKJ,MAAM4gB,OAEN,yBAAKzgB,UAAW,UAAYC,KAAKR,MAAMO,UAAWrB,GAAIsB,KAAKR,MAAMd,GAAI6K,IAAKvJ,KAAKygB,OAC1EzgB,KAAKR,MAAM4I,UAKrB,yBAAMrI,UAAW,UAAYC,KAAKR,MAAMO,UAAWrB,GAAIsB,KAAKR,MAAMd,GAAI6K,IAAKvJ,KAAKygB,OAC3EzgB,KAAKR,MAAM4I,SACZ,yBAAKrI,UAAW,YACXC,KAAKR,MAAMkhB,sB,GA/BTtgB,IAAMC,YCctBsgB,IAFWlS,EAAQ,IAEN,YAAkC,IAAhCkS,EAA+B,EAA/BA,UAAWR,EAAoB,EAApBA,aAAczhB,EAAM,EAANA,GA0B1C,MAAwB0B,IAAMwgB,UAAS,GAAvC,oBAAO3E,EAAP,KAAa4E,EAAb,KACA,OACI,yBAAK9gB,UAAW,gBAAiBrB,GAAIA,EAAIe,MAAO,CAACgL,MAAO,MACxD,mCACKkW,EAAUG,YAAY,6BACvB,2CAAoBH,EAAUI,WAAW,6BA9BjD,SAAqB9E,GACjB,OAAGA,EAEK,kBAAC,IAAD,CAAQjW,WAAS,EAACG,UAAW,kBAAC,IAAD,MAAc5B,QAAQ,YAAYS,MAAM,UAC7DE,QAAS,WACLib,EAAaU,KAFzB,SASA,wCAmBHG,CAAY/E,MAKnBgF,GAAW,SAAC,GAAc,IAAbC,EAAY,EAAZA,IAAMxiB,EAAM,EAANA,GACrB,YAAUyI,GAAP+Z,EAEK,yBAAKnhB,UAAW,gBAAiBrB,GAAIA,GACjC,kBAACwK,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,EAAGC,GAAI,EAAG5J,MAAO,CAACgL,MAAO,SAC9C,kBAACvB,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,SACN6K,aAAc4X,EAAIC,OAClBlc,KAAK,QACLmc,WAAY,CACRC,UAAU,MAItB,kBAACnY,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,OACN6K,aAAc4X,EAAIA,IAClBjc,KAAK,QACLmc,WAAY,CACRC,UAAU,MAItB,kBAACnY,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,KAGf,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,YACN6K,aAAc4X,EAAIA,IAClBjc,KAAK,QACLmc,WAAY,CACRC,UAAU,MAItB,kBAACnY,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,WACN6K,aAAc4X,EAAIA,IAClBjc,KAAK,QACLmc,WAAY,CACRC,UAAU,QAQ3B,gEAyOAC,G,kDApOX,WAAY9hB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT6J,WAAW,EACXxF,eAAgB,EAChBsd,eAAgB,CAACC,QAAS,IAC1BC,mBAAoB,GACpBC,WAAY,MACZC,YAAc,IAElB,EAAK5V,kBAAkBC,MAAK,SAAArF,OAVb,E,0FAanB,sBAAA9G,EAAA,sEAC8BG,KAAK4hB,gBAAgB5hB,KAAKR,MAAMd,IAD9D,mDAGcsB,KAAK6hB,mBAAmB7hB,KAAKJ,MAAM2hB,eAAe7iB,IAHhE,uBAIcsB,KAAK8hB,QAAQ9hB,KAAKJ,MAAM2hB,eAAe7iB,GAAI,GAJzD,+BAMQ+D,QAAQsf,QANhB,iD,4HAWA,sBAAAliB,EAAA,sDACOG,KAAKJ,MAAMqE,cACVjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,IAGnBjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BwB,WAAW,IAPvB,gD,0HAYA,WAAsB/K,GAAtB,iBAAAmB,EAAA,sEACyBG,KAAK6D,OAAOC,SAASke,iBAAiBtjB,GAD/D,WAEiC,KADzBujB,EADR,QAEiB1gB,YAFjB,uBAGYggB,EAAiBU,EAAS7f,OAC9BpC,KAAKiI,SAAS,CACVsZ,eAAgBA,IAL5B,mBAOe,GAPf,cASQvhB,KAAKiI,SAAS,CACVhE,eAAgB,IAV5B,mBAYe,GAZf,iD,8HAgBA,WAAyBvF,GAAzB,eAAAmB,EAAA,8DACasH,GAANzI,EADP,gCAEuCsB,KAAK6D,OAAOC,SAASoe,eAAexjB,GAF3E,QAGmC,KADvB+iB,EAFZ,QAIYzhB,KAAKiI,SAAS,CACVwZ,mBAAoBA,IAGxBtd,GAA+B,qBAAsB,uCAAwC,SARzG,gD,mHAaA,WAAcrB,EAAWN,GAAzB,iBAAA3C,EAAA,8DACoBsH,GAAbrE,EADP,gCAEwB9C,KAAK6D,OAAOC,SAASqe,WAAWrf,EAAWN,GAFnE,QAGmB,KADP0e,EAFZ,UAIgBlZ,EAAWhI,KAAKJ,MAAM+hB,aAClBnf,GAAS0e,EACjBlhB,KAAKiI,SAAS,CACV0Z,YAAa3Z,KAGjB7D,GAA+B,qBAAsB,0BAA2B,SAV5F,gD,qFAeA,SAAeie,GAAgB,IAAD,OAC1B,YAAqBjb,GAAlBib,EACIA,EAAerV,OAAS,EAEnBqV,EAAe9Z,KAAI,SAAC+Z,EAAW7f,GAC3B,OACI,yBAAKzC,UAAU,aACX,kBAAC,GAAD,CACIrB,GAAI,YAAY8D,EAChBme,UAAW0B,EACXlC,aAAY,uCACR,WAAOlY,GAAP,SAAApI,EAAA,6DACIoI,GAAS,GADb,SAEkB,EAAKpE,OAAOC,SAASwe,cAAc,EAAK1iB,MAAM2hB,eAAe7iB,IAF/E,eAKQyF,GAA+B,qBAAsB,qBAAsB,WAC3EmB,SAASC,eAAe,YAAY/C,GAAO/C,MAAM2K,QAAU,SAE3DjG,GAA+B,qBAAsB,gCAAiC,SACtF8D,GAAS,IATjB,2CADQ,4DAoBxB,8DAGJ,4D,qBAIhB,WACIjI,KAAK6D,OAAO0e,QAAQJ,WAAWniB,KAAKJ,MAAM2hB,eAAe7iB,GAAI,MAAMsN,MAAK,SAAC5J,GACrE,GAAa,GAAVA,EACC,OAAO,kBAAC,GAAD,CAAS8e,IAAK9e,IAErB+B,GACI,qBACA,0BACA,QACA,WACA,W,oBAIhB,WAAU,IAAD,OACL,OACI,kBAAC,GAAD,CACIoF,IAAKvJ,KAAK2D,YACVmH,YAAa,yBACbC,SAAU,yBACV9K,MAAO,mBAEP,yBAAKF,UAAU,2BACX,yBAAKA,UAAU,aACX,yCADJ,IACuBC,KAAKJ,MAAM2hB,eAAeiB,UAEjD,yBAAKziB,UAAU,aACX,yCACCC,KAAKJ,MAAM2hB,eAAe7iB,IAE/B,yBAAKqB,UAAU,aACX,iDADJ,KAIA,yBAAKA,UAAU,aACX,uCACCC,KAAKJ,MAAM2hB,eAAeC,QAAQ7V,WAG3C,kBAAC,GAAD,CACIpC,IAAKvJ,KAAKygB,MACV1gB,UAAU,oBACVygB,QAAQ,EACRE,gBACI,kBAAC,IAAM5gB,SAAP,KACI,8CACA,kBAAC,IAAD,CACIyE,QAAQ,YACRS,MAAO,UACPE,QAAS,WACL,EAAKub,MAAMzY,QAAQya,WAAU,GAC7B,EAAKb,gBAAgB,EAAKpiB,MAAMd,IAAIsN,KAApC,sBAAyC,sBAAAnM,EAAA,sEAE/B,EAAKiiB,QAAQ,EAAKliB,MAAM2hB,eAAe7iB,GAAI,GAFZ,8CALjD,eAeR,kBAAC,GAAD,CACIuhB,SAAU,CACN,CACIhgB,MAAO,eAEX,CACIA,MAAO,sBAEX,CACIA,MAAO,yBAGf,yBAAKvB,GAAI,oBACJsB,KAAK0iB,eAAe1iB,KAAKJ,MAAM6hB,mBAAmBW,iBAEvD,yBAAK1jB,GAAI,eACL,kBAAC,GAAD,CACIuhB,SAAU,CACN,CACIhgB,MAAO,SAGX,CACIA,MAAO,UAEX,CACIA,MAAO,SAEX,CACIA,MAAO,SAEX,CACIA,MAAO,WAIf,yBAAKvB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC3D,yBAAKjjB,GAAG,gBAAe,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC5D,yBAAKjjB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC3D,yBAAKjjB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC3D,yBAAKjjB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,e,GA3N9Dje,G,OCpF7B,IAAM4C,GAAU,WACZ,OAAQ,yBAAKvG,UAAU,qBACnB,yBAAKA,UAAU,YAAYwG,MAAM,6BAA6BC,QAAQ,aAClE,4BAAQzG,UAAU,oBAAoB0G,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,SAClE,0BAAM7G,UAAU,mBAAmB6G,KAAK,OAAOC,EAAE,oCA6F9C8b,G,kDAxFX,WAAYnjB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTmH,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNC,QAAS,IAEb,EAAKI,aAAejH,IAAMwD,YARX,E,gDAWnB,SAAa0D,GACT,IAAIC,EAAMD,EAAEE,OAAOC,KACfC,EAAMJ,EAAEE,OAAOzI,MACE,WAAlBuI,EAAEE,OAAOnB,OACRqB,EAAM3E,SAAS2E,IAEnB1H,KAAKJ,MAAMqH,QAAQM,GAAMG,I,wBAG7B,WACI1H,KAAKR,MAAMojB,KAAKhN,iBAAiB5V,KAAKR,MAAMqjB,SAAU,QAAS,O,iEAInE,WAAmBvb,GAAnB,oBAAAzH,EAAA,6DACIyH,EAAES,iBACF/H,KAAKqH,aAAaW,QAAQC,SAAS,CAACnC,cAAe,IACnD9F,KAAKiI,SAAS,CACVnC,cAAc,IAJtB,SAMa9F,KAAKR,MAAM0I,aAAalI,KAAKJ,MAAMqH,SANhD,uBAM6D,IAN7D,sBAOQjH,KAAKiI,SAAS,CACVlB,aAAa,IAGjBnG,YAAW,WACP,EAAKqH,SAAS,CACVlB,aAAa,EACbjB,cAAc,MAEnB,KAhBX,wBAmBQ9F,KAAK8iB,aACL9iB,KAAKqH,aAAaW,QAAQC,SAAS,CAACnC,cAAe,IApB3D,iD,2FAwBA,SAAuBsC,GAAW,IAAD,OAC7B,OAAOhI,IAAMiI,SAASC,IAAIF,GAAU,SAAAG,GAChC,IAAInI,IAAMoI,eAAeD,GAAQ,OAAOA,EACxC,IAAKG,EAAa,CAACI,SAAU,EAAKC,aAAaH,KAAK,IAEpD,OADAF,EAAWN,SAAW,EAAKY,uBAAuBT,EAAM/I,MAAM4I,UACvDhI,IAAMyI,aAAaN,EAAOG,Q,sEAIzC,sBAAA7I,EAAA,0F,0EAIA,WACI,OAAIG,KAAKJ,MAAMmH,YAiBP,yBAAKhH,UAAW,aAAcrB,GAAI,cAC9B,kBAAC,GAAD,OAfA,0BAAOuK,SAAUjJ,KAAKkI,aAAaU,KAAK5I,MAAOtB,GAAI,UAC/C,kBAACwK,EAAA,EAAD,CAAM9E,WAAS,EAAEgF,QAAS,EAAGC,GAAI,IAC7B,kBAACH,EAAA,EAAD,CAAM9E,WAAS,EAAC+E,MAAI,EAAEE,GAAI,GAAID,QAAS,GAClCpJ,KAAKgJ,uBAAuBhJ,KAAKR,MAAM4I,WAE5C,kBAACc,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC,GAAD,CAAqBE,IAAKvJ,KAAKqH,sB,GAzEtC3D,G,8BCtBnBud,IAFWxS,EAAQ,IAER,SAAC,GAAc,IAAbyS,EAAY,EAAZA,IAAMxiB,EAAM,EAANA,GAKrB,YAJUyI,GAAP+Z,IACCA,EAAM,IAIN,yBAAKnhB,UAAW,gBAAiBrB,GAAIA,GACjC,kBAAC,GAAD,KACI,kBAACwK,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,EAAGC,GAAI,GAAI5J,MAAO,CAACgL,MAAO,SAC/C,kBAACvB,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,SACN6K,aAAc4X,EAAIC,OAClBlc,KAAK,QACLmc,WAAY,CACRC,UAAU,MAItB,kBAACnY,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,OACN6K,aAAc4X,EAAIA,IAClBjc,KAAK,QACLmc,WAAY,CACRC,UAAU,MAItB,kBAACnY,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,KAGf,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,YACN6K,aAAc4X,EAAIA,IAClBjc,KAAK,QACLmc,WAAY,CACRC,UAAU,MAItB,kBAACnY,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EACTtH,GAAG,6BACHD,MAAM,WACN6K,aAAc4X,EAAIA,IAClBjc,KAAK,QACLmc,WAAY,CACRC,UAAU,WA2T3B0B,G,kDA/SX,WAAYvjB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT6J,WAAW,EACXxF,eAAgB,EAChBsd,eAAgB,CAACC,QAAS,IAC1BC,mBAAoB,GACpBC,WAAY,MACZC,YAAc,GAEd1W,aAAc,GACdC,UAAW,CACP,CAACzM,MAAO,SAAUC,GAAI,GACtB,CAACD,MAAO,SAAUC,GAAI,KAI9B,EAAKoN,SAAW1L,IAAMwD,iBACWuD,IAA9B,EAAKvH,MAAM2hB,eACV,EAAK3hB,MAAM2hB,eAAiB,IAE5B,EAAK3hB,MAAM2hB,eAAiB,EAAK/hB,MAAM+iB,QACvC,EAAKxW,kBAAkBC,MAAK,SAAArF,QAtBjB,E,uFA0BnB,gCAAA9G,EAAA,sEACyBG,KAAK6D,OAAOX,SAASmI,OAAO,EAAG,KADxD,WAEgC,KADxB8E,EADR,QAEgB5O,YAFhB,gBAGYgK,EAAW4E,EAAS/N,OAAOoJ,KAC3BC,EAAWF,EAASjD,KAAI,SAAAoD,GACxB,MAAM,CAAC3M,MAAO2M,EAAQhN,GAAID,MAAOiN,EAAQC,aAE7C3L,KAAKiI,SAAS,CACVgD,aAAcQ,IAR1B,8BAWQzL,KAAKiI,SAAS,CACVhE,eAAgB,IAZ5B,mBAce,GAdf,iD,0HAkBA,sBAAApE,EAAA,sEAEUG,KAAK0e,eAFf,OAGO1e,KAAKJ,MAAMqE,cACVjE,KAAK8L,SAAS9D,QAAQC,SAAS,CAC3BhE,eAAe,IAGnBjE,KAAK8L,SAAS9D,QAAQC,SAAS,CAC3BwB,WAAW,IATvB,gD,4HAcA,sBAAA5J,EAAA,0F,0HAQA,WAAsBnB,GAAtB,iBAAAmB,EAAA,sEACyBG,KAAK6D,OAAO0e,QAAQS,UAAUtkB,GADvD,WAEiC,KADzBujB,EADR,QAEiB1gB,YAFjB,uBAGYggB,EAAiBU,EAAS7f,OAE9BpC,KAAKiI,SAAS,CACVsZ,eAAgBA,IAN5B,mBAQe,GARf,cAUQvhB,KAAKiI,SAAS,CACVhE,eAAgB,IAX5B,mBAae,GAbf,iD,8HAiBA,WAAyBvF,GAAzB,eAAAmB,EAAA,sEACmCG,KAAK6D,OAAOC,SAASoe,eAAexjB,GADvE,OAE8B,IADtB+iB,EADR,QAGQzhB,KAAKiI,SAAS,CACVwZ,mBAAoBA,IAGxBtd,GAA+B,qBAAsB,uCAAwC,SAPrG,gD,mHAWA,WAAcrB,EAAWN,GAAzB,iBAAA3C,EAAA,sEACoBG,KAAK6D,OAAOC,SAASqe,WAAWrf,EAAWN,GAD/D,OAEc,IADN0e,EADR,UAGYlZ,EAAWhI,KAAKJ,MAAM+hB,aAClBnf,GAAS0e,EACjBlhB,KAAKiI,SAAS,CACV0Z,YAAa3Z,KAGjB7D,GAA+B,qBAAsB,0BAA2B,SATxF,gD,qIAaA,WAA8B7B,GAA9B,SAAAzC,EAAA,sEACyBG,KAAK6D,OAAOC,SAASzB,OAAOrC,KAAKJ,MAAM2hB,eAAeiB,SAAUlgB,GADzF,WAEgC,IAFhC,OAEgBf,YAFhB,0CAGe,GAHf,iCAKgB,GALhB,gD,4HASA,WAAuBe,GAAvB,SAAAzC,EAAA,sEACyBG,KAAK6D,OAAOC,SAASmf,WAAWjjB,KAAKJ,MAAM2hB,eAAe7iB,GAAI4D,GADvF,WAEgC,IAFhC,OAEgBf,YAFhB,0CAGe,GAHf,iCAKgB,GALhB,gD,2HASA,WAAsBe,GAAtB,SAAAzC,EAAA,sEACyBG,KAAK6D,OAAOC,SAASof,UAAUljB,KAAKJ,MAAM2hB,eAAe7iB,GAAI4D,EAAQU,OAD9F,WAEgC,IAFhC,OAEgBzB,YAFhB,0CAGe,GAHf,iCAKgB,GALhB,gD,4EASA,WACIvB,KAAK6D,OAAO0e,QAAQJ,WAAWniB,KAAKJ,MAAM2hB,eAAe7iB,GAAI,MAAMsN,MAAK,SAAC5J,GACrE,GAAa,GAAVA,EACC,OAAO,kBAAC,GAAD,CAAS8e,IAAK9e,IAErB+B,GACI,qBACA,0BACA,QACA,WACA,W,oBAKhB,WAAU,IAAD,OACL,OACI,kBAAC,GAAD,CACIoF,IAAKvJ,KAAK8L,SACVhB,YAAa,kBACbC,SAAU,kBACV9K,MAAO,kBACPyK,kBAAmB,WAAK,EAAKqB,kBAAkBC,MAAK,SAAArF,SAIpD,yBAAK5G,UAAU,uBACX,kBAAC,GAAD,CACIkgB,SAAU,CACN,CAAChgB,MAAO,gBACR,CAACA,MAAO,wBACR,CAACA,MAAO,QACR,CAACA,MAAO,iBAGZ,kBAAC,GAAD,CACIiI,aAAclI,KAAKmjB,wBAAwBva,KAAK5I,OAEhD,kBAACkJ,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,EAAGC,GAAI,IAC5B,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IAAI,oDACnB,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIC,UAAQ,EAAClG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WACrC7F,GAAG,oBAAoBD,MAAM,WAAW6K,aAActJ,KAAKJ,MAAM2hB,eAAeiB,YAIxF,kBAACtZ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5BkD,KAAM,KAAM/I,GAAG,oBAAoBD,MAAM,YAAY6K,aAActJ,KAAKJ,MAAM2hB,eAAe7iB,MAGrG,kBAACwK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,CAAY3N,GAAG,4BAAf,WACA,kBAAC4N,EAAA,EAAD,CACIC,QAAQ,2BACR7N,GAAG,iBACHD,MAAM,UACNgJ,KAAM,iBACN6B,aAActJ,KAAKJ,MAAM2hB,eAAe6B,gBAGvCpjB,KAAKJ,MAAMqL,aAAa3C,KAAI,SAACmE,GAAD,OACzB,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO1N,OAAxB,IAAiC0N,EAAOhO,UAE5C,kBAAC+N,EAAA,EAAD,CAAUzN,MAAO,IAAjB,UAIZ,kBAACmK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,CAAY3N,GAAG,4BAAf,QACA,kBAAC4N,EAAA,EAAD,CACIC,QAAQ,2BACR7N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,OACN6K,aAActJ,KAAKJ,MAAM2hB,eAAetF,MAEvCjc,KAAKJ,MAAMsL,UAAU5C,KAAI,SAACmE,GAAD,OACtB,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAAY8B,KAAM,SAC9C3H,GAAG,oBAAoB+I,KAAK,QAAQhJ,MAAM,QAAQ6K,aAActJ,KAAKJ,MAAM2hB,eAAe8B,WAM1G,kBAAC,GAAD,CACInb,aAAclI,KAAKsjB,iBAAiB1a,KAAK5I,OACzC,kBAACkJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACf,KAAM,QAASwC,KAAM,UAC/B0E,UAAQ,EAACzN,GAAG,oBAAoBD,MAAM,iBAAiB6T,YAAY,qBAI3E,kBAACpJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC9F,KAAM,SAAUoB,KAAM,OAAQxC,KAAM,QACvDvG,GAAG,oBAAoBD,MAAM,cAAc6K,aAAa,UAGhE,kBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC9F,KAAM,SAAWoB,KAAM,WAAYxC,KAAM,QAC5DvG,GAAG,oBAAoBD,MAAM,YAAY6K,aAAa,SAIlE,kBAAC,GAAD,CACI2W,SAAU,CACN,CACIhgB,MAAO,SAGX,CACIA,MAAO,UAEX,CACIA,MAAO,SAEX,CACIA,MAAO,SAEX,CACIA,MAAO,WAKf,yBAAKvB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC3D,yBAAKjjB,GAAG,gBAAe,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC5D,yBAAKjjB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC3D,yBAAKjjB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,MAC3D,yBAAKjjB,GAAG,eAAc,kBAAC,GAAD,CAASwiB,IAAKlhB,KAAKJ,MAAM+hB,YAAY,OAE/D,kBAAC,GAAD,CACIiB,KAAM5iB,KAAK8L,SAAS9D,QACpB6a,SAAU,iCACV3a,aAAclI,KAAKujB,gBAAgB3a,KAAK5I,OAExC,kBAACkJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,yBAAK5J,MAAO,CAAC2K,QAAS,SAClB,kBAACoZ,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CACIhc,KAAM,QACNic,IAAK,EACLC,IAAK,GACL5e,aAAW,SACX+D,SAAU,KACd,kBAAC8a,GAAA,EAAD,e,uCAvOhC,gB,GA/D0BlgB,GC7ExB0R,GAAW3G,EAAQ,IAyHVoV,G,kDAtHX,WAAYrkB,GAAO,IAAD,uBACd,cAAMA,IAkDVskB,SAnDkB,sBAmDP,gCAAAjkB,EAAA,sDAGP,IAFIuC,EAAS,GACTd,EAAO,EAAK1B,MAAM2b,QACd1L,EAAE,EAAGA,EAAEvO,EAAKyL,OAAQ8C,IACO,GAA3B9M,SAASzB,EAAKuO,GAAGkU,QACjB3hB,EAAO6H,KAAK3I,EAAKuO,IAGzB,EAAK5H,SAAS,CAAC3G,KAAMc,IARd,2CAjDP,EAAKxC,MAAQ,CACTqE,eAAgB,EAChBuX,QAAS,CACL,CAACvb,MAAO,WAAYwb,MAAO,YAC3B,CAACxb,MAAO,KAAMwb,MAAO,MACrB,CACIxb,MAAO,OAAQwb,MAAO,OACtBI,OAAQ,CACJC,EAAG,kBAACI,GAAA,EAAD,CAAOzd,MAAM,SAASuG,MAAO,UAAWvF,MAAO,CAACgL,MAAO,OAC1DsR,EAAG,kBAACG,GAAA,EAAD,CAAM3X,QAAS,WAAY9F,MAAM,UAAWgB,MAAO,CAACgL,MAAO,IAAKzF,MAAO,WAGlF,CAAC/E,MAAO,YAAawb,MAAO,SAC5B,CAACxb,MAAO,WAAY0F,OAAQ,SAAA+V,GAAO,OAAIA,EAAO,UAAcC,OAAO,EAAG,OAE1EqI,aAAe,GACf3K,KAAM,EACNC,WAAY,GAEE,IAAIO,gBAAgB3a,OAAOwS,SAAS8H,QArBxC,OAsBd,EAAKM,SAAW1Z,IAAMwD,YAtBR,E,0FAyBlB,sBAAA/D,EAAA,sDACOG,KAAKJ,MAAMqE,cACVjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,IAGnBjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,EACfwF,WAAW,IARvB,gD,4HAaA,sBAAA5J,EAAA,sEACUG,KAAK+L,kBADf,OAEInL,YAAW,cAER,KAJP,gD,wFASA,c,oBAeA,WAAU,IAAD,OACL,OACA,oCACI,kBAAC,GAAD,cACI2I,IAAKvJ,KAAK2D,YACV1D,MAAO,WACP6K,YAAa,eACbmZ,UAAW,eACX1W,gBAAiB,sBACjBH,kBAAmB,WACf,EAAKrB,mBAETxB,cAAe,CACX,CACIpK,KAAM,cACNR,KAAO,kBAAC,GAAS8X,IAAV,MACPvS,QAAS,WAAK,EAAKvB,YAAYqE,QAAQ2W,cAAc,kBAAC,GAAD,WAbjE,qBAgBuB,kBAAI,EAAK5S,qBAE5B,kBAAC,GAAD,CACIyP,QAASxb,KAAKJ,MAAM4b,QACpBoD,QAAS,CACL,CACIjf,KAAM,kBAAI,kBAAC,GAASof,MAAV,CAAgBtf,MAAO,CAACuF,MAAO,cACzC8Z,QAAS,UAEb,CACInf,KAAM,kBAAI,kBAAC,GAASmY,OAAV,CAAiBrY,MAAO,CAACuF,MAAO,cAC1C8Z,QAAS,UAEb,CACInf,KAAM,kBAAM,kBAAC,GAASuY,KAAV,CAAezY,MAAO,CAACuF,MAAO,OAC1C8Z,QAAS,OACT5Z,QAAS,SAACmF,EAAO/I,GAAR,OAAiB,EAAKqC,YAAYqE,QAAQ2W,cAAc,kBAAC,GAAD,CAAiB4D,QAASjhB,QAGnG4Y,UAAWla,KAAK6D,OAAOC,SACvBogB,YAAa,SAACxI,GACV,OACI,yBAAK3b,UAAW,wBACZ,kBAAC,GAAD,CAAgBrB,GAAIgd,EAAO,QAAYhd,e,GAzGhDgF,G,mBC2JRygB,I,yDAnJX,WAAY3kB,GAAQ,IAAD,8BAGf,cAAMA,IACDI,MAAQ,CACTmH,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNiE,aAAc,GACd2S,QAAS,IAGb,EAAK9R,SAAW1L,IAAMwD,YAGtB,EAAKuH,aAAe,CAChB,CACI1M,MAAO,SACPM,MAAO,GAEX,CACIN,MAAO,WACPM,MAAO,IAGf,EAAKqM,QAAUhL,IAAMwD,YAzBN,E,4FA4BnB,gCAAA/D,EAAA,sEACsBG,KAAK6D,OAAOX,SAASmI,OAAO,EAAG,KADrD,QAE8B,KADtBC,EADR,QAEc/J,cACFgK,EAAWD,EAAMlJ,OAAOoJ,KACxBC,EAAWF,EAASjD,KAAI,SAAAoD,GACxB,MAAO,CAAC3M,MAAO2M,EAAQhN,GAAID,MAAOiN,EAAQC,aAE9C3L,KAAKiI,SAAS,CACVgD,aAAcQ,KAR1B,gD,uHAgBA,WAAmBnJ,GAAnB,eAAAzC,EAAA,sEACyBG,KAAK6D,OAAOX,SAASb,OAAOrC,KAAKR,MAAMkM,QAAQhN,GAAI4D,GAD5E,YACQ8hB,EADR,QAEiB7iB,YAFjB,uBAGQvB,KAAKoL,QAAQpD,QAAQC,SAAS,CAC1Bf,QAASkd,EAAShiB,SAJ9B,mBAMe,GANf,cASQpC,KAAKoL,QAAQpD,QAAQC,SAAS,CAC1Bb,OAAQgd,EAAS5iB,QAV7B,mBAYe,GAZf,iD,2EAgBA,WAAU,IAAD,OACL,OACI,kBAAC,GAAD,CACI+H,IAAKvJ,KAAK8L,SACVhB,YAAa,kBACbC,SAAU,kBACVtB,WAAW,EACXiB,kBAAmB,kBAAM,EAAKqB,kBAAkBC,SAEhD,kBAAC,GAAD,CACIzC,IAAKvJ,KAAKoL,QACVlD,aAAclI,KAAKkI,aAAaU,KAAK5I,MACrCmI,UAAW,WACPjJ,OAAOwS,SAAS2S,WAGpB,kBAACnb,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,EAAGC,GAAI,IAC5B,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5B7F,GAAG,oBAAoB+I,KAAM,WAC7BhJ,MAAM,OAAO6K,aAActJ,KAAKR,MAAMkM,QAAQC,YAItD,kBAACzC,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CACI/H,QAAS,WACT7F,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,cACN6K,aAActJ,KAAKR,MAAMkM,QAAQrF,MAEhCgY,KAAa/V,KAAI,SAACmE,GAAD,OACd,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CAEI5N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,QACN6K,aAActJ,KAAKR,MAAMkM,QAAQuQ,MAEhCqC,KAAchW,KAAI,SAACmE,GAAD,OACf,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5BkD,KAAM,QAAS/I,GAAG,oBAClBD,MAAM,QAAQ6T,YAAa,iBAAkBhJ,aAActJ,KAAKR,MAAMkM,QAAQ4Y,SAGtF,kBAACpb,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC4C,GAAA,EAAD,CACIjG,WAAS,EAACmG,UAAQ,EAAC5H,QAAS,WAC5BkD,KAAM,OAAQ/I,GAAG,oBAAoB4K,aAActJ,KAAKR,MAAMkM,QAAQ6Y,KACtE9lB,MAAM,eAAe6T,YAAa,iBAG1C,kBAACpJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,kBAAC,KAAD,CACImb,iBAAkBC,WAEpB,kBAAC,GAAD,CAAmBpR,OAAQ,CAAC1L,IAAK3H,KAAKR,MAAMkM,QAAQiF,EAAGsC,IAAKjT,KAAKR,MAAMkM,QAAQmF,c,GAxI/EnN,I,8BC+FfghB,G,kDAvFX,WAAYllB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT2L,SAAU,IAEd,EAAKoZ,YAAcvkB,IAAMwD,YALV,E,4FAOnB,sBAAA/D,EAAA,0F,qHAGA,WAAkByB,GAAlB,eAAAzB,EAAA,6DACIyB,EAAI,UAAgBtB,KAAKR,MAAMkM,QAAQhN,GAD3C,SAEkBsB,KAAK6D,OAAOG,cAAc/B,OAAOX,GAFnD,WAGyB,KADjBsjB,EAFR,QAGSrjB,YAHT,0CAIe,GAJf,cAMQvB,KAAK2kB,YAAY3c,QAAQC,SAAS,CAACb,OAAQxF,KAAKC,UAAU+iB,EAAEpjB,SANpE,mBAOe,GAPf,iD,2EAUA,WACI,OACI,yBAAKzB,UAAW,qBACZ,kBAAC,GAAD,CACIwJ,IAAKvJ,KAAK2kB,YACV9B,SAAU,2BACV3a,aAAclI,KAAK6kB,WAAWjc,KAAK5I,OAG/B,kBAACiM,GAAA,EAAD,CACIC,UAAQ,EAAClG,WAAS,EAACzB,QAAS,WAC5BkD,KAAK,YAAY8E,QAAS,uBAAwB9N,MAAO,UACzD6K,aAActJ,KAAKR,MAAMkM,QAAQC,WAKzC,6BAAK,6BACL,kBAACM,GAAA,EAAD,CACIE,UAAQ,EAACnG,WAAS,EAACzB,QAAS,WAC5BkD,KAAM,SACNhJ,MAAM,SACN4H,KAAM,WAGV,6BAAK,6BACL,kBAAC4F,GAAA,EAAD,CACIE,UAAQ,EAACnG,WAAS,EAACzB,QAAS,WAC5BkD,KAAM,SAAUhJ,MAAM,SACtB4H,KAAK,WAGT,6BAAK,6BACL,kBAAC+F,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,CAAY3N,GAAG,0BAAf,aACA,kBAAC4N,EAAA,EAAD,CACItG,WAAS,EACTyB,KAAK,YACLhJ,MAAO,YACP6K,aAAc,GAEd,kBAACkD,EAAA,EAAD,CAAUzN,MAAO,GAAjB,kBAGR,6BAAK,6BACL,kBAACqN,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,CAAY3N,GAAG,4BAAf,QACA,kBAAC4N,EAAA,EAAD,CACIH,UAAQ,EACRnG,WAAS,EACTyB,KAAM,OACN8E,QAAQ,2BACR9N,MAAM,OACN6K,aAAc,GAEbwb,KAAmBxc,KAAI,SAAAyc,GACpB,OAAa,kBAACvY,EAAA,EAAD,CAAUzN,MAAOgmB,EAAGhmB,OAAQgmB,EAAGtmB,kB,GA7E5CiF,GCiGjBshB,I,OAhGDvW,EAAQ,I,kDAOlB,WAAYjP,GAAO,IAAD,sBACLslB,KAAmBG,QAAO,SAACC,EAASC,GAEzC,OAAQD,EAAO,WAAOC,EAAYpmB,MAAnB,eAA+BomB,EAAY1mB,MAA3C,SAChB,IAJW,OAMd,cAAMe,IAuDV0a,UAAY,CACR7O,OAAM,uCAAG,WAAO9I,EAAQiB,GAAf,eAAA3D,EAAA,sEACc,EAAKgE,OAAOG,cAAcohB,iBAAiB7iB,EAAQiB,EAAO,EAAKhE,MAAMd,IADnF,cACD0D,EADC,yBAEEA,GAFF,2CAAH,yDAtDN,EAAKxC,MAAQ,CACT2b,QAAS,GACTC,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,MACrB,CACIxb,MAAO,OAAUwb,MAAO,OACxBI,OAAQ,CAACC,EAAI,MAAQC,EAAI,UAAYC,EAAI,cAGjD1a,KAAM,GACN8a,cAAe,KACfC,MAAM,GAGV,EAAKhV,aAAejH,IAAMwD,YAtBZ,E,qFAyBlB,WAAkBtC,GAAlB,SAAAzB,EAAA,sEACkBG,KAAK6D,OAAOG,cAAc/B,OAAOX,GADnD,WAEyB,IAFzB,OAESC,YAFT,0CAGe,GAHf,iCAKe,GALf,gD,6HASA,4BAAA1B,EAAA,6DACIG,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BwB,WAAW,IAFnB,SAIkBzJ,KAAKka,UAAU7O,OAAO,EAAG,IAJ3C,OAIQga,EAJR,OAKI5iB,QAAQsf,QACRtf,QAAQC,IAAI2iB,GANhB,gD,qHASA,WAAiB3J,EAASO,GAA1B,iBAAApc,EAAA,+EAEiCG,KAAK6D,OAAOX,SAASb,OAAOqZ,EAAQhd,GAAI,CAACud,KAAMA,IAFhF,gBAIY9X,GAA+B,qBAAsB,4BAA6B,WAC9EmhB,EAAatlB,KAAKJ,MAAM0B,KAAKikB,QAAQ7J,IACrCpZ,EAAUtC,KAAKJ,MAAM0B,MACjBgkB,GAAYrJ,KAAOA,EAC3Bjc,KAAKiI,SAAS,CACV3G,KAAMgB,KATtB,uG,6EA0BA,WACI,OACQ,kBAAC,GAAD,CACIiH,IAAKvJ,KAAK2D,YACVmH,YAAa,cAAeC,SAAU,cAAe9K,MAAO,iBAC5DqN,mBAAoB,kBACpB,yBAAKvN,UAAW,kBAChB,kBAAC,GAAD,CACIyb,QAASxb,KAAKJ,MAAM4b,QACpBtB,UAAWla,KAAKka,UAChBxJ,QAAS,CAAC8I,QAAQ,EAAOgM,SAAS,EAAQC,WAAW,W,GAjFjD/hB,I,UChBtB0R,GAAW3G,EAAQ,IACnBiX,GAAkB,SAAC,GAAmB,IAAlBpkB,EAAiB,EAAjBA,KAAMsZ,EAAW,EAAXA,MAExBY,EAAU,CACV,CAACvb,MAAO,WAAYwb,MAAO,YAC3B,CAACxb,MAAO,KAAMwb,MAAO,MACrB,CACIxb,MAAO,OAAQwb,MAAO,OACtBI,OAAQ,CACJC,EAAG,kBAACI,GAAA,EAAD,CAAMzd,MAAM,SAASuG,MAAO,UAAWvF,MAAO,CAACgL,MAAO,OACzDsR,EAAG,kBAACG,GAAA,EAAD,CAAM3X,QAAS,WAAY9F,MAAM,UAAUgB,MAAO,CAACgL,MAAO,IAAKzF,MAAO,YAIrF,OACI,kBAAC,KAAD,CACIvF,MAAO,CAACmR,OAAQ,QAChB+U,WACI,CACIC,UAAW,SAAApmB,GAAK,OACZ,yBAAKC,MACD,CACI+U,SAAU,WAAY/J,MAAO,OAAQmG,OAAQ,OAC7CiV,SAAU,SAEbrmB,EAAM4I,YAMvBwS,MAAOA,EACP3a,MAAO,GACPub,QAASA,EACTla,KAAMA,EACN2Z,aAAc,CAACtZ,KAAM,CAACmkB,QAAS,CAACC,WAAY,6CAC5CnH,QAAS,CACL,CACIjf,KAAM,kBAAM,kBAAC,GAASof,MAAV,CAAgBtf,MAAO,CAACuF,MAAO,cAC3C8Z,QAAS,UAGb,CACInf,KAAM,kBAAM,kBAAC,GAASmY,OAAV,CAAiBrY,MAAO,CAACuF,MAAO,cAC5C8Z,QAAS,UAEb,SAACpD,GACG,MAAO,CACH/b,KAAM,kBAAM,kBAAC,GAASyf,OAAV,CACR3f,MAAO,CAACuF,MAAO,SACfE,QAAS,WACL,GAAKvB,YAAYqE,QAAQ2W,cACrB,kBAAC,GAAD,CAAgBjgB,GAAIgd,EAAQhd,UAKxCogB,QAAS,aAIrBpO,QAAS,CACL+I,oBAAqB,EACrBC,cAAc,EACd8L,SAAS,MA6IVQ,G,kDAtIX,WAAYxmB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MACD,CACI6J,WAAW,EACXxF,eAAe,EACfmf,eAAgB,CAACS,SAAW,KANrB,E,0FAWnB,sBAAAhkB,EAAA,sEACUG,KAAKimB,mBAAmBjmB,KAAKR,MAAMd,IAD7C,OAEOsB,KAAKJ,MAAMqE,cAEVjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,IAInBjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,EACfwF,WAAW,IAXvB,gD,6HAgBA,WAAyB/K,GAAzB,eAAAmB,EAAA,sEACyBG,KAAK6D,OAAOX,SAAS8f,UAAUtkB,GADxD,QAEiC,KADzBwnB,EADR,QAEiB3kB,YAETvB,KAAKiI,SAAS,CACVhE,eAAe,EACfmf,eAAgB8C,EAAS9jB,SAI7BpC,KAAKiI,SAAS,CACVhE,eAAgB,IAX5B,gD,6HAgBA,sBAAApE,EAAA,sEACUG,KAAK+L,kBADf,gD,0EAKA,WAAU,IAAD,OACL,OACI,kBAAC,GAAD,CACIxC,IAAKvJ,KAAK2D,YACVmH,YAAa,iBACbC,SAAU,qBACV9K,MAAO,kBACPsK,cAAe,CACX,CACIpK,KAAK,QACLR,KAAM,kBAACwmB,GAAA,EAAD,CAAiBzgB,SAAU,WACjCR,QAAS,WACL,EAAKvB,YAAYqE,QAAQ2W,cACrB,kBAAC,GAAD,CAAmBjT,QAAS,EAAK9L,MAAMwjB,oBAInD,CACIjjB,KAAM,OACNR,KAAM,kBAACuY,GAAA,EAAD,CAAMxS,SAAU,WACtBR,QAAS,WACL,EAAKvB,YAAYqE,QAAQ2W,cACrB,kBAAC,GAAD,CAAiBjT,QAAS,EAAK9L,MAAMwjB,qBAKrDhW,kBAAmB,WAAK,EAAKrB,kBAAkBC,SAE/C,kBAAC,GAAD,CACIiU,SAAU,CACN,CAAChgB,MAAO,sBACR,CAACA,MAAO,YACR,CAACA,MAAO,gBACR,CAACA,MAAO,oBAGZ,yBAAKvB,GAAI,oBACL,yBAAKqB,UAAU,2BACX,oCAAY,6BACXC,KAAKJ,MAAMwjB,eAAezX,SAC3B,6BAAK,6BACL,uDAA+B,6BAC9B3L,KAAKJ,MAAMwjB,eAAeS,SAAS9W,OACpC,6BAAK,6BACL,qCAAa,6BACZ/M,KAAKJ,MAAMwjB,eAAekB,MAC3B,6BAAK,6BACL,4CAAoB,6BACnBtkB,KAAKJ,MAAMwjB,eAAenH,MAE/B,yBAAKlc,UAAU,aACX,kBAAC,KAAD,CACIykB,iBAAkBllB,eAElB,kBAAC,KAAD,CACI+d,kBAAmB,CAAC5S,MAAO,OAAQmG,OAAQ,QAC3CyC,OAAQ,CACJ1L,IAAK3H,KAAKJ,MAAMwjB,eAAezS,EAC/BsC,IAAKjT,KAAKJ,MAAMwjB,eAAevS,GAEnCyC,KAAM,IAGN,yCAKhB,oCACI,kBAAC,GAAD,CACIhS,KAAMtB,KAAKJ,MAAMwjB,eAAeS,SAChCjJ,MAAOpD,MAGf,qCACA,oCACI,kBAAC,GAAD,CAAe9Y,GAAIsB,KAAKJ,MAAMwjB,eAAe1kB,Y,GA9HxCgF,G,8BChEvB0R,GAAW3G,EAAQ,IAWSrO,IAAMC,U,IAiZzB+lB,G,kDAtRX,WAAY5mB,GAAO,IAAD,8BACd,cAAMA,IAEDI,MAAQ,CACT2b,QAAS,GACTC,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,MACrB,CAACxb,MAAO,YAAewb,MAAO,YAAaI,OAAQ,CAACC,EAAI,OAASC,EAAI,YAEzEza,KAAM,GACN8a,cAAe,KACfC,MAAM,GAGV,EAAKhV,aAAejH,IAAMwD,YAdZ,E,qFAiBlB,WAAkBtC,GAAlB,SAAAzB,EAAA,sEACkBG,KAAK6D,OAAOG,cAAc/B,OAAOX,GADnD,WAEyB,IAFzB,OAESC,YAFT,0CAGe,GAHf,iCAKe,GALf,gD,6HAUA,sBAAA1B,EAAA,sDAEIG,KAAKqmB,oBAAoBC,KAAsB/nB,QAAQC,KAAKE,IAAIsN,OAChEhM,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BwB,WAAW,IAJnB,gD,qHASA,WAAiBuQ,EAAOc,GAAxB,eAAAjb,EAAA,sEAC8BG,KAAK6D,OAAOP,aAAa+H,OAAO2O,EAAMC,SAAWD,EAAMX,KAAMW,EAAMC,UADjG,OACQsM,EADR,OAEI9jB,QAAQC,IAAI6jB,IACU,IAAlBA,EACAzL,EAAQ,CACJxZ,KAAMilB,EACNlN,KAAMW,EAAMX,KACZC,WAAY,OAGhBnV,GAA+B,qBAAsB,+BAAgC,SACrF2W,EAAQ,CACJxZ,KAAM,GACN+X,KAAMW,EAAMX,KACZC,WAAY,OAdxB,gD,kIAmBA,8BAAAzZ,EAAA,sEACyBG,KAAK6D,OAAOP,aAAa+H,OAAO,EAAG,EAAG,KAD/D,YACQ8E,EADR,QAEgB5O,YAFhB,wBAGYilB,EAAerW,EAAS/N,OAHpC,SAIcokB,EAAaxc,SAAQ,SAACqG,EAAa7N,EAAOgkB,GAC5C,IAAIC,EAAW,CACX/nB,GAAI2R,EAAY3R,GAChB6E,UAAW8M,EAAY9M,WAE3B8M,EAAYqW,SAAS1c,SAAQ,SAAAyG,GACzBgW,EAAShW,EAAMkW,WAAalW,EAAMkF,aAEtC6Q,EAAahkB,GAAUikB,KAZnC,cAcQzmB,KAAKiI,SAAS,CAEVuT,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,MACrB,CAACxb,MAAO,YAAawb,MAAO,YAAaI,OAAQ,CAACC,EAAG,OAAQC,EAAG,WAChE,CAAC9b,MAAO,YAAawb,MAAO,YAAa9V,OAAQ,SAAA+V,GAAO,OAAI,kBAAC,IAAD,CAAMlU,OAAQ,SAAUyX,GAAI,8BAA8BvD,EAAQ5Y,WAAY4Y,EAAQ5Y,aAClJ,CAAC7C,MAAO,YAAawb,MAAO,YAC5B,CAACxb,MAAO,YAAawb,MAAO,kBArB5C,kBAwBe+K,GAxBf,iCA0Be,IA1Bf,iD,iIA8BA,8BAAA3mB,EAAA,sEACyBG,KAAK6D,OAAOP,aAAa+H,OAAOib,KAAsB/nB,QAAQI,OAAOD,GAAI,EAAG,KADrG,YACQyR,EADR,QAEgB5O,YAFhB,wBAGYilB,EAAerW,EAAS/N,OAHpC,SAIcokB,EAAaxc,SAAQ,SAACqG,EAAa7N,EAAOgkB,GAC5C,IAAIC,EAAW,CACX/nB,GAAI2R,EAAY3R,GAChB6E,UAAW8M,EAAY9M,WAE3B8M,EAAYqW,SAAS1c,SAAQ,SAAAyG,GACzBgW,EAAShW,EAAMkW,WAAalW,EAAMkF,aAEtC6Q,EAAahkB,GAAUikB,KAZnC,cAcQzmB,KAAKiI,SAAS,CAEVuT,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,MACrB,CAACxb,MAAO,YAAawb,MAAO,YAAaI,OAAQ,CAACC,EAAG,OAAQC,EAAG,WAChE,CAAC9b,MAAO,YAAawb,MAAO,YAAa9V,OAAQ,SAAA+V,GAAO,OAAI,kBAAC,IAAD,CAAMlU,OAAQ,SAAUyX,GAAI,8BAA8BvD,EAAQ5Y,WAAY4Y,EAAQ5Y,aAClJ,CAAC7C,MAAO,YAAawb,MAAO,YAC5B,CAACxb,MAAO,YAAawb,MAAO,kBArB5C,kBAwBe+K,GAxBf,iCA0Be,IA1Bf,iD,+HA8BA,8BAAA3mB,EAAA,sEACyBG,KAAK6D,OAAOP,aAAa+H,OAAO,GAAI,EAAG,KADhE,cACQ8E,EADR,OAEQqW,EAAerW,EAAS/N,OAFhC,SAGUokB,EAAaxc,SAAQ,SAACqG,EAAa7N,EAAOgkB,GAC5C,IAAIC,EAAW,CACX/nB,GAAI2R,EAAY3R,GAChB6E,UAAW8M,EAAY9M,WAE3B8M,EAAYqW,SAAS1c,SAAQ,SAAAyG,GACzBgW,EAAShW,EAAMkW,WAAalW,EAAMkF,aAEtC6Q,EAAahkB,GAAUikB,KAX/B,cAaIzmB,KAAKiI,SAAS,CACVuT,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,MACrB,CACIxb,MAAO,YAAawb,MAAO,YAC3BI,OAAQ,CAACC,EAAG,OAAQC,EAAG,SAAU6K,GAAK,aAC1C,CAAC3mB,MAAO,YAAawb,MAAO,YAC5B,CAACxb,MAAO,mBAAoBwb,MAAO,qBApB/C,kBAuBW+K,GAvBX,gD,8HA2BA,WAA0BngB,GAA1B,eAAAxG,EAAA,2DAEYwG,EAFZ,cAGaigB,KAAsB/nB,QAAQC,KAAKE,GAHhD,SAMa4nB,KAAsB/nB,QAAQI,OAAOD,GANlD,SASa4nB,KAAsB1nB,OAAOC,SAASH,GATnD,mCAIoCsB,KAAK6mB,uBAJzC,cAIYC,EAJZ,mDAOoC9mB,KAAK+mB,yBAPzC,cAOYD,EAPZ,qDAUoC9mB,KAAKgnB,uBAVzC,QAUYF,EAVZ,eAYkC,kBAApBA,EACN9mB,KAAKiI,SAAS,CACN3G,KAAMwlB,IAId9mB,KAAKiI,SAAS,CAAE3G,KAAM,KAlB9B,iD,2HAsBA,WAAsBgG,GAAtB,SAAAzH,EAAA,sDACIG,KAAKqmB,oBAAoB/e,EAAEE,OAAO9I,IAAIsN,OAD1C,gD,2EAIA,WAAU,IAAD,OACL,OACQ,kBAAC,GAAD,CACIzC,IAAKvJ,KAAK2D,YACVmH,YAAa,mBAAoBC,SAAU,mBAAoB9K,MAAO,eACtEqN,mBAAoB,2BAChB,kBAAC,KAAD,CACIsN,MAAOpD,GACPvX,MAAO,GACP0lB,WAAY,CACRsB,QAAS,SAAAznB,GACL,OACI,yBAAKO,UAAW,eACZ,yBAAKA,UAAW,4BACZ,0BACIA,UAAW,WACXmF,QAAS,SAACoC,GACN,EAAK4f,gBAAgB5f,IAEzB5I,GAAI4nB,KAAsB/nB,QAAQC,KAAKE,IAL3C,qBASA,0BACIqB,UAAW,WACXmF,QAAS,SAACoC,GACN,EAAK4f,gBAAgB5f,IAEzB5I,GAAI4nB,KAAsB/nB,QAAQI,OAAOD,IAL7C,uBASA,0BACIqB,UAAW,WACXmF,QAAS,EAAKgiB,gBAAgBte,KAAK,GACnClK,GAAI4nB,KAAsB1nB,OAAOC,SAASH,IAH9C,sBAQJ,kBAAC,iBAAkBc,KAI/BomB,UAAW,SAAApmB,GAAK,OAAI,yBAChBC,MAAO,CACHomB,SAAU,OACVsB,WAAY,UAAW1c,MAAM,OAAQmG,OAAO,SAAUpR,EAAM4I,YAExEoT,QAASxb,KAAKJ,MAAM4b,QACpBla,KAAMtB,KAAKJ,MAAM0B,KAEjBoP,QAAS,CACLuJ,SAAU,EACVR,oBAAqB,EACrB2N,WAAW,EACXC,UAAU,EACVC,eAAe,GAEnB1I,QAAS,CACL,CACIjf,KAAM,kBAAM,kBAAC,GAAS4nB,UAAV,OACZzI,QAAS,WACT0I,cAAc,EACdtiB,QAAS,SAACmF,KACV1E,OAAQ,SAEZ,SAAC+V,GACG,OAAQA,EAAQO,MACZ,KAAK,EACD,MAAO,CACHtc,KAAM,kBAAK,kBAAC,GAASiY,MAAV,CAAgBnY,MAAO,CAACuF,MAAO,WAC1CE,QAAS,SAACmF,EAAOqR,GAAR,OAAoB,EAAKmD,WAAWnD,EAAS,IACtDoD,QAAS,YAGjB,KAAK,EACD,MAAO,CACHnf,KAAM,kBAAK,kBAAC,GAASof,MAAV,CAAgBtf,MAAO,CAACuF,MAAO,UAC1C8Z,QAAS,cACT5Z,QAAS,SAACmF,EAAOqR,GAAR,OAAoB,EAAKmD,WAAWnD,EAAS,KAE9D,KAAK,EACD,MAAO,CACH/b,KAAM,kBAAK,kBAAC,GAASqf,SAAV,CAAmBvf,MAAO,CAACuF,MAAO,YAC7C8Z,QAAS,kBACT5Z,QAAS,SAACmF,EAAOqR,GAAR,OAAoB,EAAKmD,WAAWnD,EAAS,OAOtE,SAACA,GACG,MAAO,CACH/b,KAAM,kBAAK,kBAAC,IAAD,CAAMsf,GAAI,CACjBC,SAAU,6BAA6BxD,EAAQhd,GAC/C8a,OAAQ,GACR5Z,MAAO,CAAE0B,KAAM,EAAK1B,MAAM2b,QAAQG,EAAQyD,aAC3C,kBAAC,GAASC,OAAV,CAAiB3f,MAAO,CAACuF,MAAO,aACnC8Z,QAAS,oB,GA9QtBpb,G,iDCxEZ+jB,I,gEAzEX,WAAYjoB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT8nB,aAAc,GACd3gB,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNiE,aAAc,GACd2S,QAAS,IAGb,EAAKzS,aAAe,CAChB,CACI1M,MAAO,SACPM,MAAO,GAEX,CACIN,MAAO,WACPM,MAAO,IAGf,EAAKqM,QAAUhL,IAAMwD,YArBN,E,4FAwBnB,sBAAA/D,EAAA,0F,iFAGA,SAAcyH,GACV,IAAIqgB,EAASnnB,IAAIonB,gBAAgBtgB,EAAEE,OAAOqgB,MAAM,IAC5CC,EAAYxiB,SAASC,eAAe,YACxCvF,KAAKiI,SAAS,CACVyf,aAAcC,IAElBG,EAASroB,MAAM2K,QAAU,U,iEAI7B,WAAmB9H,GAAnB,iBAAAzC,EAAA,6DACQie,EAAW9d,KAAKoe,mBACpB9b,EAAO,SAAewb,EAF1B,SAGyB9d,KAAK6D,OAAOX,SAASjB,OAAOK,GAHrD,YAGQsJ,EAHR,QAIiBrK,YAJjB,0CAKe,GALf,cAQQvB,KAAKoL,QAAQpD,QAAQC,SAAS,CAC1Bb,OAAQwE,EAASpK,QAT7B,mBAWe,GAXf,iD,2EAeA,WAAU,IAAD,OACL,OACI,yBAAKzB,UAAW,iBACZ,yBAAKA,UAAW,gBAAiBgoB,IAAK/nB,KAAKJ,MAAM8nB,aAAchpB,GAAI,aACnE,kBAAC0H,EAAA,EAAD,CACIpB,MAAO,UACPT,QAAQ,YACR2F,UAAU,SAHd,cAMI,2BACIpB,SAAU,SAACxB,GAAD,OAAK,EAAK0gB,cAAc1gB,IAClCjB,KAAK,OACL4hB,QAAM,U,GAlEF7nB,IAAMC,YC4InB6nB,G,kDArHX,WAAY1oB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTmH,aAAa,EACbjB,cAAc,EACdkB,MAAM,EACNiE,aAAc,GACd2S,QAAS,IAGb,EAAKzS,aAAe,CAChB,CACI1M,MAAO,SACPM,MAAO,GAEX,CACIN,MAAO,WACPM,MAAO,IAGf,EAAKqM,QAAUhL,IAAMwD,YApBN,E,4FAuBnB,gCAAA/D,EAAA,sEACsBG,KAAK6D,OAAOX,SAASmI,OAAO,EAAG,KADrD,QAE8B,KADtBC,EADR,QAEc/J,cACFgK,EAAWD,EAAMlJ,OAAOoJ,KACxBC,EAAWF,EAASjD,KAAI,SAAAoD,GACxB,MAAO,CAAC3M,MAAO2M,EAAQhN,GAAID,MAAOiN,EAAQC,aAE9C3L,KAAKiI,SAAS,CACVgD,aAAcQ,KAR1B,gD,oFAeA,WAII,IAHA,IAAIoS,EAAQ,2EAERC,EAAW,GACNjO,EAAI,EAAGA,GAFK,EAEgBA,IAAK,CACtC,IAAIkO,EAAeC,KAAKC,MAAMD,KAAKE,SAAWL,EAAM9Q,QACpD+Q,GAAYD,EAAMM,UAAUJ,EAAcA,EAAc,GAE5D,OAAOD,I,iEAGX,WAAmBxb,GAAnB,iBAAAzC,EAAA,6DACQie,EAAW9d,KAAKoe,mBACpBjZ,MAAM2Y,GACNxb,EAAO,SAAewb,EAH1B,SAIyB9d,KAAK6D,OAAOX,SAASjB,OAAOK,GAJrD,YAIQsJ,EAJR,QAKiBrK,YALjB,2CAMe,GANf,eASQvB,KAAKoL,QAAQpD,QAAQC,SAAS,CAC1Bb,OAAQwE,EAASpK,QAV7B,mBAYe,GAZf,iD,2EAgBA,WACI,OACI,yBAAKzB,UAAW,kBACZ,kBAAC,GAAD,CACIwJ,IAAKvJ,KAAKoL,QACVlD,aAAclI,KAAKkI,aAAaU,KAAK5I,OAErC,kBAACkJ,EAAA,EAAD,CAAM9E,WAAS,EAACgF,QAAS,EAAGC,GAAI,IAC5B,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CACI5N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,WACN6K,cAAe,GAEf,kBAACkD,EAAA,EAAD,CAAUzN,OAAQ,GAAlB,mBACCsf,KAAa/V,KAAI,SAACmE,GAAD,OACd,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,kBAAC+C,EAAA,EAAD,CAAapG,WAAS,GAClB,kBAACqG,GAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CAEI5N,GAAG,qBACH+I,KAAM,OACNhJ,MAAM,OACN6K,cAAe,GAEf,kBAACkD,EAAA,EAAD,CAAUzN,OAAQ,GAAlB,wBACCsf,KAAa/V,KAAI,SAACmE,GAAD,OACd,kBAACD,EAAA,EAAD,CAAUzN,MAAO0N,EAAO/N,IAAxB,IAA8B+N,EAAOhO,aAKrD,kBAACyK,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,kBAAC,GAAD,c,GA5GR3F,GCdd0R,GAAW3G,EAAQ,IAInB0Z,G,kDAEF,WAAY3oB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAO,CACRwoB,iBAAmB,mBAAmBD,EAAQzpB,GAC9C2pB,kBAAoB,oBAAoBF,EAAQzpB,GAChD4pB,SAAW,WAAWH,EAAQzpB,IAElCypB,EAAQzpB,KAPO,E,qDAUnB,WAAqB,IAAD,OACZ0pB,EAAmB9iB,SAASC,eAAevF,KAAKJ,MAAMwoB,kBACtDC,EAAoB/iB,SAASC,eAAevF,KAAKJ,MAAMyoB,mBAC3DD,EAAiBje,iBAAiB,cAAc,WAC5Cke,EAAkB5oB,MAAM2K,QAAU,QAClChF,IAASO,OACL,yBAAK5F,UAAW,WAAYrB,GAAI,EAAKkB,MAAM0oB,SAAUP,IAAK,EAAKvoB,MAAM+oB,QACrEF,MAKRD,EAAiBje,iBAAiB,cAAc,WAC5C/E,IAASC,uBAAuBgjB,GAChCA,EAAkB5oB,MAAM2K,QAAU,Y,oBAG1C,WACI,OACI,yBAAKrK,UAAW,mBAAoBrB,GAAIsB,KAAKJ,MAAMwoB,kBAC/C,0BAAMroB,UAAW,UAAjB,WACA,yBAAKA,UAAW,oBAAqBrB,GAAIsB,KAAKJ,MAAMyoB,yB,GAjC9CjoB,IAAMC,WAAtB8nB,GACKzpB,GAAG,E,IAoOC8pB,G,kDA3LX,WAAYhpB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT2b,QAAS,GACTC,QAAS,CACL,CAACvb,MAAO,KAAMwb,MAAO,KAAMG,SAAU,SACrC,CACI3b,MAAO,QAASwb,MAAO,QACvB9V,OAAQ,SAAA+V,GAAO,OAAI,kBAAC,GAAD,CAAS6M,MAAO7M,EAAQ6M,SAC3CE,cAAe,SAAAjpB,GACX,YAAmB2H,IAAhB3H,EAAMT,MAED,6BACI,kBAACkN,GAAA,EAAD,CACIC,UAAQ,EAAClG,WAAS,EAClBsD,aAAc9J,EAAMT,SAQ5B,kBAAC,KAAD,KACI,kBAACyN,EAAA,EAAD,CAAUzN,MAAO,GAAjB,eACA,kBAACyN,EAAA,EAAD,CAAUzN,MAAO,GAAjB,iBAQpB,CACIkB,MAAO,OAAUwb,MAAO,OACxBI,OAAQ,CAAEC,EAAG,cAAeC,EAAG,WAAYC,EAAG,gBAElD,CACI/b,MAAO,OAAUwb,MAAO,OACxBI,OAAQ,CAAEC,EAAG,MAAOC,EAAG,SAAUC,EAAG,YAG5C1a,KAAM,GACN8a,cAAe,KACfC,MAAM,GAEV,EAAKC,UAAYlc,IAAMwD,YA9CR,E,mFAiDnB,WAAetB,GAAf,SAAAzC,EAAA,+EAE6BG,KAAK6D,OAAOJ,IAAIpB,OAAOC,EAAQ5D,GAAI4D,GAFhE,cAGoBf,aACR4C,GAA+B,qBAAsB,cAAe,WACpEnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,iBAExChX,GAA+B,qBAAsB,sBAAuB,SAPxF,gDAUQA,GAA+B,qBAAsB,+BAAgC,SAV7F,yD,mHAcA,sBAAAtE,EAAA,sEAC6BG,KAAK6D,OAAOJ,IAAI4H,SAD7C,cAEIrL,KAAKiI,SAAS,CACVhE,eAAe,EACf3C,KAAM,KAJd,gD,0HASA,sBAAAzB,EAAA,sEACUG,KAAK0oB,UADf,OAEQ1oB,KAAKJ,MAAMqE,cAEXjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,IAGnBjE,KAAK2D,YAAYqE,QAAQC,SAAS,CAC9BhE,eAAe,EACfwF,WAAW,IAVvB,gD,6HAgBA,sBAAA5J,EAAA,sEACUG,KAAK+L,kBADf,gD,4HAKA,sBAAAlM,EAAA,0F,qHAMA,WAAiB6b,EAASO,GAA1B,SAAApc,EAAA,+EAEiCG,KAAK6D,OAAOX,SAASb,OAAOqZ,EAAQhd,GAAI,CAACud,KAAMA,IAFhF,gBAIY9X,GAA+B,qBAAsB,4BAA6B,WAClFnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,iBALpD,uG,yHAYA,WAAkBO,EAASO,GAA3B,SAAApc,EAAA,+EAEiCG,KAAK6D,OAAOX,SAAS4G,OAAO4R,EAAQhd,IAFrE,gBAIYyF,GAA+B,qBAAsB,kBAAmB,WACxEnE,KAAKsc,UAAUtU,QAAQ8R,SAAS9R,QAAQmT,cAAc,KALlE,uG,6EAaA,WAAU,IAAD,OACL,OACI,kBAAC,GAAD,CACI5R,IAAKvJ,KAAK2D,YACVmH,YAAa,cAAeC,SAAU,cAAe9K,MAAO,cAC5DmN,kBAAiB,sBAAE,sBAAAvN,EAAA,sEACT,EAAKkM,kBADI,2CAGnBxB,cAAe,CACX,CACIpK,KAAM,mBACNR,KAAM,kBAAC,GAAS8X,IAAV,MACNvS,QAAS,WAAK,EAAKvB,YAAYqE,QAAQ2W,cAAc,kBAAC,GAAD,WAO7D,kBAAC,GAAD,CACIpV,IAAKvJ,KAAKsc,UACVd,QAASxb,KAAKJ,MAAM4b,QACpB6D,WAAY,SAAChV,EAAOqR,GACfrR,EAAM7C,OAAQ8X,WAAa,WACxB,EAAK9f,MAAM+f,QAAQtV,KAAK,6BAA+ByR,EAAQhd,GAAI,CAAGkB,MAAO,CAAC0B,KAAM,EAAK1B,MAAM2b,QAAQG,EAAQyD,eAIvHjF,UAAWla,KAAK6D,OAAOJ,IACvB8V,YAAa,WACbqF,QAAS,CACL,CACIjf,KAAM,kBAAI,kBAAC,GAASgpB,QAAV,OACV7J,QAAS,UACT5Z,QAAS,SAACmF,EAAOqR,GACb,EAAK/X,YAAYqE,QAAQ2W,cACrB,kBAAC,KAAD,CAAgBtY,KAAK,SAASuiB,kBAAgB,EAACC,aAAW,EAACC,IAAI,4BAM/ElN,SAAU,CACNmN,SAAU,SAAAzmB,GAAO,OACb,IAAIuY,SAAQ,SAACC,EAASC,QAG1ByB,YAAa,SAACla,EAASma,GAAV,OAAsB,EAAKuM,SAAS1mB,IACjDqa,YAAa,SAAAF,GAAO,OAChB,IAAI5B,SAAQ,SAACC,EAASC,GAClB,EAAK6B,YAAYH,GAASzQ,MAAK,SAAArF,GAAC,OAAImU,mB,GA/KlDpX,GCnDZ0R,GAAW3G,EAAQ,IAoDVwa,GAjDS,CACpB,CACEC,KAAM,uBACNzhB,KAAM,YACN9H,KAAMyV,GAAS+T,UACfjf,UAAWmL,IAGb,CACA6T,KAAM,sBACNzhB,KAAM,WACN9H,KAAMyV,GAASwB,KACf1M,UAAW2Z,IAGX,CACIqF,KAAM,qBACNzhB,KAAM,UACN2hB,QAAS,WACTzpB,KAAMyV,GAASiU,eACfnf,UAAWkR,GACXkO,OAAQ,UAEZ,CACIJ,KAAM,sBACNzhB,KAAM,WACN9H,KAAMyV,GAASmU,qBACfrf,UAAWqU,IAEf,CACI2K,KAAM,gCACNM,cAAc,EACdtf,UAAW8b,GACXsD,OAAQ,UAEZ,CACIJ,KAAM,0BACNzhB,KAAM,eACN9H,KAAMyV,GAASqU,QACfvf,UAAWkc,IAEf,CACI8C,KAAM,iBACNzhB,KAAM,cACN9H,KAAMyV,GAASsU,eACfxf,UAAWse,K,ICnBJmB,G,kDAfX,WAAYnqB,GAAO,uCACTA,G,qDAGV,c,oBAGA,WACI,OACI,yBAAKO,UAAW,UACA6pB,GA3BbthB,KAAI,SAACuhB,EAAMrnB,GACd,QAAyB2E,IAAtB0iB,EAAKL,aACJ,OACI,kBAAC,IAAD,CAASzpB,UAAW,WAAYkf,GAAI4K,EAAKX,KAAMtmB,IAAKJ,GAChD,yBAAKzC,UAAW,WAAY,kBAAC8pB,EAAKlqB,KAAN,CAAWF,MAAO,CAACiG,SAAU,eACzD,0BAAM3F,UAAW,WAAY8pB,EAAKpiB,e,GAUrCrH,IAAMC,W,8BCDZypB,G,kDAdX,WAAYtqB,GAAO,uCACTA,G,0CAEV,WACI,OACI,kBAAC,IAAMM,SAAP,KACI,yBAAKC,UAAW,OAAQgoB,IAAKgC,Y,GAR1B3pB,IAAMC,W,wCCOnB+U,GAAW3G,EAAQ,IAuEVub,G,kDAlEX,WAAYxqB,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAO,CACRqqB,YAAa,GAHH,E,qDAOlB,c,oBAIA,WACIhrB,eAAairB,WAAW,aACxBjrB,eAAairB,WAAW,cACxBhrB,OAAOwS,SAASyY,OAAO,Y,oBAE3B,WAAS,IAAD,OACJ,OACI,kBAAC,IAAMrqB,SAAP,KACI,yBAAKC,UAAU,YACX,kBAACqqB,GAAA,EAAD,CACI/N,KAAMrc,KAAKJ,MAAMqqB,WACjB1M,QAAS,cAKT,kBAAC8M,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAmB5rB,GAAG,4BAAtB,2CAIJ,kBAAC6rB,GAAA,EAAD,KACI,kBAAC,IAAD,CAAQrlB,QAASlF,KAAKwqB,QAAtB,WACA,kBAAC,IAAD,CAAQtlB,QAAS,WACT,EAAK+C,SAAS,CACVgiB,YAAa,MAFzB,WAUR,yBAAKlqB,UAAU,iBACX,kBAAC,GAAD,OAEJ,yBAAKA,UAAU,mBACX,kBAAC,GAAD,OAGJ,0BAAMA,UAAW,eAAgBmF,QAC7B,WACI,EAAK+C,SAAS,CACVgiB,YAAa,MAGrB,kBAAC,GAASQ,eAAV,MACA,uBAAG1qB,UAAW,WAAd,kB,GA5DDK,IAAMC,W,WCyBdqqB,G,4JAXX,WACI,OACI,kBAAC,IAAM5qB,SAAP,KACQ,yBAAKC,UAAU,YAAYrB,GAAI,cAxB5BkrB,EAyBeA,GAvB9B,kBAAC,IAAD,KACKA,EAAOthB,KAAI,SAACqiB,EAAO/nB,GAChB,YAA2BuE,IAAvBwjB,EAAMnB,eAAwD,IAAxBmB,EAAMnB,aACpC,kBAAC,IAAD,CAAO5mB,IAAKA,EAAKgoB,OAAK,EAAC1B,KAAMyB,EAAMzB,KAAOhf,UAAWygB,EAAMzgB,YAG/D,kBAAC,IAAD,CAAOtH,IAAKA,EAAKgoB,OAAK,EAAC1B,KAAMyB,EAAMzB,KAAMvjB,OAAQ,SAACnG,GAC9C,OAAQ,kBAACmrB,EAAMzgB,UAAP,CAAiBxL,GAAIc,EAAMqrB,MAAMC,OAAOpsB,WAMhE,kBAAC,IAAD,CAAUqsB,KAAM,IAAK9L,GAAI,6BAfrC,IAAuB2K,M,GAoBCxpB,IAAMC,WCIf2qB,I,OC/BC9rB,OAAOC,aDKP,CAEZ8rB,MAAM,WAAD,4BAAE,WAAO/oB,GAAP,mBAAArC,EAAA,sEAEOiB,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BW,KAAMC,KAAKC,UAAUK,IAL1B,SAOwBf,MAAM/B,SAAO,mBAAoB0B,GAPzD,cAOOM,EAPP,gBAQoBA,EAASC,OAR7B,cAQOC,EARP,yBASQA,GATR,2DAWQ,CAACC,aAAa,EAAOC,MAAO,oCAXpC,0DAAF,mDAAC,GAeN0pB,SAAS,WAAD,4BAAE,4BAAArrB,EAAA,+EAEiBS,EAAeC,IAAInB,SAAO,YAF3C,cAEEgD,EAFF,yBAGKA,GAHL,yDAKK,CAACb,aAAc,EAAOC,MAAM,EAAD,KALhC,yDAAF,kDAAC,KErBP2pB,GACY,WAEV,OAAoB,MADHlsB,eAAa8E,QAAQ,c,wCCgB9C,SAASqnB,GAAU5rB,GACf,OACI,gBAAC6rB,GAAA,EAAD,eAAY9mB,QAAQ,QAAQS,MAAM,iBAAiBsmB,MAAM,UAAa9rB,GACjE,kBACD,gBAAC,IAAD,CAAMwF,MAAM,UAAUumB,KAAK,4BAA3B,aAEQ,KACP,IAAI5b,MAAO6b,cACX,KAIb,SAASC,GAAclH,EAAMmH,EAAOjrB,GAChCxB,eAAa0sB,QAAQ,YAAapH,GAClCtlB,eAAa0sB,QAAQ,QAASD,GAC9BzsB,eAAa0sB,QAAQ,aAAclrB,GACnC2E,IAASO,OACL,gBAACjB,EAAA,EAAD,CAAQJ,SAAS,UAAUiZ,QAAS,cAApC,iCACAjY,SAASC,eAAe,oBACxB3E,YAAW,WAAY1B,OAAOwS,SAASyY,OAAO,gBAAiB,MAGxD,SAASyB,KACpB,IAAM1jB,EAAY,uCAAG,WAAOmC,GAAP,qBAAAxK,EAAA,6DACjBwK,EAAMtC,iBACAzG,EAAO,IAAIuqB,SAASxhB,EAAMyhB,eAE5BvH,EAAOjjB,EAAKyqB,IAAI,SAChBjO,EAAWxc,EAAKyqB,IAAI,YALP,SAMOf,GAAOC,MAAM,CAAC1G,OAAOzG,aAN5B,YAOE3W,KADf6kB,EANa,SAQkB,IAA5BA,EAAYzqB,YACXkqB,GAAclH,EAAMyH,EAAYN,MAAOM,EAAYvrB,OAEnD2E,IAASO,OACL,gBAACjB,EAAA,EAAD,CAAQJ,SAAS,QAAQiZ,QAAS,cAAWyO,EAAYxqB,OACzD8D,SAASC,eAAe,oBAGhCH,IAASO,OACL,gBAACjB,EAAA,EAAD,CAAQJ,SAAS,QAAQiZ,QAAS,cAAlC,0BACAjY,SAASC,eAAe,oBAlBf,2CAAH,sDAwBlB,OAFA4lB,MAAgCjsB,OAAOwS,SAASyY,OAAO,wBAG/C,2BAASpqB,UAAW,aAChB,uBAAKA,UAAU,WAAWN,MAAO,CAC7BwsB,gBAAiB,0CACjBC,iBAAkB,YAClBC,eAAgB,QAChBC,mBAAoB,YAGxB,uBAAKrsB,UAAU,aACX,uBAAKA,UAAU,kBAAkBrB,GAAG,oBAIpC,gBAAC2tB,GAAA,EAAD,CACI1nB,GAAI,CACA2nB,GAAI,EACJC,GAAI,EACJniB,QAAS,OACToiB,cAAe,SACfxf,WAAY,SACZtN,gBAAiB,SAPzB,UAWI,gBAAC2sB,GAAA,EAAD,CAAKniB,UAAU,OAAOuiB,YAAU,EAACxjB,SAAUf,EAAcvD,GAAI,CAAE+nB,GAAI,IAC/D,gBAACzgB,GAAA,EAAD,CACIyR,OAAO,SACPvR,UAAQ,EACRnG,WAAS,EACTtH,GAAG,QACHD,MAAM,gBACNgJ,KAAK,QACL2J,aAAa,QACbub,WAAS,IAEb,gBAAC1gB,GAAA,EAAD,CACIyR,OAAO,SACPvR,UAAQ,EACRnG,WAAS,EACTyB,KAAK,WACLhJ,MAAM,WACN4H,KAAK,WACL3H,GAAG,WACH0S,aAAa,qBAEjB,gBAACwb,GAAA,EAAD,CACIC,QAAS,gBAACC,GAAA,EAAD,CAAU/tB,MAAM,WAAWiG,MAAM,YAC1CvG,MAAM,gBAEV,gBAAC,IAAD,CACIuG,MAAO,UACPqB,KAAK,SACLL,WAAS,EACTzB,QAAQ,YACRI,GAAI,CAAE+nB,GAAI,EAAG9nB,GAAI,IALrB,WASA,gBAACsE,EAAA,EAAD,CAAM9E,WAAS,GACX,gBAAC8E,EAAA,EAAD,CAAMC,MAAI,EAACE,IAAE,GACT,gBAAC,IAAD,CAAMkiB,KAAK,IAAIhnB,QAAQ,SAAvB,qBAIJ,gBAAC2E,EAAA,EAAD,CAAMC,MAAI,GACN,gBAAC,IAAD,CAAMoiB,KAAK,IAAIhnB,QAAQ,SAClB,oCAKb,gBAAC6mB,GAAD,CAAWzmB,GAAI,CAAE+nB,GAAI,S,8BCzI3CK,GAAe,CACjBC,MAAO,GACP7jB,KAAM,ICDK8jB,gBAAgB,CAC3BC,UDGW,WAAwC,IAA/BttB,EAA8B,uDAAtBmtB,GAAcloB,EAAQ,uCAClD,OAAQA,EAAOwB,MACX,IETgB,WFUZ,OAAO,6BACAzG,GADP,IAEIutB,OAAQtoB,EAAOuoB,UAGvB,IEdgB,WFeZ,OAAO,6BACAxtB,GADP,IAEIytB,SAAUxoB,EAAOuoB,UAGzB,QACI,OAAOxtB,MCdN0tB,GAAoB,SAAA1tB,GAAK,MAAK,CACvCutB,OAAQvtB,EAAMstB,UAAUC,OACxBE,SAAWztB,EAAMstB,UAAUG,W,UEEzBE,G,kDACF,WAAY/tB,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAO,CACRutB,QAAO,GAHI,E,4FAMnB,sBAAAttB,EAAA,0F,8EAMA,SAAWwtB,EAAUF,GACjB,OAAGE,EACc,GAAVF,EAGQ,kBAAC,KAAD,CAAQ5oB,QAAS,SAAUD,SAAS,QAAQ7E,MAAO,CAACiG,SAAU,QAASyW,WAAY,SAAnF,+BAHX,EAMO,kBAAC,KAAD,CAAQ5X,QAAS,SAAUD,SAAS,QAAQ7E,MAAO,CAACiG,SAAU,QAASyW,WAAY,SAAnF,iC,oBAMf,WAMQ,OACI,yBAAKpc,UAAW,QACZ,yBAAKA,UAAU,YAAYrB,GAAI,aAC1BsB,KAAKwtB,WAAWxtB,KAAKR,MAAM6tB,SAAUrtB,KAAKR,MAAM2tB,SAErD,yBAAKptB,UAAU,WACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmpB,KAAM,SAAUhf,UAAW0hB,KAClC,kBAAC,IAAD,CAAO1C,KAAM,cACT,kBAAC,GAAD,MACA,kBAAC,GAAD,e,GA5CjB9oB,IAAMC,WAwDVotB,eAAQH,GAAmB,GAA3BG,CAA+BF,IC9BxCG,G,kDACF,WAAYluB,GAAQ,IAAD,sBACf,cAAMA,GAEUP,eAAa8E,QAAQ,aACpB9E,eAAa8E,QAAQ,cAJvB,OAKfonB,MAA0CjsB,OAAOwS,SAASyY,OAAO,UALlD,E,qDAOnB,c,uEAIA,4BAAAtqB,EAAA,sDACQ8tB,EAAO3tB,KAAKR,MAAMouB,YACtBC,aAAY,WAAKF,MAAS,KAF9B,gD,0EAKA,WAGA,OACI,kBAAC,IAAM7tB,SAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOopB,KAAM,KACT,kBAAC,GAAD,c,GAzBN9oB,IAAMC,WAkCTotB,eAAQH,GAAoB,CAACM,YAvDxB,yDAAM,WAAME,GAAN,eAAAjuB,EAAA,sEACDmrB,GAAOE,WADN,cAET3pB,YACTusB,EAAS,CACLznB,KFrBY,WEsBZ+mB,SAAS,IAGbU,EAAS,CACLznB,KF1BY,WE2BZ+mB,SAAS,IAGbC,EAAWhZ,UAAU0Z,OAEzBD,EAAS,CACLznB,KFhCgB,WEiChB+mB,QAASC,IAjBS,2CAAN,wDAuDLI,CAA2CC,IC5DtCM,QACW,cAA7B9uB,OAAOwS,SAASuc,UAEe,UAA7B/uB,OAAOwS,SAASuc,UAEhB/uB,OAAOwS,SAASuc,SAASpD,MACvB,2D,ICZAqD,GAAa,C,OAACC,GAULC,GARIC,aACfC,GALiB,GAOjBC,aACIC,KAAe,WAAf,EAAmBN,MCD3B9oB,IAASO,OAEH,kBAAC,IAAM8oB,WAAP,KACI,kBAAC,IAAD,CAAUC,MAAON,IACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOlF,KAAM,UACT,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAM,cACT,kBAAC,GAAD,WAOxB5jB,SAASC,eAAe,SFuGpB,kBAAmB8O,WACrBA,UAAUsa,cAAcC,MACrB5iB,MAAK,SAAA6iB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvtB,GACLiB,QAAQjB,MAAMA,EAAMwtB,c","file":"static/js/main.29c0b887.chunk.js","sourcesContent":["const TransactionOperations = {\n    Station : {\n        rent : { label: \"Rent\", id: \"0\"},\n        return : { label: \"Return\", id: \"1\"}\n        },\n    wallet: {\n        recharge: {label: \"Recharge\", id: \"10\"},\n        payment: {label: \"payment\", id: \"11\"},\n    }\n\n}\n\n\nmodule.exports = TransactionOperations","\n\nconst PartnerTypes = [\n    {\n        label: \"Payed\",\n        id: \"0\"\n    },\n    {\n        label: \"Free\",\n        id: \"1\"\n    },\n]\n\n\nmodule.exports = PartnerTypes","const RechargeCodeStates = [\n    {\n        label: \"New\",\n        value: \"0\"\n    },\n    {\n        label: \"Ready to print\",\n        value: \"1\"\n    },\n]\n\n\nmodule.exports = RechargeCodeStates","const ClientStats = [\n    {\n        label: \"New\",\n        value: \"0\"\n    },\n\n    {\n        label: \"Active\",\n        value: \"1\"\n    },\n    {\n        label: \"Frozen\",\n        value: \"2\"\n    },\n]\n\n\nmodule.exports = {ClientStats}","\n\nconst PartnerStates = [\n    {\n        label: \"Active\",\n        id: \"0\"\n    },\n    {\n        label: \"Frozen\",\n        id: \"1\"\n    },\n]\n\n\nmodule.exports = PartnerStates","const  SERVER = \"http://164.132.59.129:8080/\";\n//const  SERVER = \"http://localhost:8080/\";\nconst ACTOR = \"Admin/\"\nconst LOCALSTORAGE = window.localStorage;\nconst MAP_API_KEY = 'AIzaSyBoTIuXI-Z7O3XPL1Ysx8cyloLmv2Ls2-M'\n\n\nmodule.exports = {SERVER, ACTOR, LOCALSTORAGE, MAP_API_KEY};","module.exports = __webpack_public_path__ + \"static/media/logo.2673b52f.svg\";","import React from 'react';\nimport \"./StatBox.css\"\n\nclass StatBox extends React.Component {\n\n    constructor(props){\n        super(props);\n        let style = {\n            backgroundColor : this.props.backgroundColor,\n        }\n        let icon = this.props.icon\n        this.state = {\n            style: style,\n            icon: icon,\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <section className={\"StatBox\"} >\n                    <div className=\"IconHolder\" style={this.state.style}>\n                        {this.props.icon}\n                    </div>\n                    <div className=\"statsHolder\">\n                        <span className={\"title\"}>{this.props.title}</span>\n                        <span className={\"number\"}>{this.props.number}</span>\n                    </div>\n                    <span className={\"alt\"}>{this.props.text}</span>\n                </section>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default StatBox","const RequestHandler = {\n    async GET(URL, token) {\n        const controller = new AbortController();\n        setTimeout(() => controller.abort(), 0);\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json', authorization: 'Bearer ' + token},\n            authorization: 'Bearer ' + token,\n            timeout: 5\n        };\n        try{\n            const response = await fetch(URL, requestOptions);\n            const data = await response.json();\n            return data\n        }catch (error){\n            return {finalResult: false, error: error}\n        }\n    },\n\n\n    async  POST(URL, DATA, token) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json', authorization: 'Bearer ' + token},\n            body: JSON.stringify(DATA)\n        };\n        try{\n            const response = await fetch(URL, requestOptions);\n            const data = await response.json();\n            return data\n        }catch (error){\n            return {finalResult: false, error: error}\n        }\n\n    }\n}\n\n\n\n\nexport default RequestHandler","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport React from \"react\";\n\n\nclass _Model {\n\n    constructor(adminToken, MODEL) {\n\n        this.adminToken =  adminToken\n        this.MAIN_ENTRY = SERVER+ACTOR+MODEL\n    }\n\n    create = async(postData) =>{\n        const URL = this.MAIN_ENTRY+\"create\"\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n\n    }\n\n    update = async(id, newData) =>{\n        const URL = this.MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, newData, this.adminToken)\n        return result\n    }\n\n    async getAll(offset, index) {\n\n        try{\n            const URL = this.MAIN_ENTRY+\"getAll/\"+offset+\"/\"+index\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            console.log(error)\n            return {finalResult: false}\n        }\n    }\n\n    async getOnById(id) {\n        try {\n            const URL = this.MAIN_ENTRY+\"getOne/\"+id\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }\n        catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async searchBy(attribute, key) {\n        try{\n            const URL = this.MAIN_ENTRY+\"searchBy/\"+attribute+\"/\"+key\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async count() {\n        try{\n            const URL = this.MAIN_ENTRY+\"count\"\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async countWhere(attribute, value) {\n        try{\n            const URL = this.MAIN_ENTRY+\"count/\"+attribute+\"/\"+value\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n\n    async delete(id) {\n        try{\n            const URL = this.MAIN_ENTRY+\"delete/\"+id\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n\n        }catch (error){\n            return {finalResult: false}\n        }\n    }\n}\n\nexport default _Model;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Station/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass StationModel extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    async getOneByPublicId(id) {\n        const URL = MAIN_ENTRY+\"getOneByPublicId/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n    async getOneRealTime(id) {\n        const URL = MAIN_ENTRY+\"getRealTimeInfo/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        if(result.finalResult){\n            return result.data\n        }else {\n            return false\n        }\n    }\n\n    async rentPowerBank(id){\n        let URL  = MAIN_ENTRY+\"rentPowerBank/\"+id\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result.finalResult\n    }\n\n    async queryAPNNs(stationId, index){\n        index = parseInt(index)\n        index = \"0\"+index\n        let URL  = MAIN_ENTRY+\"queryAPNNs/\"+stationId+\"/\"+index\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        if(result.finalResult){\n            return  result.data\n        }else {\n            return false\n        }\n    }\n\n    async setAddress(stationId, data){\n        let URL  = MAIN_ENTRY+\"setAddress/\"+stationId\n\n        let result = await RequestHandler.POST(URL, data, this.adminToken)\n        console.log(result)\n        return result\n    }\n\n    async setVolume(stationId, level){\n        level = parseInt(level)\n        let URL  = MAIN_ENTRY+\"setVolume/\"+stationId+\"/\"+level\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n\n}\n\n\nexport default StationModel;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Client/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Client extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    create = async(postData) =>{\n        const URL = MAIN_ENTRY+\"getAll/0/99999\"\n        let result = await RequestHandler.POST(URL, postData)\n        if(result.finalResult){\n            return result.result\n        }else {\n            return result\n        }\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport default _Client;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Partner/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Partner extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n    \n    update = async(id, postData) =>{\n        const URL = MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n    }\n\n}\n\nexport default _Partner;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Setting/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Setting extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n    \n    update = async(id, postData) =>{\n        const URL = MAIN_ENTRY+\"update/\"+id\n        let result = await RequestHandler.POST(URL, postData, this.adminToken)\n        return result\n    }\n\n}\n\nexport default _Setting;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\nimport _Model from \"./_Model\";\nconst MODEL = \"RechargeCode/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass RechargeCode extends  _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n    async getAllForPartner(offset, index, partnerId) {\n        try{\n            const URL = this.MAIN_ENTRY+\"getAll/\"+offset+\"/\"+index+\"/\"+partnerId\n            let result = await RequestHandler.GET(URL, this.adminToken)\n            return result\n        }catch (error){\n            console.log(error)\n            return {finalResult: false}\n        }\n    }\n\n}\n\nexport default RechargeCode;","import RequestHandler from \"../Apis/RequestHandler\";\nimport React from \"react\";\nimport _Model from \"./_Model\";\nconst MODEL = \"RentTransactions/\"\n\nclass _Transaction extends _Model{\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n    }\n\n    async getAll(operation, offset, limit) {\n        const URL = this.MAIN_ENTRY+\"getAll/\"+operation+\"/\"+offset+\"/\"+limit\n        let result = await RequestHandler.GET(URL, this.adminToken)\n        return result\n    }\n}\n\nexport default _Transaction;","import {SERVER, ACTOR} from \"../Apis/GlobalConfig\";\nimport _Model from \"./_Model\";\nconst MODEL = \"Ads/\"\nconst MAIN_ENTRY = SERVER+ACTOR+MODEL\nclass _Ad extends _Model{\n\n    constructor(adminToken) {\n        super(adminToken, MODEL)\n        this.adminToken =  adminToken\n    }\n\n\n    async getOnById(id) {\n        const URL = MAIN_ENTRY+\"getOne/\"+id\n        const requestOptions = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        const response = await fetch(URL, requestOptions);\n        const data = await response.json();\n        if (data.finalResult == true) {\n            return data.result;\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport default _Ad;","import React from \"react\";\nimport _Station from \"../Models/_Station\";\nimport _Client from \"../Models/_Clients\";\nimport _Partner from \"../Models/_Partner\";\nimport _Setting from \"../Models/_Setting\";\nimport _RechargeCode from \"../Models/_RechareCode\";\nimport {LOCALSTORAGE} from \"../Apis/GlobalConfig\";\nimport _Transaction from \"../Models/_Transaction\";\nimport _Ad from \"../Models/_Ad\";\n\n\n\nclass YitComponent extends  React.Component{\n    constructor(props) {\n        super(props);\n        this.currentPage = React.createRef()\n\n        this.MODELS = {\n            _Station: new _Station(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Client:  new _Client(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Setting: new _Setting(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Partner: new _Partner(LOCALSTORAGE.getItem(\"adminToken\")),\n            _RechargeCode: new _RechargeCode(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Transaction : new _Transaction(LOCALSTORAGE.getItem(\"adminToken\")),\n            _Ad : new _Ad(LOCALSTORAGE.getItem(\"adminToken\"))\n        }\n        this.state = {\n            failedLoading: true\n        }\n    }\n\n    checkLoadStatus(flag){\n\n    }\n\n\n}\n\nexport default YitComponent","\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\n\nimport Alert from \"@mui/material/Alert\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {Close} from \"@mui/icons-material\";\nfunction close(container, alert){\n    ReactDOM.unmountComponentAtNode(document.getElementById(container));\n}\nexport const Notifications = {\n    drawActionResult (container, Msg, severity, variant,  duration)  {\n        if(typeof  Msg !== \"string\"){\n            Msg = \"Critique Error, check console\"\n        }\n        const View = ({}) => {\n\n            return (\n                <>\n                    <Alert\n                        id={\"alert\"}\n                        severity={severity}\n                        sx={{mb: 2}}\n                        action={\n                            <IconButton\n                                aria-label=\"close\"\n                                color=\"inherit\"\n                                size=\"small\"\n                                onClick={() => {\n                                    close(container, \"\")\n                                }}\n                            >\n                                <Close fontSize=\"inherit\" />\n                            </IconButton>\n                        }\n                    >\n                        {Msg}\n                    </Alert>\n                </>\n\n            )\n        }\n        try {\n            ReactDOM.render(<View/>, document.getElementById(container))\n            if(duration != null){\n                setTimeout(() => {\n                    ReactDOM.unmountComponentAtNode(document.getElementById(container));\n                }, duration)\n            }\n\n        } catch (err) {\n            console.log(\"could not render teh notifications, check again\")\n            console.log(err)\n        }\n    }\n}\n\n","\nimport React from 'react';\n\n\nimport YitComponent from \"../../Structures/YitComponent\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\n\nclass DynamicSubmitButton extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            isSubmitting : false\n        }\n    }\n\n\n    async componentDidMount() {\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n    render() {\n        return (\n            drawSubmit(this.state.isSubmitting)\n        )\n    }\n}\n\nexport default DynamicSubmitButton","import React from \"react\";\nimport \"./YitForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport DynamicSubmitButton from \"../DynamicSubmitButton/DynamicSubmitButton\";\n\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\nconst DoneMsg = () =>{\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n    </div>)\n}\n\nclass YitForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            newInfo: {},\n            doneMsg : this.props.doneMsg === undefined ? \"Operation success\" : \"Operation failed\",\n            errMsg : this.props.errMsg !== undefined ? this.props.errMsg : \"Operation failed\"\n        }\n        this.submitButton = React.createRef()\n\n    }\n\n    changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.value;\n        if(e.target.type === \"number\"){\n            val = parseInt(val)\n        }\n        this.state.newInfo[nam]= val\n    }\n\n    onDragEnd(lat, long){\n        let newLat = lat,\n            newLng = long;\n        this.state.newInfo[\"x\"]= newLat\n        this.state.newInfo[\"y\"]= newLng\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault()\n        this.submitButton.current.setState({\n            isSubmitting: true\n        })\n        this.setState({\n            isSubmitting: true\n        })\n\n        if(await this.props.handleSubmit(this.state.newInfo) === true){\n\n            this.setState({isSubmitted: true})\n            Notifications.drawActionResult(\"pagesNotifications\", this.state.doneMsg, \"success\")\n            if(this.props.onSuccess !== undefined){\n                this.props.onSuccess()\n            }\n            setTimeout(()=>{\n                this.setState({\n                    isSubmitted: false,\n                    isSubmitting: false\n                })\n            }, 2000)\n\n        }else {\n            this.setState({\n                isSubmitted: false,\n                isSubmitting: false\n            })\n            Notifications.drawActionResult(\"pagesNotifications\", this.state.errMsg, \"error\")\n            this.submitButton.current.setState({\n                isSubmitting: false\n            })\n        }\n    }\n\n    recursiveCloneChildren(children) {\n\n        return React.Children.map(children, child => {\n\n            if(!React.isValidElement(child)) return child;\n            if(child.type.displayName === \"YitLocationPicker\"){\n\n                let childProps = {onDragEnd: this.onDragEnd.bind(this)};\n                return React.cloneElement(child, childProps);\n            }else {\n                let  childProps = {onChange: this.changeHolder.bind(this)};\n                childProps.children = this.recursiveCloneChildren(child.props.children);\n                return React.cloneElement(child, childProps);\n            }\n\n\n\n        })\n    }\n\n    async componentDidMount() {\n\n    }\n\n    render() {\n        if(!this.state.isSubmitted){\n            return (\n                <div className={\"YitForm\"} id={\"YitForm\"}>\n                    <form  onSubmit={this.handleSubmit.bind(this)} id={\"myForm\"} >\n                        {this.recursiveCloneChildren(this.props.children)}\n                        <br></br>\n                        <br></br>\n                        <Grid container item spacing={2}>\n                            <Grid item xs={4}>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Button\n                                    variant={\"outlined\"}\n                                    fullWidth\n                                    color=\"secondary\"\n                                    id=\"outlined-error-helper-text\"\n                                    label=\"Password\"\n                                    defaultValue={\"APN.APN\"}\n                                    type={\"reset\"}\n                                >\n                                    Reset\n                                </Button>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <DynamicSubmitButton ref={this.submitButton}></DynamicSubmitButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            )\n        }else{\n            return (\n                <div className={\"YitForm\"} id={\"YitForm\"}>\n                    <DoneMsg/>\n                </div>\n            )\n        }\n\n    }\n}\nexport default YitForm","import React from 'react';\nimport \"./YitFragment.css\"\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ReactDOM from \"react-dom\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport Alert from \"@mui/material/Alert\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {Close} from \"@mui/icons-material\";\nclass YitFragment extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: this.props[\"isLoading\"] === undefined ? true:this.props[\"isLoading\"],\n            failedLoading: false,\n            notifications: new Map(),\n        }\n        this.notId = 0;\n    }\n    pushNotification(Msg, severity, duration){\n        let id=this.notId\n        this.state.notifications.set(\n            id,\n            <Alert\n                id={id}\n                severity={severity}\n                sx={{mb: 2}}\n                action={\n                    <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.state.notifications.delete(id)\n                            this.setState({notifications: this.state.notifications})\n                        }}\n                    >\n                        <Close fontSize=\"inherit\" />\n                    </IconButton>\n                }\n            >\n                {Msg}\n            </Alert>\n        )\n        this.notId++\n        this.setState({notifications: this.state.notifications})\n        if(duration !== undefined){\n            setTimeout(()=>{\n                this.state.notifications.delete(id)\n                this.setState({notifications: this.state.notifications})\n            }, duration)\n        }\n    }\n    async componentDidMount() {\n\n\n    }\n    drawNotifications(map){\n        let list = []\n        map.forEach((value, key)=>{\n            list.push(value)\n        })\n        return (list)\n    }\n    mountFragmentBackDrop(component){\n        document.getElementById(\"BackDrop\").addEventListener('click', ()=>{\n            document.getElementById(\"BackDrop\").style.display = \"none\"\n        })\n        document.getElementById('BackDropContent').addEventListener('click', (event)=>{\n            event.stopPropagation();\n        })\n        document.getElementById(\"BackDrop\").style.display = \"flex\"\n        ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    unmount(component){\n        document.getElementById(\"BackDrop\").style.display = \"none\"\n       // ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    drawOperations(){\n        if(this.props.topOperations != undefined){\n            return (this.props.topOperations.map(operation => {\n                return (\n                    <div style={{marginLeft: 10}}>{operation}</div>\n                )\n            }))\n        }\n    }\n\n\n    render() {\n        if(this.state.failedLoading){\n            return (\n                <div className={\"failedToLoadPage\"}>\n                    <span>Failed to load Fragment primary data</span>\n                    <br/>\n                    <Button\n                        style={{width: \"10vw\"}}\n                        variant={\"contained\"}  startIcon={<ReplayIcon/>}\n                        onClick={()=>this.props.primaryInfoLoader}\n                    >\n                        retry\n                    </Button>\n                </div>)\n        }\n        else {\n            if(this.state.isLoading){\n                return (<div className={\"loadingPage\"}><CircularProgress /></div>)\n            }\n            else {\n                return (\n                    <div className={'yitFragment'}>\n                        <div className={\"BackDrop\"} id={\"BackDrop\"}>\n                            <div className=\"close\" onClick={this.unmount}><CancelIcon fontSize=\"large\" style={{color: \"red\"}}/></div>\n                            <div className=\"content\" id={\"BackDropContent\"}></div>\n                        </div>\n                        <div className=\"pagesNotifications\" id={\"pagesNotifications\"}>\n                            {this.drawNotifications(this.state.notifications)}\n                        </div>\n                        <section className={`YitFragment ${this.props.customClass}`} id={this.props.customId}>\n                                {this.props.children}\n                        </section>\n                   </div>\n                )\n            }\n        }\n\n    }\n}\n\nexport default YitFragment","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewStationForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass NewStationForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            statsList: [\n                {label: \"active\", id: 0},\n                {label: \"Frozen\", id: 1}\n            ]\n        }\n\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value   : 0\n            },\n            {\n                label: \"inactive\",\n                value   : 1\n            }\n        ]\n     this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if(getOp.finalResult !== false){\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner =>{\n                return{value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        }else {\n\n        }\n    }\n\n    async handleSubmit(newData) {\n        let createOp = await this.MODELS._Station.create(newData)\n        if(createOp.finalResult){\n            return true\n        }else {\n            let error = createOp.error.toString()\n            this.formRef.current.setState({\n                errMsg: error\n            })\n           return false\n        }\n    }\n\n    render() {\n     return(\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"NewStationForm\"}\n                customId={\"NewStationForm\"}\n                title={\"Station Details\"}\n                isLoading={false}\n                primaryInfoLoader={()=>{this.loadPrimaryData().then()}}\n            >\n            <YitForm\n                ref={this.formRef}\n                handleSubmit={this.handleSubmit.bind(this)}\n            >\n                <Grid container spacing={2}>\n                    <Grid item xs={12}><b>Station Primary data</b></Grid>\n                    <Grid item xs={5}>\n                        <TextField\n                            disabled fullWidth required\n                            variant={\"outlined\"}\n                            id=\"outlined-required\" label=\"SystemId\" defaultValue={\"Generated\"}\n                        >\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={7}>\n                        <TextField\n                            fullWidth required name={\"id\"}\n                            variant={\"outlined\"}\n                            id=\"outlined-required\" label=\"Public Id\" defaultValue={\"\"}\n                        />\n                    </Grid>\n                    <Grid item xs={8}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-label\">Partner</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"currentPartner\"\n                                label=\"Partner\"\n                                name={\"currentPartner\"}\n                                defaultValue={-1}\n\n                            >\n                                <MenuItem value={-1} key={-10}>Select Partner</MenuItem>\n                                {this.state.partnersList.map((option) => (\n                                    <MenuItem value={option.value} key={option.value}> {option.label}</MenuItem>\n                                ))}\n\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                name={\"stat\"}\n                                label=\"Stat\"\n                                defaultValue={-1}\n                            >\n                                <MenuItem value={-1} key={-100}>Select Stat</MenuItem>\n                                {this.state.statsList.map((option) => (\n                                    <MenuItem value={option.id} key={option.value}> {option.label}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n\n\n                </Grid>\n            </YitForm>\n            </YitFragment>\n        )\n\n\n    }\n}\nexport default NewStationForm","import React from 'react';\nimport \"./YitPage.css\"\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ReactDOM from \"react-dom\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuOpenIcon from '@mui/icons-material/MenuOpen';\nimport Alert from \"@mui/material/Alert\";\nimport {Close} from \"@mui/icons-material\";\nimport NewStationForm from \"../../Pages/Stations/NewStationForm/NewStationForm\";\nclass YitPage extends YitComponent {\n    static id=0\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading: false,\n            notifications: new Map(),\n\n        }\n        this.pageId = 'YitPag'+YitPage.id\n        this.backDropId  = \"YitPageBackDrop\"+YitPage.id\n        this.backDropContentId = \"YitPageBackDropContent\"+YitPage.id\n        this.notificationsContainerId = \"notificationsContainer\"+YitPage.id\n        this.notId = 0;\n        YitPage.id++\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    pushNotification(Msg, severity, duration){\n        let id=this.notId\n        this.state.notifications.set(\n            id,\n            <Alert\n                id={id}\n                severity={severity}\n                sx={{mb: 2}}\n                action={\n                    <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.state.notifications.delete(id)\n                            this.setState({notifications: this.state.notifications})\n                        }}\n                    >\n                        <Close fontSize=\"inherit\" />\n                    </IconButton>\n                }\n            >\n                {Msg}\n            </Alert>\n        )\n        this.notId++\n        this.setState({notifications: this.state.notifications})\n        if(duration !== undefined){\n            setTimeout(()=>{\n                this.state.notifications.delete(id)\n                this.setState({notifications: this.state.notifications})\n            }, duration)\n        }\n    }\n\n    async componentDidMount() {\n        \n    }\n\n    mountBackDrop(component){\n        document.getElementById(this.backDropId).addEventListener('click', ()=>{\n            ReactDOM.unmountComponentAtNode(document.getElementById(this.backDropContentId))\n            document.getElementById(this.backDropId).style.display = \"none\"\n        })\n        document.getElementById(this.backDropContentId).addEventListener('click', (event)=>{\n            event.stopPropagation();\n        })\n        document.getElementById(this.backDropId).style.display = \"flex\"\n        ReactDOM.render(component, document.getElementById(this.backDropContentId))\n    }\n\n    unmount(component){\n        document.getElementById(this.backDropId).style.display = \"none\"\n       // ReactDOM.render(component, document.getElementById(\"BackDropContent\"))\n    }\n\n    drawOperations(){\n        if(this.props.topOperations !== undefined && this.props.topOperations.length > 0){\n            return (\n                <>\n                    <div className=\"entriesContainer\" id={\"entriesContainer\"}>\n                        {this.props.topOperations.map((operation, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={\"operationEntry\"}\n                                    style={{marginLeft: 10, display: \"flex\", alignItems:\"center\"}}\n                                    onClick={operation.onClick}\n                                >\n                                    {operation.icon} {operation.text}\n                                </div>\n                            )})}\n                    </div>\n                    <MenuOpenIcon\n                        fontSize={\"large\"} style={{cursor: \"pointer\"}}\n                        onClick={()=>{\n                            let selector = document.getElementById(\"entriesContainer\")\n                            if (selector.style.visibility === \"hidden\") {\n                                selector.style.visibility = \"visible\";\n                            } else {\n                                selector.style.visibility = \"hidden\";\n                            }\n                        }}/>\n                </>\n\n            )\n        }\n    }\n    drawNotifications(map){\n        let list = []\n        map.forEach((value, key)=>{\n            list.push(value)\n        })\n        return (list)\n    }\n\n\n    render() {\n        if(this.state.failedLoading){\n            return (\n                <div className={\"failedToLoadPage\"}>\n                    <span>Failed to load page primary data</span>\n                    <br/>\n                    <Button\n                        style={{width: \"10vw\"}}\n                        color={\"primary\"}\n                        variant={\"contained\"}  startIcon={<ReplayIcon/>}\n                        onClick={()=>{\n                            try {\n                                this.props.reloadPrimaryInfo()\n                            }\n                            catch (error){\n\n                            }\n                        }}\n                    >\n                        retry\n                    </Button>\n                </div>)\n        }\n        else {\n            if(this.state.isLoading){\n                return (<div className={\"loadingPage\"}><CircularProgress /></div>)\n            }\n            else {\n                return (\n                    <section className={'YitPage'} id={this.pageId}>\n                        <div className={\"YitPageBackDrop\"} id={this.backDropId}>\n                            <div className=\"YitPageBackDropContent\" id={this.backDropContentId}></div>\n                        </div>\n                        <div className=\"YitPageNotificationsContainer\" id={this.notificationsContainerId}>\n                            {this.drawNotifications(this.state.notifications)}\n                        </div>\n                        <div className={`YitPageMainPage ${this.props.customClass}`} id={this.props.customId}>\n                            <div className=\"pagesTitle\" >{this.props.title}</div>\n                            <div className=\"pagesOperations\">\n                                {this.drawOperations()}\n                            </div>\n                            <div className={`pagesContent ${this.props.customContentClass}`} id={this.props.contentCustomId}>\n                                {this.props.children}\n                            </div>\n                        </div>\n                    </section>\n                )\n            }\n        }\n\n    }\n}\n\nexport default YitPage","const CharOptions = {\n\n    ///Boolean - Whether grid lines are shown across the chart\n    scaleShowGridLines : true,\n\n    //String - Colour of the grid lines\n    scaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n    //Number - Width of the grid lines\n    scaleGridLineWidth : 1,\n\n    //Boolean - Whether to show horizontal lines (except X axis)\n    scaleShowHorizontalLines: true,\n\n    //Boolean - Whether to show vertical lines (except Y axis)\n    scaleShowVerticalLines: true,\n\n    //Boolean - Whether the line is curved between points\n    bezierCurve : true,\n\n    //Number - Tension of the bezier curve between points\n    bezierCurveTension : 0.4,\n\n    //Boolean - Whether to show a dot for each point\n    pointDot : true,\n\n    //Number - Radius of each point dot in pixels\n    pointDotRadius : 4,\n\n    //Number - Pixel width of point dot stroke\n    pointDotStrokeWidth : 1,\n\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n    pointHitDetectionRadius : 20,\n\n    //Boolean - Whether to show a stroke for datasets\n    datasetStroke : true,\n\n    //Number - Pixel width of dataset stroke\n    datasetStrokeWidth : 2,\n\n    //Boolean - Whether to fill the dataset with a colour\n    datasetFill : true,\n\n    //String - A legend template\n\n\n    //Boolean - Whether to horizontally center the label and point dot inside the grid\n    offsetGridLines : false\n};\n\nexport  default CharOptions\n","import React from \"react\";\nimport CharOptions from \"./CharOptions\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitFragment from \"../YitFragment/YitFragment\";\nlet LineChart = require(\"react-chartjs\").Line;\n\n\nclass TransactionsGraph extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            failedLoading : false,\n            charData :  {\n                labels: this.weekDays().weekDays,\n                datasets: [\n                    {\n                        label: \"Rent Transactions\",\n                        fillColor: \"rgba(220,220,220,0.2)\",\n                        strokeColor: \"rgba(220,220,220,1)\",\n                        pointColor: \"rgba(220,220,220,1)\",\n                        pointStrokeColor: \"#fff\",\n                        pointHighlightFill: \"#fff\",\n                        pointHighlightStroke: \"rgba(220,220,220,1)\",\n                        data: [5, 12, 16, 22, 18, 50, 10]\n                    },\n                    {\n                        label: \"Return Transaction\",\n                        fillColor: \"rgba(151,187,205,0.2)\",\n                        strokeColor: \"rgba(151,187,205,1)\",\n                        pointColor: \"rgba(151,187,205,1)\",\n                        pointStrokeColor: \"#fff\",\n                        pointHighlightFill: \"#fff\",\n                        pointHighlightStroke: \"rgba(151,187,205,1)\",\n                        data: [5, 12, 16, 22, 18, 50, 10]\n                    }\n                ]\n            }\n        }\n        this.fragmentRef = React.createRef()\n\n    }\n\n    async componentDidMount() {\n        let rentTransactions = await this.loadTransactionsData(0, 0, 100)\n        let returnTransactions = await this.loadTransactionsData(1, 0, 100)\n\n        this.state.charData['datasets'][0]['data'] = rentTransactions\n        this.state.charData['datasets'][1]['data'] = returnTransactions\n        this.setState({\n            charData: this.state.charData\n        })\n\n        this.fragmentRef.current.setState({\n            isLoading : false,\n            failedLoading : this.state.failedLoading\n        })\n    }\n\n    weekDays(){\n        let baseDate = new Date();\n        let weekDays = [];\n        let indexes = []\n        for(let i = 0; i < 7; i++)\n        {\n            baseDate.setDate(baseDate.getDate() - 6);\n            weekDays.push(\n                baseDate.toLocaleDateString(\"en\", { weekday: 'long' })\n            );\n            indexes.push(baseDate.getDay())\n\n        }\n        return {weekDays, indexes}\n    }\n\n    prepareData(){\n\n    }\n\n\n    async loadTransactionsData(operation, offset, limit){\n        let getAllOp = await this.MODELS._Transaction.getAll(operation, offset, limit)\n        let acceptedDate = new Date();\n        acceptedDate.setDate(acceptedDate.getDay()-6)\n        let data = [0, 0, 0, 0, 0, 0, 0]\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            transactions.forEach(transaction =>{\n                let transactionDate = new Date(transaction['createdAt'])\n                if(transactionDate > acceptedDate){\n                    data[transactionDate.getDay()] = data[transactionDate.getDay()] + 1\n                }\n            })\n            let tempData = data.slice()\n            this.weekDays().indexes.forEach((entry, index) =>{\n                data[entry-1] = tempData[index]\n            })\n            tempData = null\n\n        }\n        this.setState({\n            failedLoading: !getAllOp.finalResult\n        })\n        return data\n    }\n\n    render() {\n        return(\n            <>\n                <YitFragment\n                    ref={this.fragmentRef}\n                >\n                    <LineChart\n                        data={this.state.charData}\n                        options={CharOptions}\n                        width={this.props.x}\n                        height={this.props.y}\n                    />\n                </YitFragment>\n\n            </>\n        )\n    }\n}\n\nexport default TransactionsGraph","// Autocomplete.js\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n  text-align:center;\n`;\n\nclass AutoComplete extends Component {\n    constructor(props) {\n        super(props);\n        this.clearSearchBox = this.clearSearchBox.bind(this);\n    }\n\n    componentDidMount({ map, mapApi } = this.props) {\n        const options = {\n            // restrict your search to a specific type of result\n            // restrict your search to a specific country, or an array of countries\n            // componentRestrictions: { country: ['gb', 'us'] },\n        };\n        this.autoComplete = new mapApi.places.Autocomplete(\n            this.searchInput,\n            options,\n        );\n        this.autoComplete.addListener('place_changed', this.onPlaceChanged);\n        this.autoComplete.bindTo('bounds', map);\n    }\n\n    componentWillUnmount({ mapApi } = this.props) {\n        mapApi.event.clearInstanceListeners(this.searchInput);\n    }\n\n    onPlaceChanged = ({ map, addplace } = this.props) => {\n        const place = this.autoComplete.getPlace();\n\n        if (!place.geometry) return;\n        if (place.geometry.viewport) {\n            map.fitBounds(place.geometry.viewport);\n        } else {\n            map.setCenter(place.geometry.location);\n            map.setZoom(17);\n        }\n\n        addplace(place);\n        this.searchInput.blur();\n    };\n\n    clearSearchBox() {\n        this.searchInput.value = '';\n    }\n\n    render() {\n        return (\n            <div className={\"YitLocationPickerAutoComplete\"}>\n                <input\n                    className=\"search-input\"\n                    ref={(ref) => {\n                        this.searchInput = ref;\n                    }}\n                    type=\"text\"\n                    onFocus={this.clearSearchBox}\n                    placeholder=\"Enter a location\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default AutoComplete;","// Marker.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    position: absolute;\n    width: 38px;\n    height: 37px;\n    background-image: url(https://icon-library.com/images/pin-icon-png/pin-icon-png-9.jpg);\n    background-size: contain;\n    background-repeat: no-repeat;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -webkit-transform: translate(-50%,-50%);\n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%,-50%);\n    cursor: grab;\n`;\n\nconst Marker = ({ text, onClick }) => (\n    <Wrapper\n        alt={text}\n        onClick={onClick}\n    />\n);\n\nMarker.defaultProps = {\n    onClick: null,\n};\n\nMarker.propTypes = {\n    onClick: PropTypes.func,\n    text: PropTypes.string.isRequired,\n};\n\nexport default Marker;","// MyGoogleMaps.js\nimport React, { Component } from 'react';\nimport \"./YitLocationPicker.css\"\nimport GoogleMapReact from 'google-map-react';\n\nimport styled from 'styled-components';\n\nimport AutoComplete from './Autocomplete';\nimport Marker from './Marker';\nimport {MAP_API_KEY} from \"../../Apis/GlobalConfig\";\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nclass YitFullLocationPicker extends Component {\n\n    constructor(props) {\n        super(props);\n        YitFullLocationPicker.displayName = \"YitLocationPicker\"\n        this.state = {\n            mapApiLoaded: false,\n            mapInstance: null,\n            mapApi: null,\n            geoCoder: null,\n            places: [],\n            center: [],\n            zoom: 9,\n            address: '',\n            draggable: true,\n            lat: null,\n            lng: null\n        };\n    }\n\n\n    componentWillMount() {\n        this.setCurrentLocation();\n    }\n\n\n    onMarkerInteraction = (childKey, childProps, mouse) => {\n        this.setState({\n            draggable: false,\n            lat: mouse.lat,\n            lng: mouse.lng\n        });\n    }\n    onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\n        this.setState({ draggable: true });\n        this._generateAddress();\n    }\n\n    _onChange = ({ center, zoom }) => {\n        this.setState({\n            center: center,\n            zoom: zoom,\n        });\n\n    }\n\n    _onClick = (value) => {\n        this.setState({\n            lat: value.lat,\n            lng: value.lng\n        });\n    }\n\n    apiHasLoaded = (map, maps) => {\n        this.setState({\n            mapApiLoaded: true,\n            mapInstance: map,\n            mapApi: maps,\n        });\n\n        this._generateAddress();\n    };\n\n    addPlace = (place) => {\n\n        this.setState({\n            places: [place],\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n        });\n        this._generateAddress()\n    };\n\n    _generateAddress() {\n\n        const {\n            mapApi\n        } = this.state;\n\n        const geocoder = new mapApi.Geocoder;\n\n        geocoder.geocode({ 'location': { lat: this.state.lat, lng: this.state.lng } }, (results, status) => {\n            console.log(results);\n            console.log(status);\n            if (status === 'OK') {\n                if (results[0]) {\n                    this.zoom = 12;\n                    this.setState({ address: results[0].formatted_address });\n                } else {\n                    window.alert('No results found');\n                }\n            } else {\n                window.alert('Geocoder failed due to: ' + status);\n            }\n\n        });\n        if(this.props.onDragEnd !== undefined && typeof this.props.onDragEnd == \"function\"){\n            this.props.onDragEnd(this.state.lat, this.state.lng)\n        }\n    }\n\n    // Get Current Location Coordinates\n    setCurrentLocation() {\n        if ('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.setState({\n                    center: [position.coords.latitude, position.coords.longitude],\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                });\n            });\n        }\n    }\n\n    render() {\n        const {\n            places, mapApiLoaded, mapInstance, mapApi,\n        } = this.state;\n\n\n        return (\n            <div className={\"YitLocationPicker\"}>\n                {mapApiLoaded && (\n                    <div>\n                        <AutoComplete map={mapInstance} mapApi={mapApi} addplace={this.addPlace} />\n                    </div>\n                )}\n                <GoogleMapReact\n                    center={this.state.center}\n                    zoom={this.state.zoom}\n                    draggable={this.state.draggable}\n                    onChange={this._onChange}\n                    onChildMouseDown={this.onMarkerInteraction}\n                    onChildMouseUp={this.onMarkerInteractionMouseUp}\n                    onChildMouseMove={this.onMarkerInteraction}\n                    onChildClick={() => console.log('child click')}\n                    onClick={this._onClick}\n                    bootstrapURLKeys={{\n                        key: MAP_API_KEY,\n                        libraries: ['places', 'geometry'],\n                    }}\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\n                >\n\n                    <Marker\n                        text={this.state.address}\n                        lat={this.state.lat}\n                        lng={this.state.lng}\n                    />\n\n\n                </GoogleMapReact>\n            </div >\n        );\n    }\n}\n\nexport default YitFullLocationPicker;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./Home.css\"\nimport StatBox from \"../../Components/StatBox/StatBox\";\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\n\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Switch from \"@material-ui/core/Switch\";\nimport List from \"@mui/material/List\";\nimport TransactionsGraph from \"../../Components/TransactionsGraph/TransactionsGraph\";\nimport YitLocationPicker from \"../../Components/YitFullLocationPeeker/YitFullLocationPicker\";\n\nconst MuiIcons = require('@mui/icons-material');\n\n\nclass Home extends YitComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            failedLoading: false,\n            isLoading: false,\n            settings: {},\n            statistics: {},\n            graphHeight: 0,\n            graphWidth: 0\n        }\n        this.currentPage = React.createRef()\n    }\n    async changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.checked;\n        if (e.target.type === \"number\") {\n            val = parseInt(val)\n        }\n        let updateOp = await this.MODELS._Setting.update(nam, {dataValue: val})\n        if(updateOp.finalResult){\n            this.state.settings[nam] = val\n            this.setState({\n                settings: this.state.settings\n            })\n        }else {\n            this.currentPage.current.pushNotification(\"Could not update settings\", \"error\", 2000)\n        }\n\n    }\n    async loadSettings(offset, limit){\n        let getAllOp = await this.MODELS._Setting.getAll(offset, limit)\n        if(getAllOp.finalResult){\n            let temp = {}\n            getAllOp.result.forEach(entry =>{\n                temp[entry.name] = entry.dataValue\n            })\n            this.setState({settings: temp})\n        }\n        this.setState({failedLoading: !getAllOp.finalResult})\n    }\n\n    async loadStatistics(actors){\n        for (const actor of actors) {\n            let getTotal = await actor.loader.count()\n            if(getTotal.finalResult){\n                this.state.statistics[actor.model] = getTotal.result\n                this.setState({statistics: this.state.statistics})\n            }\n            this.setState({failedLoading: !getTotal.finalResult})\n        }\n    }\n\n    async loadPrimaryData() {\n        let actors = [\n            {model: \"clients\", loader: this.MODELS._Client},\n            {model: \"stations\", loader: this.MODELS._Station},\n            {model: \"partners\", loader: this.MODELS._Partner},\n        ]\n        await this.loadSettings(0, 50)\n        await this.loadStatistics(actors)\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async loadTransactionsData(){\n        let getAllOp = this.MODELS._Transaction.getAll(0, 0, 100)\n        //let getAllOp = this.MODELS._Transaction.getAll(1, 0, 100)\n    }\n    setDimensions(){\n\n\n\n        let container = document.getElementById('transactionsContainer')\n        if(container !== null){\n            let y = container.offsetHeight\n            let x = container.offsetWidth\n            this.setState({\n                x:x-20,\n                y:y-50\n            })\n        }\n\n        window.onresize = ()=>{\n            let container = document.getElementById('transactionsContainer')\n            if(container !== null){\n                let y = container.offsetHeight\n                let x = container.offsetWidth\n                this.setState({\n                    x:x-20,\n                    y:y-50\n                })\n            }\n        }\n\n    }\n    async componentDidMount() {\n        await this.loadPrimaryData()\n        this.setDimensions()\n    }\n\n    render(){\n        return(\n                <YitPage\n                    ref={this.currentPage}\n                    title={\"Dash Board\"}\n                    customClass={'Home'}\n                    customContentClass={'homeContent'}\n                    topOperations={[]}\n                    reloadPrimaryInfo={()=>{\n                        this.loadPrimaryData().then()\n                    }}\n                >\n                    <div className=\"StatsContainer\">\n                        <div className=\"container\">\n                            <StatBox\n                                title={'Clients'}\n                                number={this.state.statistics[\"clients\"]}\n                                text={\"+7 this month\"}\n                                icon={<MuiIcons.Person style={{fontSize: 50, color:\"wheat\"}}/>}\n\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                number={this.state.statistics[\"partners\"]}\n                                text={\"Students\"}\n                                title={'Partners'}\n                                icon={<MuiIcons.People style={{fontSize: 50, color: \"rosybrown\"}}/>}\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                title={'Stations'}\n                                number={this.state.statistics[\"stations\"]}\n                                icon={<MuiIcons.Apps style={{fontSize: 50, color:\"black\"}}/>}\n                                text={\"Active Stations\"}\n                            />\n\n                        </div>\n                        <div className=\"container\">\n                            <StatBox\n                                title={\"Transactions\"}\n                                number={\"0\"}\n                                icon={<MuiIcons.LocalAtm style={{fontSize: 50, color:\"wheat\"}}/>}\n                                text={\"Today\"}\n                            />\n                        </div>\n                    </div>\n                    <div className={\"transactionsContainer\"} id={\"transactionsContainer\"}>\n                        <b>Rent / return transactions</b>\n                        <TransactionsGraph x={this.state.x} y={this.state.y}></TransactionsGraph>\n                    </div>\n                    <div className=\"quickSettingsContainer\">\n                        <List>\n                            <ListItem>\n                                <ListItemText id=\"switch-list-label-wifi\" primary={<b>Settings</b>} />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon><AccountTreeIcon/></ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Pratic Power\" />\n                                <Switch\n                                    name={\"system\"}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"system\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.People/>\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Client Signup\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder}\n                                    checked={this.state.settings[\"clientSignUp\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.People/>\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-wifi\" primary=\"Client Signup\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder}\n                                    checked={this.state.settings[\"clientSignUp\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-wifi',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.Apps />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Power Banks Rent\" />\n                                <Switch\n                                    name={\"rent\"}\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"rent\"]}\n                                    inputProps={{\n                                        'aria-labelledby': 'switch-list-label-bluetooth',\n                                    }}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.QrCode2 />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Card Print\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"print\"]}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemIcon>\n                                    <MuiIcons.QrCodeScanner />\n                                </ListItemIcon>\n                                <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Card recharge\" />\n                                <Switch\n                                    edge=\"end\"\n                                    onChange={this.changeHolder.bind(this)}\n                                    checked={this.state.settings[\"recharge\"]}\n                                />\n                            </ListItem>\n                        </List>\n                    </div>\n                </YitPage>\n        )\n    }\n}\nexport default Home","import React, {forwardRef} from \"react\";\nimport {\n    AddBox, ArrowDownward,\n    Check, ChevronLeft,\n    ChevronRight,\n    Clear,\n    DeleteOutline,\n    Edit,\n    FilterList,\n    FirstPage, LastPage, Remove,\n    SaveAlt, Search, ViewColumn\n} from \"@mui/icons-material\";\n\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n    Retry: forwardRef((props, ref) => <div/>),\n};\n\n\nexport default tableIcons;","import React from 'react';\nimport './YitDataTable.css'\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../tableIcons\"\nimport Button from \"@material-ui/core/Button\";\n\n\nclass YitDataTable extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            page: 0,\n            totalCount: 0,\n            searchEntry: this.props.searchEntry !== undefined ? this.props.searchEntry : \"id\",\n            options: {\n                search: true,\n                actionsColumnIndex: -1, exportButton: true, paginationPosition: \"top\",\n                pageSizeOptions: [5, 10, 20, 50, 0],\n            }\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        this.tableRef = React.createRef();\n\n    }\n\n\n\n    async componentDidMount() {\n        if(this.props.options !== undefined){\n            let newOptions = this.state.options\n            for (const option in this.props.options) {\n                newOptions[option] = this.props.options[option]\n            }\n            this.setState({options : newOptions})\n        }\n    }\n\n    async loadTotal(){\n\n    }\n\n    async loadData(query){\n        console.log(query)\n        let offset = query.page*query.pageSize, limit =  query.pageSize\n        let getAllOp\n\n        if(query.search === \"\"){\n            getAllOp = await this.props.dataModel.getAll(offset, limit)\n        }\n        else{\n\n            getAllOp = await this.props.dataModel.searchBy(this.state.searchEntry, query.search)\n        }\n\n        if(getAllOp.finalResult){\n            let result = {\n                data : getAllOp.result.rows,\n                total: getAllOp.result.count\n            }\n            if(query.filters.length > 0){\n\n                let filters = query.filters\n                let r = []\n                result.data.forEach(entry =>{\n                    let accepted = true\n                    for (let filter of filters){\n                        let filterCol = filter[\"column\"][\"field\"]\n                        let filterValue = filter[\"value\"]\n                        if(entry[filterCol] !=   filterValue) {\n                            accepted = false\n                        }\n\n                    }\n                    if(accepted){\n                        r.push(entry)\n                    }\n\n                })\n                console.log(r)\n                result.data = r\n            }\n            return result\n        }else {\n            return false\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n    render() {\n        return (\n            <MaterialTable\n                {...this.props}\n                style={{ minHeight: \"100%\", fontFamily: \"Poppins\"}}\n                tableRef={this.tableRef}\n                icons={tableIcons}\n                title={\"\"}\n                data={query => new Promise((resolve, reject) => {\n                        this.loadData(query)\n                            .then(result => {\n                                if(result == false){\n                                    reject()\n                                }else {\n                                    resolve({\n                                        data: result['data'],\n                                        page: query.page,\n                                        totalCount: result['total'],\n                                    })\n                                }\n\n                            })\n                    })}\n                options={this.state.options}\n                localization={{\n                    error:\n                        <div className={\"errorContainer\"}>\n                            <span>Data could not be Loaded</span>\n                            <br/><br/>\n                            <Button\n                                style={{backgroundColor: \"red\", opacity: 20}}\n                                color={\"primary\"}\n                                variant={\"contained\"}\n                                onClick={()=>{\n                                    this.tableRef.current.onQueryChange({});\n                                }}\n                            >\n                                Retry\n                            </Button>\n                        </div>\n                }}\n\n            >\n            </MaterialTable>\n        )\n    }\n}\n\nexport default YitDataTable","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Clients.css\"\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport Chip from \"@mui/material/Chip\";\n\nclass Clients extends YitComponent {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {title: 'Name', field: \"fullName\"},\n                {title: 'E-mail', field: \"mail\"},\n                {title: 'Phone',   field: \"phone\" },\n                {title: 'Joint At',   field: \"createdAt\", render: rowData => rowData['createdAt'].substr(0, 10), editable: false},\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Frozen\" },\n                    render: (rowData)=>{\n                        let result, color\n                        switch (rowData.stat){\n                            case 0: result = 'New'; color='green'; break;\n                            case 1: result = 'Active'; color= 'darkblue'; break;\n                            case 2: result = 'Frozen'; color=\"red\"; break;\n                            default:result = \"Unknown\"; color=\"red\"\n                        }\n                        return(<Chip  label={result}  style={{width: 120, backgroundColor: color, color:\"white\", fontWeight: \"bold\"}}/>)\n                    }\n                },\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async componentWillMount(){\n        try{\n            let clientsList = await this.MODELS._Client.getAll(0, 20)\n            if(clientsList != null){\n                this.setState({\n\n                    data: clientsList\n                })\n                this.currentPage.current.setState({\n                    isLoading: false\n                })\n            }else {\n\n            }\n        }catch (e){\n\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    async changeStat(rowData, stat){\n        try{\n            let updateResult = await this.MODELS._Client.update(rowData.id, {stat: stat})\n            if(updateResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        }catch (e){\n\n        }\n    }\n\n    async deleteEntry(rowData) {\n        try {\n            let updateResult = await this.MODELS._Client.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Client Deleted\", \"success\")}\n        } catch (error) {\n\n        }\n    }\n\n    async updateClientInfo(newData){\n        try{\n            let updateOp = await this.MODELS._Client.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Client Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    render() {\n        return (\n            <YitPage\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Clients\"}\n                ref={this.currentPage}>\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    dataModel={this.MODELS._Client}\n                    searchEntry={'fullName'}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => this.updateClientInfo(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            })\n                    }}\n                />\n            </YitPage>\n        )\n    }\n}\n\nexport default Clients\n","import React from 'react';\nimport { GoogleMap,  InfoWindow, Marker } from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\";\n\nimport Autocomplete from 'react-google-autocomplete';\n\n\n\nGeocode.setApiKey(\"AIzaSyB3zO_aU97QjkN-p1MUofYobc2QNCf3y2M\");\nGeocode.enableDebug();\n\nclass LocationSearchModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            zoom: 15,\n            height: 200,\n            mapPosition: {\n                lat: 0,\n                lng: 0,\n            },\n            markerPosition: {\n                lat: 0,\n                lng: 0,\n            },\n            Building: '',\n            pincode: ''\n        }\n    }\n\n\n\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                        mapPosition: {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        },\n                        markerPosition: {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        }\n                    },\n                    () => {\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                            response => {\n                                console.log(response)\n                                const address = response.results[0].formatted_address,\n                                    addressArray = response.results[0].address_components,\n                                    city = this.getCity(addressArray),\n                                    area = this.getArea(addressArray),\n                                    state = this.getState(addressArray);\n                                console.log('city', city, area, state);\n                                this.setState({\n                                    address: (address) ? address : '',\n                                    area: (area) ? area : '',\n                                    city: (city) ? city : '',\n                                    state: (state) ? state : '',\n                                })\n                            },\n                            error => {\n                                console.error(error);\n                            }\n                        );\n\n                    })\n            });\n        } else {\n            console.error(\"Geolocation is not supported by this browser!\");\n        }\n    };\n\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\n    //     if (\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\n    //         this.state.address !== nextState.address ||\n    //         this.state.city !== nextState.city ||\n    //         this.state.area !== nextState.area ||\n    //         this.state.state !== nextState.state\n    //     ) {\n    //         return true\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\n    //         return false\n    //     }\n    // }\n\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n        console.log('Changed ');\n    };\n\n    onInfoWindowClose = (event) => { };\n\n    onMarkerDragEnd = (event) => {\n\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                })\n            },\n            error => {\n\n            }\n        );\n    };\n\n    onPlaceSelected = (place) => {\n        console.log('place Selected')\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n\n        console.log('latvalue', latValue)\n        console.log('lngValue', lngValue)\n\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    // const AsyncMap = compose(\n    //     withProps({\n    //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\n    //         loadingElement: <div style={{ height: `100%` }} />,\n    //         containerElement: <div style={{ height: `400px` }} />,\n    //         mapElement: <div style={{ height: `100%` }} />,\n    //     }),\n    //     withScriptjs,\n    //     withGoogleMap\n    // )((props) =>\n    //     <GoogleMap\n\n    render() {\n\n\n\n        return (\n            <div>\n                <GoogleMap\n                    mapContainerStyle={{height: \"40vh\", width: \"100%\"}}\n                    zoom={this.state.zoom}\n                    center={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    center={ {\n                        lat: -3.745,\n                        lng: -38.523\n                    }}\n                >\n                    {/* InfoWindow on top of marker */}\n\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={'Dolores park'}\n                        draggable={true}\n                        onDragEnd={this.onMarkerDragEnd}\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                    />\n                    <InfoWindow\n                        onClose={this.onInfoWindowClose}\n                        position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                    >\n                        <div>\n                            <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                        </div>\n                    </InfoWindow>\n                    <Marker />\n\n                    {/* <MarkerWithLabel\n                            position={{ lat: -34.397, lng: 150.644 }}\n                            labelAnchor={new google.maps.Point(0, 0)}\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\n                        >\n                            <div>Hello There!</div>\n                        </MarkerWithLabel> */}\n\n\n                    {/* For Auto complete Search Box */}\n                    <Autocomplete\n                        style={{\n                            width: '100%',\n                            height: '40px',\n                            paddingLeft: '16px',\n                            marginTop: '2px',\n                            marginBottom: '2rem'\n                        }}\n                        onPlaceSelected={this.onPlaceSelected}\n                        types={['(regions)']}\n                    />\n                </GoogleMap>\n                <div className='row mt-5 p-2'>\n                    <div className=\"form-group col-12\">\n                        <label htmlFor=\"\">Address</label>\n                        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">City</label>\n                        <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">Area</label>\n                        <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">State</label>\n                        <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\n                    </div>\n                    <div className=\"form-group col-12 col-md-6\">\n                        <label htmlFor=\"\">Building</label>\n                        <input type=\"text\" name=\"Building\" className=\"form-control\" onChange={ this.onChange } value={ this.state.Building }/>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default LocationSearchModal;","import React from 'react';\nimport { GoogleMap,  InfoWindow, Marker } from \"@react-google-maps/api\";\nimport Autocomplete from 'react-google-autocomplete';\nclass YitLocationPicker extends React.Component {\n    constructor(props) {\n        super(props);\n        YitLocationPicker.displayName = \"YitLocationPicker\"\n        this.state = {\n            zoom: 15,\n            height: 200,\n            mapPosition: this.props.center === undefined ? {lat: -3.745, lng: -38.523} : this.props.center,\n            markerPosition: this.props.center === undefined ? {lat: -3.745, lng: -38.523} : this.props.center,\n\n        }\n    }\n\n\n    componentDidMount(){\n\n    };\n\n\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n\n    };\n\n    onMarkerDragEnd = (e) => {\n\n        let newLat = e.latLng.lat(), newLng = e.latLng.lng();\n\n        this.setState({\n            markerPosition: {\n                lat: newLat,\n                lng: newLng\n            },\n            mapPosition: {\n                lat: newLat,\n                lng: newLng\n            },\n        })\n        if(this.props.onDragEnd !== undefined && typeof this.props.onDragEnd == \"function\"){\n            this.props.onDragEnd(e)\n        }\n    };\n\n    render() {\n        return (\n\n                <GoogleMap\n                    mapContainerStyle={{height: \"40vh\", width: \"100%\"}}\n                    zoom={this.state.zoom}\n                    center={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n\n                >\n                    {/* InfoWindow on top of marker */}\n\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={'Dolores park'}\n                        draggable={true}\n                        onDragEnd={(e)=>{\n                            this.onMarkerDragEnd(e)\n\n                        }}\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                    />\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>Drag me to choose</span>\n                            </div>\n                        </InfoWindow>\n                    <Marker />\n\n                    {/* <MarkerWithLabel\n                            position={{ lat: -34.397, lng: 150.644 }}\n                            labelAnchor={new google.maps.Point(0, 0)}\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\n                        >\n                            <div>Hello There!</div>\n                        </MarkerWithLabel> */}\n\n\n                    {/* For Auto complete Search Box */}\n\n                </GoogleMap>\n        )\n    }\n\n}\n\nexport default YitLocationPicker;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewPartnerForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {GoogleMap, LoadScript, Marker} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport LocationSearchModal from \"../../../Components/LocationSearchModal/LocationSearchModal\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport {MAP_API_KEY} from \"../../../Apis/GlobalConfig\";\nimport YitFullLocationPicker from \"../../../Components/YitFullLocationPeeker/YitFullLocationPicker\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\nclass NewPartnerForm extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n    generatePassword(){\n        let chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        let passwordLength = 8;\n        let password = \"\";\n        for (let i = 0; i <= passwordLength; i++) {\n            let randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber +1);\n        }\n        return password\n    }\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n            alert(JSON.stringify(createOp))\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'NewPartnerForm'}>\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                id=\"outlined-required\" name={'fullName'} label=\"Full Name\"\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Rent Policy\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Policy</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Stat</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"stat\"}\n                                    label=\"State\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Stat</MenuItem>\n                                    {PartnerStates.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"phone\"} id=\"outlined-required\"\n                                label=\"Phone\" placeholder={\"0X XX XX XX XX\"}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"mail\"} id=\"outlined-required\"\n                                label=\"Address mail\" placeholder={\"xxx@xxx.xxx\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <YitFullLocationPicker></YitFullLocationPicker>\n                        </Grid>\n\n                    </Grid>\n                </YitForm>\n            </div>\n        )\n    }\n}\n\nexport default NewPartnerForm","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Partners.css\"\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\n\nimport {Link} from \"react-router-dom\";\n\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport NewStationForm from \"../Stations/NewStationForm/NewStationForm\";\nimport YitFragment from \"../../Components/YitFragment/YitFragment\";\nimport NewPartnerForm from \"./NewPartnerForm/NewPartnerForm\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\nfunction statToString(stat) {\n    let result = \"\"\n    ClientStats.forEach((clientStat) => {\n        if (clientStat.value == stat) {\n            result = clientStat.label\n        }\n    })\n    return result\n}\n\n\nclass Partners extends YitComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Name', field: \"fullName\"},\n                {title: 'E-mail', field: \"mail\"},\n                {title: 'Phone', field: \"phone\"},\n                {title: 'Stat', field: \"stat\", render: rowData => statToString(rowData.stat), editable: 'never'},\n\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    handleClose = (event, reason) => {\n\n    };\n\n    async loadPartners() {\n        let getOp = await this.MODELS._Partner.getAll(0, 20)\n        if (getOp.finalResult) {\n            let partnersList = getOp.result\n            this.setState({\n                failedLoading: false,\n                data: partnersList\n            })\n        } else {\n\n            this.setState({\n                failedLoading: true\n            })\n        }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadPartners()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        } catch (error) {\n\n        }\n    }\n\n    render() {\n        return (\n\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Partners\"}\n                reloadPrimaryInfo={async () => {\n                    await this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Partner\",\n                        icon: <MuiIcons.Add />,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewPartnerForm/>)}\n                    }\n\n                ]}\n            >\n\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    actions={[\n                        (rowData) => {\n                            switch (rowData.stat) {\n                                case 0:\n                                    return {\n                                        icon: () => <MuiIcons.Check style={{color: \"blue\"}}></MuiIcons.Check>,\n                                        onClick: (event, rowData) => this.changeStat(rowData, 1),\n                                        tooltip: \"validate\",\n                                    }\n                                    break\n                                case 1:\n                                    return {\n                                        icon: () => <MuiIcons.Block style={{color: \"red\"}}></MuiIcons.Block>,\n                                        tooltip: \"Freeze User\",\n                                        onClick: (event, rowData) => this.changeStat(rowData, 2)\n                                    }\n                                case 2:\n                                    return {\n                                        icon: () => <MuiIcons.Beenhere style={{color: \"green\"}}></MuiIcons.Beenhere>,\n                                        tooltip: \"Reactivate User\",\n                                        onClick: (event, rowData) => this.changeStat(rowData, 1)\n                                    }\n                            }\n\n                        },\n                        (rowData) =>{return{\n                            icon: () => <MuiIcons.Delete style={{color: \"red\"}}></MuiIcons.Delete>,\n                            onClick: (event, rowData) => {\n\n                                this.deleteEntry(rowData).then(r => {})\n                                //this.props.history.push(\"/Dashboard/Clients/\", { state: 'sample data'});\n                            },\n                            tooltip: \"validate\",\n                        }},\n\n                        (rowData) => {\n                            return {\n                                icon: () => <Link to={{\n                                    pathname: \"/Dashboard/PartnerDetails/\" + rowData.id,\n                                    search: '',\n                                    state: {data: this.state.rawData[rowData.rowIndex]}\n                                }}><MuiIcons.Launch style={{color: \"black\"}}/></Link>,\n                                tooltip: \"Details\",\n                            }\n                        }\n                    ]}\n                    onRowClick={(event, rowData) => {\n                        (event.target).ondblclick = () => {\n                            this.props.history.push(\"/Dashboard/PartnerDetails/\" + rowData.id, {  state: {data: this.state.rawData[rowData.rowIndex]}});\n\n                        }\n\n                    }}\n                    dataModel={this.MODELS._Partner}\n                    searchEntry={'fullName'}\n\n                />\n            </YitPage>\n\n\n        )\n    }\n}\n\nexport default Partners","\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./TabsWidget.css\"\nimport Button from \"@mui/material/Button\";\n\n\n\n\n\nclass  TabsWidget  extends React.Component {\n    static id = 0\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabsWidgetId: \"TabsWidget\" +TabsWidget.id,\n            tabContentId: \"tabContent\"+TabsWidget.id,\n            tabButtonId: \"tabButton\"+TabsWidget.id,\n            currentIndex : 0\n        }\n        TabsWidget.id++\n    }\n\n    changeSelected(selectedIndex){\n        let buttonsList = document.getElementsByClassName(this.state.tabButtonId)\n        for(let i=0; i<buttonsList.length; i++){\n            if(buttonsList[i].id == selectedIndex){\n                buttonsList[i].style.color = \"darkblue\"\n                buttonsList[i].style.textDecoration = \"underline\"\n            }else {\n                buttonsList[i].style.color = \"grey\"\n                buttonsList[i].style.textDecoration = \"\"\n            }\n        }\n\n    }\n    generateTabs(){\n\n        return (\n        this.props.tabsList.map((tab, index)=>{\n\n            return(\n            <div className={\"tabTitle\"}>\n                <div\n                    style={{color: \"green\"}}\n                    id={this.state.tabButtonId+index}\n                    fullWidth className={\"TabsWidgetTab \" + this.state.tabButtonId}\n                    onClick={async () => {\n                        this.setState({\n                            currentIndex: index\n                        })\n                        if (tab.clickHandler != undefined) {\n                            tab.clickHandler()\n                        }\n                    }}\n                >{tab.title}</div>\n            </div>\n            )\n        })\n        )\n    }\n\n     setContent(index){\n\n         this.changeSelected(this.state.tabButtonId+index)\n         if(this.props.children.length === undefined){\n             //this.tabsRefs[0].current.color = \"Primary\"\n             return(this.props.children)\n         }else{\n             return(this.props.children[index])\n             //if(this.props.tabsList[0].clickHandler != undefined){this.props.tabsList[0].clickHandler()}\n         }\n\n\n\n        //document.getElementById(this.state.tabButtonId+index).style.color=  \"red\"\n\n    }\n\n    async componentDidMount() {\n\n    }\n\n\n    render() {\n        return(\n            <React.Fragment>\n                <section className={\"TabsWidget\"} id={this.state.tabsWidgetId}>\n                    <div className=\"tabsHeader\">\n                        {this.generateTabs()}\n                    </div>\n                    <div className=\"tabContent\" id={this.state.tabContentId}>\n                        {this.setContent(this.state.currentIndex)}\n                    </div>\n                </section>\n            </React.Fragment>\n\n        )\n    }\n\n}\nexport default TabsWidget","import React from \"react\";\nimport \"./YitView.css\"\nimport Button from \"@mui/material/Button\";\nclass YitView extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state =\n            {\n                active : this.props.active\n            }\n        this.myRef = React.createRef();\n    }\n\n    setActive(state){\n        this.setState({\n            active : state\n        })\n    }\n\n\n\n    render() {\n        if(this.state.active){\n            return (\n                <div className={\"active \" + this.props.className} id={this.props.id} ref={this.myRef}>\n                    {this.props.children}\n                </div>\n            )\n        }\n        return (\n           <div  className={\"active \" + this.props.className} id={this.props.id} ref={this.myRef}>\n               {this.props.children}\n               <div className={\"anActive\"}>\n                   {this.props.anActiveContent}\n               </div>\n\n           </div>\n        )\n    }\n}\nexport default YitView","import React from \"react\";\nimport \"./StationDetails.css\"\n\n\n//import LoadingButton from '@mui/lab/LoadingButton';\nimport SaveIcon from '@mui/icons-material/Save';\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport TabsWidget from \"../../../Components/TabsWidget/TabsWidget\";\nimport YitView from \"../../../Components/YitView/YitView\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\n\nconst MuiIcons = require('@mui/icons-material');\n\nconst PowerBank =  ({PowerBank, clickHandler, id})=>{\n    function drawContent(stat){\n        if(stat){\n            return (\n                <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\"\n                        onClick={()=>{\n                            clickHandler(setStat)\n                        }}>\n                    Eject\n                </Button>\n            )\n        }else {\n            return (\n                <div>Loading</div>\n                // <LoadingButton\n                //     fullWidth\n                //     loading\n                //     loadingPosition=\"start\"\n                //     startIcon={<SaveIcon />}\n                //     variant=\"outlined\"\n                // >\n                //     Requesting\n                // </LoadingButton>\n            )\n        }\n    }\n    const [stat, setStat] = React.useState(true);\n    return(\n        <div className={\"PowerBankView\"} id={id} style={{width: 200}}>\n        <b>ID: </b>\n            {PowerBank.powerBankId}<br/>\n            <b>Power Level:</b>{PowerBank.powerLevel}<br/>\n            {drawContent(stat)}\n        </div>\n    )\n}\n\nconst APNView =  ({APN,  id})=>{\n    if(APN != undefined){\n        return(\n            <div className={\"PowerBankView\"} id={id} >\n                <Grid container spacing={2} xs={8} style={{width: \"100%\"}}>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"MCCMNC\"\n                            defaultValue={APN.MCCMNC}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"User Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Password\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }else {\n        return <div>APN information not loaded yet</div>\n    }\n}\n\nclass StationDetails extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading : false,\n            currentStation: {Partner: {}},\n            currentStationInfo: {},\n            currentTab :\"one\",\n            stationAPNs : [],\n            }\n        this.loadPrimaryData().then(r => {})\n    }\n\n    async loadPrimaryData(){\n        let loadStationOp = await this.loadStationInfo(this.props.id)\n        if(loadStationOp){\n            await this.loadPowerBanksInfo(this.state.currentStation.id)\n            await this.loadAPN(this.state.currentStation.id, 0)\n        }else {\n            console.clear()\n\n\n        }\n    }\n    async componentDidMount() {\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                isLoading: false\n            })\n        }\n    }\n\n    async loadStationInfo(id) {\n        let getOneOP = await this.MODELS._Station.getOneByPublicId(id)\n        if (getOneOP.finalResult === true) {\n            let currentStation = getOneOP.result\n            this.setState({\n                currentStation: currentStation,\n            })\n            return true\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPowerBanksInfo(id) {\n        if(id != undefined){\n            let currentStationInfo = await this.MODELS._Station.getOneRealTime(id)\n            if (currentStationInfo !== false) {\n                this.setState({\n                    currentStationInfo: currentStationInfo,\n                })\n            } else {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load Station primary  Data\", \"error\")\n            }\n        }\n    }\n\n    async loadAPN(stationId, index) {\n        if(stationId != undefined){\n            let APN = await this.MODELS._Station.queryAPNNs(stationId, index)\n            if(APN !== false){\n                let current  = this.state.stationAPNs\n                current[index] = APN\n                this.setState({\n                    stationAPNs: current\n                })\n            }else {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load APN info\", \"error\")\n            }\n        }\n    }\n\n    drawPowerBanks(powerBanksList){\n        if(powerBanksList != undefined){\n            if(powerBanksList.length > 0){\n                return (\n                    powerBanksList.map((powerBank, index)=>{\n                        return(\n                            <div className=\"infoEntry\">\n                                <PowerBank\n                                    id={\"PowerBank\"+index}\n                                    PowerBank={powerBank}\n                                    clickHandler={\n                                        async (setState) => {\n                                            setState(false)\n                                            let r = await this.MODELS._Station.rentPowerBank(this.state.currentStation.id)\n\n                                            if(r){\n                                                Notifications.drawActionResult(\"pagesNotifications\", \"Power Bank ejected\", \"success\")\n                                                document.getElementById(\"PowerBank\"+index).style.display = \"none\"\n                                            }else {\n                                                Notifications.drawActionResult(\"pagesNotifications\", \"Could not rent the Power Bank\", \"error\")\n                                                setState(true)\n                                            }\n                                        }\n                                    }\n                                />\n                            </div>\n                        )\n                    })\n                )\n            }else {\n                return (<div>No Power Banks on the station</div>)\n            }\n        }else {\n            return (<div>Fetching power banks data</div>)\n        }\n\n    }\n    drawAPN(){\n        this.MODELS.station.queryAPNNs(this.state.currentStation.id, \"00\").then((result)=>{\n            if(result != false){\n                return <APNView APN={result}></APNView>\n            }else {\n                Notifications.drawActionResult(\n                    \"pagesNotifications\",\n                    \"Could not load APN info\",\n                    \"error\",\n                    \"standard\",\n                    null)\n            }\n        })\n    }\n    render() {\n        return (\n            <YitFragment\n                ref={this.currentPage}\n                customClass={\"StationDetailsFragment\"}\n                customId={\"StationDetailsFragment\"}\n                title={\"Station Details\"}\n            >\n                <div className=\"globalInformationHolder\">\n                    <div className=\"infoEntry\">\n                        <b>System Id:</b> {this.state.currentStation.systemId}\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Public Id:</b>\n                        {this.state.currentStation.id}\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Total Power Banks:</b>\n                        1\n                    </div>\n                    <div className=\"infoEntry\">\n                        <b>Partner:</b>\n                        {this.state.currentStation.Partner.fullName}\n                    </div>\n                </div>\n                <YitView\n                    ref={this.myRef}\n                    className=\"informationHolder\"\n                    active={true}\n                    anActiveContent={\n                        <React.Fragment>\n                            <b>Station offline</b>\n                            <Button\n                                variant=\"contained\"\n                                color={\"primary\"}\n                                onClick={()=>{\n                                    this.myRef.current.setActive(true)\n                                    this.loadStationInfo(this.props.id).then(async ()=>{\n                                        //await this.loadPowerBanksInfo(this.state.currentStation.id)\n                                        await this.loadAPN(this.state.currentStation.id, 0)\n                                    })\n                                }}>\n                                Try Again\n                            </Button>\n                        </React.Fragment>\n                    }\n                >\n                    <TabsWidget\n                        tabsList={[\n                            {\n                                title: \"Power Banks\",\n                            },\n                            {\n                                title: \"Access point names\",\n                            },\n                            {\n                                title: \"Latest Transactions\",\n                            }\n                        ]}>\n                        <div id={\"powerBanksHolder\"}>\n                            {this.drawPowerBanks(this.state.currentStationInfo.powerBanksList)}\n                        </div>\n                        <div id={\"APPNSHolder\"}>\n                            <TabsWidget\n                                tabsList={[\n                                    {\n                                        title: \"First\",\n\n                                    },\n                                    {\n                                        title: \"Second\",\n                                    },\n                                    {\n                                        title: \"Third\",\n                                    },\n                                    {\n                                        title: \"Forth\",\n                                    },\n                                    {\n                                        title: \"Fifth\",\n                                    },\n\n                                ]}>\n                                <div id=\"firstHolder\"><APNView APN={this.state.stationAPNs[0]}/></div>\n                                <div id=\"secondHolder\"><APNView APN={this.state.stationAPNs[1]}/></div>\n                                <div id=\"thirdHolder\"><APNView APN={this.state.stationAPNs[2]}/></div>\n                                <div id=\"forthHolder\"><APNView APN={this.state.stationAPNs[3]}/></div>\n                                <div id=\"fifthHolder\"><APNView APN={this.state.stationAPNs[4]}/></div>\n                            </TabsWidget>\n                        </div>\n                    </TabsWidget>\n                </YitView>\n            </YitFragment>\n        )\n    }\n}\n\nexport default StationDetails\n\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport DynamicSubmitButton from \"../DynamicSubmitButton/DynamicSubmitButton\";\n\nfunction  drawSubmit(isSubmitting){\n    if(!isSubmitting){\n        return (\n            <Button fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" type={\"submit\"}>\n                Submit\n            </Button>\n        )\n    }\n    else {\n        return (\n\n            <LoadingButton\n                fullWidth\n                loading\n                loadingPosition=\"start\"\n                startIcon={<SaveIcon />}\n                variant=\"outlined\"\n            >\n                Requesting\n            </LoadingButton>\n        )\n    }\n}\n\n\nconst DoneMsg = () =>{\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n    </div>)\n}\nclass YitTcpForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            newInfo: {},\n        }\n        this.submitButton = React.createRef()\n    }\n\n    changeHolder(e) {\n        let nam = e.target.name;\n        let val = e.target.value;\n        if(e.target.type === \"number\"){\n            val = parseInt(val)\n        }\n        this.state.newInfo[nam]= val\n    }\n\n    drawResult(){\n        this.props.view.pushNotification(this.props.errorMsg, \"error\", 2000)\n        //Notifications.drawActionResult(\"pagesNotifications\", this.props.errorMsg, \"error\")\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault()\n        this.submitButton.current.setState({isSubmitting : true})\n        this.setState({\n            isSubmitting: true\n        })\n        if(await this.props.handleSubmit(this.state.newInfo) === true){\n            this.setState({\n                isSubmitted: true\n            })\n\n            setTimeout(()=>{\n                this.setState({\n                    isSubmitted: false,\n                    isSubmitting: false\n                })\n            }, 2000)\n\n        }else {\n            this.drawResult()\n            this.submitButton.current.setState({isSubmitting : false})\n        }\n    }\n\n    recursiveCloneChildren(children) {\n        return React.Children.map(children, child => {\n            if(!React.isValidElement(child)) return child;\n            let  childProps = {onChange: this.changeHolder.bind(this)};\n            childProps.children = this.recursiveCloneChildren(child.props.children);\n            return React.cloneElement(child, childProps);\n        })\n    }\n\n    async componentDidMount() {\n\n    }\n\n    render() {\n        if(!this.state.isSubmitted){\n            return (\n\n                    <form  onSubmit={this.handleSubmit.bind(this)} id={\"myForm\"}>\n                        <Grid container  spacing={2} xs={12} >\n                            <Grid container item  xs={10} spacing={2}>\n                                {this.recursiveCloneChildren(this.props.children)}\n                            </Grid>\n                            <Grid item xs={2}>\n                                <DynamicSubmitButton ref={this.submitButton}></DynamicSubmitButton>\n                            </Grid>\n                        </Grid>\n                    </form>\n\n            )\n        }else{\n            return (\n                <div className={\"YitTcpForm\"} id={\"YitTcpForm\"}>\n                    <DoneMsg/>\n                </div>\n            )\n        }\n\n    }\n}\nexport default YitTcpForm","import React from \"react\";\nimport \"./StationEditForm.css\"\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport {Notifications} from \"../../../Apis/Notifications\";\nimport TabsWidget from \"../../../Components/TabsWidget/TabsWidget\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitTcpForm from \"../../../Components/YitTcpForm/YitTcpForm\";\nimport {VolumeDown, VolumeUp} from \"@mui/icons-material\";\nimport Slider from \"@mui/material/Slider\";\n\nconst MuiIcons = require('@mui/icons-material');\n\nconst APNView =  ({APN,  id})=>{\n    if(APN == undefined){\n        APN = {}\n    }\n\n    return(\n        <div className={\"PowerBankView\"} id={id} >\n            <YitForm>\n                <Grid container spacing={2} xs={12} style={{width: \"100%\"}}>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"MCCMNC\"\n                            defaultValue={APN.MCCMNC}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"User Name\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-error-helper-text\"\n                            label=\"Password\"\n                            defaultValue={APN.APN}\n                            size=\"small\"\n                            InputProps={{\n                                readOnly: true,\n                            }}>\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </YitForm>\n\n        </div>\n    )\n}\n\nclass StationEditForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            failedLoading : false,\n            currentStation: {Partner: {}},\n            currentStationInfo: {},\n            currentTab :\"one\",\n            stationAPNs : [],\n\n            partnersList: [],\n            statsList: [\n                {label: \"active\", id: 0},\n                {label: \"Frozen\", id: 1}\n                ]\n            }\n\n        this.fragment = React.createRef()\n        if(this.state.currentStation === undefined){\n            this.state.currentStation = {}\n        }else {\n            this.state.currentStation = this.props.station\n            this.loadPrimaryData().then(r => {})\n        }\n    }\n\n    async loadPartners(){\n        let getAllOp = await this.MODELS._Partner.getAll(0, 999)\n        if(getAllOp.finalResult !== false){\n            let partners = getAllOp.result.rows\n            let prepared = partners.map(partner =>{\n                return{value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        }else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPrimaryData(){\n\n        await this.loadPartners();\n        if(this.state.failedLoading){\n            this.fragment.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.fragment.current.setState({\n                isLoading: false\n            })\n        }\n    }\n\n    async componentDidMount() {\n\n    }\n\n    static getDerivedStateFromProps(){\n\n    }\n\n    async loadStationInfo(id) {\n        let getOneOP = await this.MODELS.station.getOnById(id)\n        if (getOneOP.finalResult === true) {\n            let currentStation = getOneOP.result\n\n            this.setState({\n                currentStation: currentStation,\n            })\n            return true\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n            return false\n        }\n    }\n\n    async loadPowerBanksInfo(id) {\n        let currentStationInfo = await this.MODELS._Station.getOneRealTime(id)\n        if (currentStationInfo != false) {\n            this.setState({\n                currentStationInfo: currentStationInfo,\n            })\n        } else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load Station primary  Data\", \"error\")\n        }\n    }\n\n    async loadAPN(stationId, index) {\n        let APN = await this.MODELS._Station.queryAPNNs(stationId, index)\n        if(APN != false){\n            let current  = this.state.stationAPNs\n            current[index] = APN\n            this.setState({\n                stationAPNs: current\n            })\n        }else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not Load APN info\", \"error\")\n        }\n    }\n\n    async handleSubmitStationData(newData) {\n        let updateOp = await this.MODELS._Station.update(this.state.currentStation.systemId, newData)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    async handleSetAddress(newData) {\n        let updateOp = await this.MODELS._Station.setAddress(this.state.currentStation.id, newData)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    async handleSetVolume(newData) {\n        let updateOp = await this.MODELS._Station.setVolume(this.state.currentStation.id, newData.level)\n        if(updateOp.finalResult === true){\n            return true\n        }else {\n            return  false\n        }\n    }\n\n    drawAPN(){\n        this.MODELS.station.queryAPNNs(this.state.currentStation.id, \"00\").then((result)=>{\n            if(result != false){\n                return <APNView APN={result}></APNView>\n            }else {\n                Notifications.drawActionResult(\n                    \"pagesNotifications\",\n                    \"Could not load APN info\",\n                    \"error\",\n                    \"standard\",\n                    null)\n            }\n        })\n    }\n\n    render() {\n        return (\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"StationEditForm\"}\n                customId={\"StationEditForm\"}\n                title={\"Station Details\"}\n                primaryInfoLoader={()=>{this.loadPrimaryData().then(r => {})}}\n            >\n\n\n                <div className=\"hardCodedInfoHolder\">\n                    <TabsWidget\n                        tabsList={[\n                            {title: \"Primary Info\"},\n                            {title: \"Server configuration\"},\n                            {title: \"APNS\"},\n                            {title: \"Sound Level\"},\n                        ]}\n                    >\n                        <YitForm\n                            handleSubmit={this.handleSubmitStationData.bind(this)}\n                        >\n                            <Grid container spacing={2} xs={12}>\n                                <Grid item xs={12}><b>Station Primary data</b></Grid>\n                                <Grid item xs={5}>\n                                    <TextField\n                                        disabled fullWidth required variant={\"outlined\"}\n                                        id=\"outlined-required\" label=\"SystemId\" defaultValue={this.state.currentStation.systemId}\n                                    >\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={7}>\n                                    <TextField\n                                        fullWidth required variant={\"outlined\"}\n                                        name={\"id\"} id=\"outlined-required\" label=\"Public Id\" defaultValue={this.state.currentStation.id}\n                                    />\n                                </Grid>\n                                <Grid item xs={5}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"demo-simple-select-label\">Partner</InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"currentPartner\"\n                                            label=\"Partner\"\n                                            name={\"currentPartner\"}\n                                            defaultValue={this.state.currentStation.currentPartner}\n\n                                        >\n                                            {this.state.partnersList.map((option) => (\n                                                <MenuItem value={option.value}> {option.label}</MenuItem>\n                                            ))}\n                                            <MenuItem value={10}>Ten</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            name={\"stat\"}\n                                            label=\"Stat\"\n                                            defaultValue={this.state.currentStation.stat}\n                                        >\n                                            {this.state.statsList.map((option) => (\n                                                <MenuItem value={option.id}> {option.label}</MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <TextField\n                                        fullWidth required variant={\"outlined\"} type={\"number\"}\n                                        id=\"outlined-required\" name=\"price\" label=\"Price\" defaultValue={this.state.currentStation.price}\n                                    >\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                        </YitForm>\n                        <YitTcpForm\n                            handleSubmit={this.handleSetAddress.bind(this)}>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth size={\"small\"} name={\"address\"}\n                                    required id=\"outlined-required\" label=\"Server address\" placeholder=\"xxx.xxx.xxx.xxx\"\n                                >\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <TextField\n                                    fullWidth required type={\"number\"} name={\"port\"} size={\"small\"}\n                                    id=\"outlined-required\" label=\"Port Number\" defaultValue=\"4000\"\n                                />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <TextField\n                                    fullWidth required type={\"number\"}  name={\"heartBit\"} size={\"small\"}\n                                    id=\"outlined-required\" label=\"Heart Bit\" defaultValue=\"30\"\n                                />\n                            </Grid>\n                        </YitTcpForm>\n                        <TabsWidget\n                            tabsList={[\n                                {\n                                    title: \"First\",\n\n                                },\n                                {\n                                    title: \"Second\",\n                                },\n                                {\n                                    title: \"Third\",\n                                },\n                                {\n                                    title: \"Forth\",\n                                },\n                                {\n                                    title: \"Fifth\",\n                                },\n\n                            ]}\n                        >\n                            <div id=\"firstHolder\"><APNView APN={this.state.stationAPNs[0]}/></div>\n                            <div id=\"secondHolder\"><APNView APN={this.state.stationAPNs[1]}/></div>\n                            <div id=\"thirdHolder\"><APNView APN={this.state.stationAPNs[2]}/></div>\n                            <div id=\"forthHolder\"><APNView APN={this.state.stationAPNs[3]}/></div>\n                            <div id=\"fifthHolder\"><APNView APN={this.state.stationAPNs[4]}/></div>\n                        </TabsWidget>\n                        <YitTcpForm\n                            view={this.fragment.current}\n                            errorMsg={\"Could not set volume correctly\"}\n                            handleSubmit={this.handleSetVolume.bind(this)}\n                        >\n                            <Grid item xs={12}>\n                                <div style={{display: \"flex\"}}>\n                                    <VolumeDown />\n                                    <Slider\n                                        name={\"level\"}\n                                        min={0}\n                                        max={15}\n                                        aria-label=\"Volume\"\n                                        onChange={\"\"} />\n                                    <VolumeUp />\n                                </div>\n                            </Grid>\n                        </YitTcpForm>\n                    </TabsWidget>\n                </div>\n            </YitFragment>\n        )\n    }\n}\nexport default StationEditForm\n\n","import React from 'react';\nimport \"./Stations.css\"\nimport ReactDOM from \"react-dom\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport NewStationForm from \"./NewStationForm/NewStationForm\";\nimport Chip from \"@mui/material/Chip\";\nimport StationDetails from \"./StationDetails/StationDetails\";\nimport StationEditForm from \"./StationEditForm/StationEditForm\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\nclass Stations extends YitComponent {\n    constructor(props){\n        super(props);\n        this.state = {\n            failedLoading : false,\n            columns: [\n                {title: 'SystemId', field: 'systemId'},\n                {title: 'ID', field: 'id'},\n                {\n                    title: 'Stat', field: 'stat',\n                    lookup: {\n                        0: <Chip  label=\"Active\" color={\"primary\"} style={{width: 120}}/>,\n                        1: <Chip variant={\"outlined\"} label=\"Offline\"  style={{width: 120, color: \"red\"}} />\n                    }\n                },\n                {title: 'Rent Fees', field: 'price'},\n                {title: 'Added On', render: rowData => rowData['createdAt'].substr(0, 10)},\n            ],\n            stationsList : [],\n            page: 0,\n            totalCount: 0\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        this.tableRef = React.createRef();\n    }\n\n    async loadPrimaryData() {\n        if(this.state.failedLoading){\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadPrimaryData()\n        setTimeout(()=>{\n            //this.tableRef.current.onToggleDetailPanel([0], rowData => <StationDetails id={rowData.systemId}/>)\n        }, 3000)\n\n    }\n\n\n    componentWillUnmount() {\n\n    }\n\n    setValid = async() =>{\n        let result = [];\n        let data = this.state.rawData;\n        for(let i=0; i<data.length; i++){\n            if (parseInt(data[i].valid) == 1){\n                result.push(data[i])\n            }\n        }\n        this.setState({data: result})\n    }\n\n    render() {\n        return (\n        <>\n            <YitPage\n                ref={this.currentPage}\n                title={\"Stations\"}\n                customClass={\"StationsPage\"}\n                customdId={\"StationsPage\"}\n                contentCustomId={\"StationsPageContent\"}\n                reloadPrimaryInfo={()=>{\n                    this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Station\",\n                        icon : <MuiIcons.Add/>,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewStationForm></NewStationForm>)}\n                    }\n                ]}\n                reloadPrimaryInfo={()=>this.loadPrimaryData()}\n            >\n                <YitDataTable\n                    columns={this.state.columns}\n                    actions={[\n                        {\n                            icon: ()=><MuiIcons.Block style={{color: \"darkred\"}}/>,\n                            tooltip: 'Delete',\n                        },\n                        {\n                            icon: ()=><MuiIcons.Delete style={{color: \"darkred\"}}/>,\n                            tooltip: 'Delete',\n                        },\n                        {\n                            icon: () => <MuiIcons.Edit style={{color: \"\"}}/>,\n                            tooltip: \"Edit\",\n                            onClick: (event, data) => this.currentPage.current.mountBackDrop(<StationEditForm station={data}/>)\n                        }\n                    ]}\n                    dataModel={this.MODELS._Station}\n                    detailPanel={(rowData) => {\n                        return (\n                            <div className={\"stationDetailsHolder\"}>\n                                <StationDetails id={rowData['rowData'].id}/>\n                            </div>\n                        )\n                    }}\n\n                />\n            </YitPage>\n            </>\n\n\n        )\n    }\n}\n\nexport default Stations","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./PartnerEditForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {LoadScript} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport {API_KEY} from \"../../../Apis/GlobalConfig\";\n\n\nclass PartnerEditForm extends YitComponent {\n    constructor(props) {\n\n\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n\n        }\n        this.fragment = React.createRef()\n\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n\n    async handleSubmit(newData) {\n        let updateOp = await this.MODELS._Partner.update(this.props.partner.id, newData)\n        if (updateOp.finalResult) {\n            this.formRef.current.setState({\n                doneMsg: updateOp.result\n            })\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: updateOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <YitFragment\n                ref={this.fragment}\n                customClass={\"PartnerEditForm\"}\n                customId={\"PartnerEditForm\"}\n                isLoading={false}\n                primaryInfoLoader={() => this.loadPrimaryData().then()}\n            >\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                    onSuccess={()=>{\n                        window.location.reload()\n                    }}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                id=\"outlined-required\" name={'fullName'}\n                                label=\"Name\" defaultValue={this.props.partner.fullName}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n                                    variant={\"outlined\"}\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Rent Policy\"\n                                    defaultValue={this.props.partner.type}\n                                >\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <FormControl fullWidth>\n                                <InputLabel >Stat</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"stat\"}\n                                    label=\"State\"\n                                    defaultValue={this.props.partner.stat}\n                                >\n                                    {PartnerStates.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"phone\"} id=\"outlined-required\"\n                                label=\"Phone\" placeholder={\"0X XX XX XX XX\"} defaultValue={this.props.partner.phone}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth required variant={\"outlined\"}\n                                name={\"mail\"} id=\"outlined-required\" defaultValue={this.props.partner.mail}\n                                label=\"Address mail\" placeholder={\"xxx@xxx.xxx\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <LoadScript\n                                googleMapsApiKey={API_KEY}\n                            >\n                              <YitLocationPicker center={{lat: this.props.partner.x, lng: this.props.partner.y}}/>\n                            </LoadScript>\n                        </Grid>\n                    </Grid>\n                </YitForm>\n            </YitFragment>\n        )\n\n\n    }\n}\n\nexport default PartnerEditForm","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./CodeGeneratorForm.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport RechargeCodeStates from \"../../../Structures/RechargeCodeStates\";\nimport YitComponent from \"../../../Structures/YitComponent\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\n\nclass CodeGeneratorForm extends YitComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n            partners: []\n        }\n        this.currentForm = React.createRef()\n    }\n    async componentDidMount() {\n\n    }\n    async  doGenerate(data){\n        data[\"partnerId\"] = this.props.partner.id\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            this.currentForm.current.setState({errMsg: JSON.stringify(c.error)})\n            return false\n        }\n    }\n    render() {\n        return (\n            <div className={\"CodeGeneratorForm\"}>\n                <YitForm\n                    ref={this.currentForm}\n                    errorMsg={\"Lot created successfully\"}\n                    handleSubmit={this.doGenerate.bind(this)}\n                >\n\n                        <TextField\n                            disabled fullWidth variant={\"outlined\"}\n                            name=\"partnerId\" labelId={\"Partner-select-label\"} label={\"Partner\"}\n                            defaultValue={this.props.partner.fullName}\n                        >\n\n                        </TextField>\n\n                    <br/><br/>\n                    <TextField\n                        required fullWidth variant={\"outlined\"}\n                        name={\"amount\"}\n                        label=\"Amount\"\n                        type={\"number\"}\n                    >\n                    </TextField>\n                    <br/><br/>\n                    <TextField\n                        required fullWidth variant={\"outlined\"}\n                        name={\"number\"} label=\"Number\"\n                        type=\"number\"\n                    >\n                    </TextField>\n                    <br/><br/>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"algorithm-select-label\">Algorithm</InputLabel>\n                        <Select\n                            fullWidth\n                            name=\"algorithm\"\n                            label={\"Algorithm\"}\n                            defaultValue={0}\n                        >\n                            <MenuItem value={0}>bcrypt + JWT</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br/><br/>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                        <Select\n                            required\n                            fullWidth\n                            name={\"stat\"}\n                            labelId=\"demo-simple-select-label\"\n                            label=\"Stat\"\n                            defaultValue={1}\n                        >\n                            {RechargeCodeStates.map(cs =>{\n                                return       <MenuItem value={cs.value}>{cs.label}</MenuItem>\n                            })}\n                        </Select>\n                    </FormControl>\n                </YitForm>\n            </div>\n\n\n        )\n    }\n}\nexport default CodeGeneratorForm","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./RechargeCodes.css\"\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\n\nimport {Link} from \"react-router-dom\";\n\n\n\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport RechargeCodeStates from \"../../Structures/RechargeCodeStates\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitForm from \"../../Components/YitForm/YitForm\";\nimport StatBox from \"../../Components/StatBox/StatBox\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport YitFragment from \"../../Components/YitFragment/YitFragment\";\n\nconst Icons = require(\"@mui/icons-material\")\n\n\n\n\nclass RechargeCodes extends YitComponent {\n\n    constructor(props){\n        let t =  RechargeCodeStates.reduce((reducer ,reCodeState)=> {\n\n            return  reducer + ` ${reCodeState.value} : \"${reCodeState.label}\", `\n        }, '')\n\n        super(props);\n\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: {0 : \"New\",  1 : \"Printed\",  2 : \"Consumed\"}\n                },\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n\n        this.submitButton = React.createRef()\n    }\n\n    async  doGenerate(data){\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            return false\n        }\n    }\n\n    async componentDidMount() {\n        this.currentPage.current.setState({\n            isLoading: false\n        })\n        let t = await this.dataModel.getAll(0, 50)\n        console.clear()\n        console.log(t)\n    }\n\n    async changeStat(rowData, stat){\n        try{\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if(updateResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                let currentRow = this.state.data.indexOf(rowData)\n                let newData = this.state.data\n                newData[currentRow].stat = stat\n                this.setState({\n                    data: newData\n                })\n\n            }\n        }catch (e){\n\n        }\n    }\n\n    dataModel = {\n        getAll : async (offset, limit) => {\n            let result = await this.MODELS._RechargeCode.getAllForPartner(offset, limit, this.props.id)\n            return result\n        }\n    }\n\n\n    render() {\n        return (\n                <YitFragment\n                    ref={this.currentPage}\n                    customClass={\"ReCodesPage\"} customId={\"ReCodesPage\"} title={\"Recharge Codes\"}\n                    customContentClass={\"ReCodesContent\"}>\n                    <div className={\"codesContainer\"}>\n                    <YitDataTable\n                        columns={this.state.columns}\n                        dataModel={this.dataModel}\n                        options={{search: false, toolbar: false,  filtering: true}}\n                    >\n\n                    </YitDataTable>\n                    </div>\n                </YitFragment>\n        )\n    }\n}\n\nexport default RechargeCodes","import React from \"react\";\nimport \"./PartnerDetails.css\"\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport {GoogleMap, LoadScript} from \"@react-google-maps/api\";\nimport TabsWidget from \"../../Components/TabsWidget/TabsWidget\";\nimport MaterialTable from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\nimport StationDetails from \"../Stations/StationDetails/StationDetails\";\nimport Chip from \"@mui/material/Chip\";\nimport {Edit,  QrCode2Outlined} from \"@mui/icons-material\";\nimport PartnerEditForm from \"./PartnerEditForm/PartnerEditForm\";\nimport CodeGeneratorForm from \"./CodeGeneratorForm/CodeGeneratorForm\";\nimport RechargeCodes from \"../RechargeCodes/RechargeCodes\";\nimport {MAP_API_KEY} from \"../../Apis/GlobalConfig\";\nimport YitLocationPicker from \"../../Components/YitFullLocationPeeker/YitFullLocationPicker\";\nconst MuiIcons = require(\"@mui/icons-material\")\nconst PartnerStations = ({data, icons}) => {\n\n    let columns = [\n        {title: 'SystemId', field: 'systemId'},\n        {title: 'ID', field: 'id'},\n        {\n            title: 'Stat', field: 'stat',\n            lookup: {\n                0: <Chip label=\"Active\" color={\"primary\"} style={{width: 120}}/>,\n                1: <Chip variant={\"outlined\"} label=\"Offline\" style={{width: 120, color: \"red\"}}/>\n            }\n        },\n    ]\n    return (\n        <MaterialTable\n            style={{height: \"100%\"}}\n            components={\n                {\n                    Container: props => (\n                        <div style={\n                            {\n                                position: \"relative\", width: '100%', height: \"100%\",\n                                overflow: \"auto\"\n                        }}>\n                            {props.children}\n                        </div>\n                    ),\n\n                }\n            }\n            icons={icons}\n            title={\"\"}\n            columns={columns}\n            data={data}\n            localization={{body: {editRow: {deleteText: 'are you sur you wanna delete this item '}}}}\n            actions={[\n                {\n                    icon: () => <MuiIcons.Block style={{color: \"darkred\"}}/>,\n                    tooltip: 'Delete',\n\n                },\n                {\n                    icon: () => <MuiIcons.Delete style={{color: \"darkred\"}}/>,\n                    tooltip: 'Delete',\n                },\n                (rowData) => {\n                    return {\n                        icon: () => <MuiIcons.Launch\n                            style={{color: \"black\"}}\n                            onClick={()=>{\n                                this.currentPage.current.mountBackDrop(\n                                    <StationDetails id={rowData.id}></StationDetails>\n                                )\n                            }\n                            }\n                        />,\n                        tooltip: \"Details\",\n                    }\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                exportButton: true,\n                toolbar: false,\n            }}\n        />\n    )\n}\n\nclass PartnerDetails extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state =\n            {\n                isLoading: true,\n                failedLoading: true,\n                currentPartner: {Stations : {}},\n            }\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadCurrentPartner(this.props.id)\n        if(this.state.failedLoading){\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        }else {\n\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n    }\n\n    async loadCurrentPartner(id) {\n        let getOneOp = await this.MODELS._Partner.getOnById(id)\n        if (getOneOp.finalResult === true) {\n\n            this.setState({\n                failedLoading: false,\n                currentPartner: getOneOp.result,\n            })\n\n        } else {\n            this.setState({\n                failedLoading : true\n            })\n        }\n    }\n\n    async componentDidMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    render() {\n        return (\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"PartnerDetails\"}\n                customId={\"PartnerDetailsPage\"}\n                title={\"Partner Details\"}\n                topOperations={[\n                    {\n                        text:\"Print\",\n                        icon: <QrCode2Outlined fontSize={\"medium\"}></QrCode2Outlined>,\n                        onClick: ()=>{\n                            this.currentPage.current.mountBackDrop(\n                                <CodeGeneratorForm partner={this.state.currentPartner}/>\n                            )\n                        }\n                    },\n                    {\n                        text: \"Edit\",\n                        icon: <Edit fontSize={\"medium\"} />,\n                        onClick: ()=>{\n                            this.currentPage.current.mountBackDrop(\n                                <PartnerEditForm partner={this.state.currentPartner}/>\n                            )\n                        }\n                    }\n                ]}\n                reloadPrimaryInfo={()=>{this.loadPrimaryData().then()}}\n            >\n                <TabsWidget\n                    tabsList={[\n                        {title: \"Global Information\"},\n                        {title: \"Stations\"},\n                        {title: \"Transactions\"},\n                        {title: \"Recharge Codes\"},\n                    ]}\n                >\n                    <div id={\"GlobalInfoHolder\"}>\n                        <div className=\"globalInformationHolder\">\n                            <b>Name:</b><br/>\n                            {this.state.currentPartner.fullName}\n                            <br/><br/>\n                            <b>Total affected stations:</b><br/>\n                            {this.state.currentPartner.Stations.length}\n                            <br/><br/>\n                            <b>Phone:</b><br/>\n                            {this.state.currentPartner.phone}\n                            <br/><br/>\n                            <b>Current Stat:</b><br/>\n                            {this.state.currentPartner.stat}\n                        </div>\n                        <div className=\"mapHolder\">\n                            <LoadScript\n                                googleMapsApiKey={MAP_API_KEY}\n                            >\n                                <GoogleMap\n                                    mapContainerStyle={{width: \"100%\", height: \"100%\"}}\n                                    center={{\n                                        lat: this.state.currentPartner.x,\n                                        lng: this.state.currentPartner.y\n                                    }}\n                                    zoom={10}\n                                >\n                                    { /* Child components, such as markers, info windows, etc. */}\n                                    <></>\n                                </GoogleMap>\n                            </LoadScript>\n                        </div>\n                    </div>\n                    <>\n                        <PartnerStations\n                            data={this.state.currentPartner.Stations}\n                            icons={tableIcons}\n                        ></PartnerStations>\n                    </>\n                    <></>\n                    <>\n                        <RechargeCodes id={this.state.currentPartner.id}></RechargeCodes>\n                    </>\n                </TabsWidget>\n            </YitPage>\n\n        )\n    }\n}\n\nexport default PartnerDetails","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Transactions.css\"\nimport MaterialTable,  {MTableToolbar}from '@material-table/core';\nimport tableIcons from \"../../Components/tableIcons\";\n//Icons\nimport {Link} from \"react-router-dom\";\n\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport RechargeCodeStates from \"../../Structures/RechargeCodeStates\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport YitForm from \"../../Components/YitForm/YitForm\";\nimport StatBox from \"../../Components/StatBox/StatBox\";\n\nimport TransactionOperations from \"../../Structures/TransactionOperations\";\nconst MuiIcons = require('@mui/icons-material');\nfunction statToString(stat){\n    let result = \"\"\n    RechargeCodeStates.forEach((reCodeState)=>{\n        if(reCodeState.value == stat){\n            result = reCodeState.label\n        }\n    })\n    return result\n}\n\nclass ReCodeGeneratorForm extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            partners: []\n        }\n    }\n    async componentDidMount() {\n        let partners = await this.props.getPartners(0, 999)\n        let prepared = partners.map(partner => {\n\n            return {value: partner.id, label: partner.fullName}\n        })\n        this.setState({\n            partners : prepared\n        })\n    }\n    render() {\n        return (\n            <YitForm\n                errorMsg={\"Lot created successfully\"}\n                handleSubmit={this.props.handleSubmit}>\n                <FormControl fullWidth>\n                    <InputLabel id=\"Partner-select-label\">Partner</InputLabel>\n                    <Select\n                        fullWidth\n                        name=\"partnerId\"\n                        labelId={\"Partner-select-label\"}\n                        label={\"Partner\"}\n                    >\n                        {this.state.partners.map(partner =>{\n                            return   <MenuItem value={partner.value}>{partner.label}</MenuItem>\n                        })\n                        }\n                    </Select>\n                </FormControl>\n                <br/><br/>\n                <TextField\n                    required\n                    fullWidth\n                    name={\"amount\"}\n                    label=\"Amount\"\n                    size=\"small\"\n                    type={\"number\"}\n                >\n                </TextField>\n                <br/><br/>\n                <TextField\n                    required\n                    fullWidth\n                    name={\"number\"}\n                    label=\"Number\"\n                    size=\"small\"\n                    type=\"number\"\n                >\n                </TextField>\n                <br/><br/>\n                <FormControl fullWidth>\n                    <InputLabel id=\"algorithm-select-label\">Algorithm</InputLabel>\n                    <Select\n                        fullWidth\n                        name=\"algorithm\"\n                        label={\"Algorithm\"}\n                    >\n                        <MenuItem value={10}>MD5 + JWT</MenuItem>\n                        <MenuItem value={20}>Bcrypt Only</MenuItem>\n                        <MenuItem value={30}>Bcrypt + JWT</MenuItem>\n                    </Select>\n                </FormControl>\n                <br/><br/>\n                <FormControl fullWidth>\n                    <InputLabel id=\"demo-simple-select-label\">Stat</InputLabel>\n                    <Select\n                        required\n                        fullWidth\n                        name={\"stat\"}\n                        labelId=\"demo-simple-select-label\"\n                        label=\"Stat\"\n                    >\n                        {RechargeCodeStates.map(cs =>{\n                            return       <MenuItem value={cs.value}>{cs.label}</MenuItem>\n                        })}\n                    </Select>\n                </FormControl>\n            </YitForm>\n\n        )\n    }\n}\n\nconst RentDetailedPanel = ({MetaData}) =>{\n    return(\n        <MaterialTable\n            icons={tableIcons}\n            title={''}\n            components={{\n                Toolbar: props => (\n                    <div>\n\n                    </div>\n                ),\n                Container: props => <div\n                    style={{\n                        overflow: \"auto\",\n                        marginLeft: \"5%\",\n                        background: 'grey', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n            }}\n            columns={[\n                {title: '1', field: \"dataTitle\"},\n                {title: '2', field: \"dataValue\"},\n            ]}\n            data={MetaData}\n            options={{\n                pageSize: 5,\n                actionsColumnIndex: -1,\n                showTitle: false,\n            }}\n        />\n    )\n}\n\nclass Transactions extends YitComponent {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {title: 'Operation',   field: \"operation\", lookup: {0 : \"Rent\",  1 : \"Return\"}},\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n\n        this.submitButton = React.createRef()\n    }\n\n    async  doGenerate(data){\n        let c = await this.MODELS._RechargeCode.create(data)\n        if(c.finalResult === true){\n            return true\n        }else {\n            return false\n        }\n    }\n\n\n    async componentDidMount() {\n        //this.submitButton.current.changeState(false)\n        this.setTransactionsList(TransactionOperations.Station.rent.id).then()\n        this.currentPage.current.setState({\n            isLoading: false\n        })\n\n    }\n\n    async dataLoader(query, resolve) {\n        let rechargeCodes = await this.MODELS._Transaction.getAll(query.pageSize * query.page, query.pageSize);\n        console.log(rechargeCodes)\n        if (rechargeCodes !== false) {\n            resolve({\n                data: rechargeCodes,\n                page: query.page,\n                totalCount: 100\n            })\n        } else {\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not load Stations data\", \"error\")\n            resolve({\n                data: [],\n                page: query.page,\n                totalCount: 100\n            })\n        }\n    }\n\n    async loadRentTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(0, 0, 100)\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            await transactions.forEach((transaction, index, transactions)  =>{\n                let newEntry = {\n                    id: transaction.id,\n                    operation: transaction.operation,\n                }\n                transaction.MetaData.forEach(entry => {\n                    newEntry[entry.dataTitle] = entry.dataValue\n                })\n                transactions[index]  = newEntry\n            })\n            this.setState({\n\n                columns: [\n                    {title: 'Id', field: \"id\"},\n                    {title: 'Operation', field: \"operation\", lookup: {0: \"Rent\", 1: \"Return\"}},\n                    {title: 'StationId', field: \"stationId\", render: rowData => <Link target={\"_blank\"} to={\"/DashBoard/StationsDetails/\"+rowData.stationId}>{rowData.stationId}</Link>},\n                    {title: 'Client Id', field: \"clientId\"},\n                    {title: 'StationId', field: \"powerBankId\"},\n                ]\n            })\n            return transactions\n        }else {\n            return []\n        }\n    }\n\n    async loadReturnTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(TransactionOperations.Station.return.id, 0, 100)\n        if(getAllOp.finalResult){\n            let transactions = getAllOp.result\n            await transactions.forEach((transaction, index, transactions)  =>{\n                let newEntry = {\n                    id: transaction.id,\n                    operation: transaction.operation,\n                }\n                transaction.MetaData.forEach(entry => {\n                    newEntry[entry.dataTitle] = entry.dataValue\n                })\n                transactions[index]  = newEntry\n            })\n            this.setState({\n\n                columns: [\n                    {title: 'Id', field: \"id\"},\n                    {title: 'Operation', field: \"operation\", lookup: {0: \"Rent\", 1: \"Return\"}},\n                    {title: 'StationId', field: \"stationId\", render: rowData => <Link target={\"_blank\"} to={\"/DashBoard/StationsDetails/\"+rowData.stationId}>{rowData.stationId}</Link>},\n                    {title: 'Client Id', field: \"clientId\"},\n                    {title: 'StationId', field: \"powerBankId\"},\n                ]\n            })\n            return transactions\n        }else {\n            return []\n        }\n    }\n\n    async loadCartTransactions() {\n        let getAllOp = await this.MODELS._Transaction.getAll(11, 0, 100)\n        let transactions = getAllOp.result\n        await transactions.forEach((transaction, index, transactions)  =>{\n            let newEntry = {\n                id: transaction.id,\n                operation: transaction.operation,\n            }\n            transaction.MetaData.forEach(entry => {\n                newEntry[entry.dataTitle] = entry.dataValue\n            })\n            transactions[index]  = newEntry\n        })\n        this.setState({\n            columns: [\n                {title: 'Id', field: \"id\"},\n                {\n                    title: 'Operation', field: \"operation\",\n                    lookup: {0: \"Rent\", 1: \"Return\", 11 : \"recharge\"}},\n                {title: 'Client Id', field: \"clientId\"},\n                {title: 'Recharge code ID', field: \"rechargeCodeId\"},\n            ]\n        })\n        return transactions\n\n    }\n\n    async setTransactionsList(type){\n        let transactionList\n        switch (type) {\n            case TransactionOperations.Station.rent.id:\n                transactionList = await this.loadRentTransactions()\n                break;\n            case TransactionOperations.Station.return.id:\n                transactionList = await this.loadReturnTransactions()\n                break;\n            case TransactionOperations.wallet.recharge.id:\n                transactionList = await this.loadCartTransactions()\n        }\n        if(typeof transactionList === \"object\"){\n            this.setState({\n                    data: transactionList\n                }\n            )\n        }else {\n            this.setState({ data: [] })\n        }\n    }\n\n    async tabClickHandler(e) {\n        this.setTransactionsList(e.target.id).then()\n    }\n\n    render() {\n        return (\n                <YitPage\n                    ref={this.currentPage}\n                    customClass={\"TransactionsPage\"} customId={\"TransactionsPage\"} title={\"Transactions\"}\n                    customContentClass={\"TransactionsPageContent\"}>\n                        <MaterialTable\n                            icons={tableIcons}\n                            title={''}\n                            components={{\n                                Toolbar: props => {\n                                    return  (\n                                        <div className={\"TableHeader\"}>\n                                            <div className={\"tableHeaderTabsContainer\"}>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={(e)=>{\n                                                        this.tabClickHandler(e)\n                                                    }}\n                                                    id={TransactionOperations.Station.rent.id}\n                                                >\n                                                    Rent Transactions\n                                                </span>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={(e)=>{\n                                                        this.tabClickHandler(e)\n                                                    }}\n                                                    id={TransactionOperations.Station.return.id}\n                                                >\n                                                    Return Transactions\n                                                </span>\n                                                <span\n                                                    className={\"tableTab\"}\n                                                    onClick={this.tabClickHandler.bind(this)}\n                                                    id={TransactionOperations.wallet.recharge.id}\n                                                >\n                                                    Card Transactions\n                                                </span>\n                                            </div>\n                                            <MTableToolbar {...props} />\n                                        </div>\n                                    )},\n\n                                Container: props => <div\n                                    style={{\n                                        overflow: \"auto\",\n                                        background: '#FFFFFF', width:\"100%\", height:\"100%\"}}>{props.children}</div>\n                            }}\n                            columns={this.state.columns}\n                            data={this.state.data}\n                            //onRowClick={(event, rowData, togglePanel) => togglePanel()}\n                            options={{\n                                pageSize: 5,\n                                actionsColumnIndex: -1,\n                                showTitle: false,\n                                grouping: true,\n                                exportAllData: true\n                            }}\n                            actions={[\n                                {\n                                    icon: () => <MuiIcons.PersonAdd />,\n                                    tooltip: 'Add User',\n                                    isFreeAction: true,\n                                    onClick: (event) => {},\n                                    render: \"Hello\"\n                                },\n                                (rowData) => {\n                                    switch (rowData.stat ){\n                                        case 0:\n                                            return {\n                                                icon: () =><MuiIcons.Check style={{color: \"blue\"}}></MuiIcons.Check>,\n                                                onClick: (event, rowData) => this.changeStat(rowData, 1),\n                                                tooltip: \"validate\",\n                                            }\n                                            break\n                                        case 1:\n                                            return {\n                                                icon: () =><MuiIcons.Block style={{color: \"red\"}}></MuiIcons.Block>,\n                                                tooltip: \"Freeze User\",\n                                                onClick: (event, rowData) => this.changeStat(rowData, 2)\n                                            }\n                                        case 2:\n                                            return {\n                                                icon: () =><MuiIcons.Beenhere style={{color: \"green\"}}></MuiIcons.Beenhere>,\n                                                tooltip: \"Reactivate User\",\n                                                onClick: (event, rowData) => this.changeStat(rowData, 1)\n                                            }\n                                    }\n\n                                },\n\n\n                                (rowData) => {\n                                    return {\n                                        icon: () =><Link to={{\n                                            pathname: \"/Dashboard/PartnerDetails/\"+rowData.id,\n                                            search: '',\n                                            state: { data: this.state.rawData[rowData.rowIndex]}\n                                        }}><MuiIcons.Launch style={{color: \"black\"}}/></Link>,\n                                        tooltip: \"Details\",\n                                    }\n                                }\n                            ]}\n                        />\n                </YitPage>\n        )\n    }\n}\n\nexport default Transactions","import React from \"react\";\nimport \"./YitFilePicker.css\"\nimport Button from \"@material-ui/core/Button\";\n\n\n\n\n\nclass YitFilePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentImage: '',\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n\n    }\n    onImageSelect(e){\n        let Image =  URL.createObjectURL(e.target.files[0])\n        let imageTag  = document.getElementById('imageTag')\n        this.setState({\n            currentImage: Image\n        })\n        imageTag.style.display = 'block'\n    }\n\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'YitFilePicker'}>\n                <img className={\"selectedImage\"} src={this.state.currentImage} id={'imageTag'}/>\n                <Button\n                    color={\"primary\"}\n                    variant=\"contained\"\n                    component=\"label\"\n                >\n                    Select File\n                    <input\n                        onChange={(e)=>this.onImageSelect(e)}\n                        type=\"file\"\n                        hidden\n                    />\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default YitFilePicker","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./NewAd.css\"\nimport Grid from \"@mui/material/Grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport YitComponent from \"../../../Structures/YitComponent\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport YitForm from \"../../../Components/YitForm/YitForm\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport YitFragment from \"../../../Components/YitFragment/YitFragment\";\nimport {GoogleMap, LoadScript, Marker} from \"@react-google-maps/api\";\nimport PartnerTypes from \"../../../Structures/PartnerTypes\";\nimport PartnerStates from \"../../../Structures/PartnerStates\";\nimport LocationSearchModal from \"../../../Components/LocationSearchModal/LocationSearchModal\";\nimport YitLocationPicker from \"../../../Components/YitLocationPicker\";\nimport YitFilePicker from \"../../../Components/YitFilePicker/YitFilePicker\";\n\n\nconst DoneMsg = () => {\n    return (<div className=\"success-animation\">\n        <svg className=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\n            <circle className=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\n            <path className=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\n        </svg>\n        <div>Station submitted successfully</div>\n    </div>)\n}\n\nclass NewAd extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSubmitted: false,\n            isSubmitting: false,\n            done: false,\n            partnersList: [],\n            markers: []\n        }\n\n        this.stationTypes = [\n            {\n                label: \"active\",\n                value: 0\n            },\n            {\n                label: \"inactive\",\n                value: 1\n            }\n        ]\n        this.formRef = React.createRef()\n    }\n\n    async componentDidMount() {\n        let getOp = await this.MODELS._Partner.getAll(0, 999)\n        if (getOp.finalResult !== false) {\n            let partners = getOp.result.rows\n            let prepared = partners.map(partner => {\n                return {value: partner.id, label: partner.fullName}\n            })\n            this.setState({\n                partnersList: prepared\n            })\n        } else {\n\n        }\n    }\n\n    generatePassword(){\n        let chars = \"0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        let passwordLength = 8;\n        let password = \"\";\n        for (let i = 0; i <= passwordLength; i++) {\n            let randomNumber = Math.floor(Math.random() * chars.length);\n            password += chars.substring(randomNumber, randomNumber +1);\n        }\n        return password\n    }\n\n    async handleSubmit(newData){\n        let password = this.generatePassword()\n        alert(password)\n        newData['password'] = password\n        let createOp = await this.MODELS._Partner.create(newData)\n        if (createOp.finalResult) {\n            return true\n        } else {\n\n            this.formRef.current.setState({\n                errMsg: createOp.error\n            })\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <div className={'NewPartnerForm'}>\n                <YitForm\n                    ref={this.formRef}\n                    handleSubmit={this.handleSubmit.bind(this)}\n                >\n                    <Grid container spacing={2} xs={12}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel >Rent Policy</InputLabel>\n                                <Select\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Audience\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select Audience</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel >State</InputLabel>\n                                <Select\n\n                                    id=\"demo-simple-select\"\n                                    name={\"type\"}\n                                    label=\"Stat\"\n                                    defaultValue={-1}\n                                >\n                                    <MenuItem value={-1}>Select initial state</MenuItem>\n                                    {PartnerTypes.map((option) => (\n                                        <MenuItem value={option.id}> {option.label}</MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <YitFilePicker/>\n                        </Grid>\n\n                    </Grid>\n                </YitForm>\n            </div>\n        )\n    }\n}\n\nexport default NewAd","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./Ads.css\"\nimport DeviceEmulator from 'react-device-emulator';\nimport 'react-device-emulator/lib/styles/style.css';\nimport {ClientStats} from \"../../Structures/ClientStats\";\nimport {Notifications} from \"../../Apis/Notifications\";\nimport YitPage from \"../../Components/YitPage/YitPage\";\nimport YitComponent from \"../../Structures/YitComponent\";\nimport YitDataTable from \"../../Components/YitDataTable/YitDataTable\";\nimport NewPartnerForm from \"../Partners/NewPartnerForm/NewPartnerForm\";\nimport {Input, MenuItem, Select, TextField} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {PhotoCamera} from \"@mui/icons-material\";\nimport NewAd from \"./NewAd/NewAd\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\n\nclass AdImage extends React.Component{\n    static id=0\n    constructor(props) {\n        super(props);\n        this.state= {\n            AdImageContainer : 'AdImageContainer'+AdImage.id,\n            preImageContainer : 'preImageContainer'+AdImage.id,\n            preImage : 'preImage'+AdImage.id\n        }\n        AdImage.id++\n    }\n\n    componentDidMount() {\n        let AdImageContainer = document.getElementById(this.state.AdImageContainer)\n        let preImageContainer = document.getElementById(this.state.preImageContainer)\n        AdImageContainer.addEventListener(\"mouseenter\", ()=>{\n            preImageContainer.style.display = \"block\"\n            ReactDOM.render(\n                <img className={\"preImage\"} id={this.state.preImage} src={this.props.image}/>,\n                preImageContainer\n            )\n\n\n        })\n        AdImageContainer.addEventListener(\"mouseleave\", ()=>{\n            ReactDOM.unmountComponentAtNode(preImageContainer)\n            preImageContainer.style.display = \"none\"\n        })\n    }\n    render() {\n        return(\n            <div className={\"AdImageContainer\"} id={this.state.AdImageContainer}>\n                <span className={\"prSpan\"}>Preview</span>\n                <div className={\"preImageContainer\"} id={this.state.preImageContainer}></div>\n            </div>\n        )\n    }\n\n\n}\n\nclass Ads extends YitComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawData: [],\n            columns: [\n                {title: 'ID', field: \"id\", editable: 'never' },\n                {\n                    title: 'Image', field: \"image\",\n                    render: rowData => <AdImage image={rowData.image}/>,\n                    editComponent: props => {\n                        if(props.value !== undefined){\n                            return(\n                                <div>\n                                    <TextField\n                                        disabled fullWidth\n                                        defaultValue={props.value}>\n\n                                    </TextField>\n                                </div>\n                            )\n                        }\n                        else {\n                            return(\n                                <Select>\n                                    <MenuItem value={0}>Upload File</MenuItem>\n                                    <MenuItem value={1}>Enter Link</MenuItem>\n                                </Select>\n\n                            )\n                        }\n\n                    }\n                },\n                {\n                    title: 'Type',   field: \"type\",\n                    lookup: { 0: 'Show to all', 1: 'Vip Only', 2: \"Normal Only\" },\n                },\n                {\n                    title: 'Stat',   field: \"stat\",\n                    lookup: { 0: 'New', 1: 'Active', 2: \"Frozen\" },\n                },\n            ],\n            data: [],\n            selectedRowId: null,\n            open: false\n        }\n        this.dataTable = React.createRef()\n    }\n\n    async updateAd(newData){\n        try{\n            let updateOp = await this.MODELS._Ad.update(newData.id, newData)\n            if(updateOp.finalResult){\n                Notifications.drawActionResult(\"pagesNotifications\", \"Ad  Updated\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }else{\n                Notifications.drawActionResult(\"pagesNotifications\", \"Could update Client\", \"error\")\n            }\n        }catch (e){\n            Notifications.drawActionResult(\"pagesNotifications\", \"Could not change client info\", \"error\")\n        }\n    }\n\n    async loadAds() {\n        let updateResult = await this.MODELS._Ad.getAll()\n        this.setState({\n            failedLoading: false,\n            data: []\n        })\n\n    }\n\n    async loadPrimaryData() {\n        await this.loadAds()\n        if (this.state.failedLoading) {\n\n            this.currentPage.current.setState({\n                failedLoading: true\n            })\n        } else {\n            this.currentPage.current.setState({\n                failedLoading: false,\n                isLoading: false\n            })\n        }\n\n    }\n\n    async componentWillMount() {\n        await this.loadPrimaryData()\n\n    }\n\n    async componentDidMount() {\n\n\n    }\n\n\n    async changeStat(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.update(rowData.id, {stat: stat})\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Stat Changed successfully\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange()\n            }\n        } catch (error) {\n\n        }\n    }\n\n    async deleteEntry(rowData, stat) {\n        try {\n            let updateResult = await this.MODELS._Partner.delete(rowData.id)\n            if (updateResult) {\n                Notifications.drawActionResult(\"pagesNotifications\", \"Partner Deleted\", \"success\")\n                this.dataTable.current.tableRef.current.onQueryChange({})\n            }\n        } catch (error) {\n\n        }\n    }\n\n\n    render() {\n        return (\n            <YitPage\n                ref={this.currentPage}\n                customClass={\"ClientsPage\"} customId={\"ClientsPage\"} title={\"Advertising\"}\n                reloadPrimaryInfo={async () => {\n                    await this.loadPrimaryData()\n                }}\n                topOperations={[\n                    {\n                        text: \"New Advertising \",\n                        icon: <MuiIcons.Add />,\n                        onClick: ()=>{this.currentPage.current.mountBackDrop(<NewAd/>)}\n                    }\n\n                ]}\n            >\n\n\n                <YitDataTable\n                    ref={this.dataTable}\n                    columns={this.state.columns}\n                    onRowClick={(event, rowData) => {\n                        (event.target).ondblclick = () => {\n                            this.props.history.push(\"/Dashboard/PartnerDetails/\" + rowData.id, {  state: {data: this.state.rawData[rowData.rowIndex]}});\n\n                        }\n                    }}\n                    dataModel={this.MODELS._Ad}\n                    searchEntry={'fullName'}\n                    actions={[\n                        {\n                            icon: ()=><MuiIcons.Preview/>,\n                            tooltip: 'Preview',\n                            onClick: (event, rowData) => {\n                                this.currentPage.current.mountBackDrop(\n                                    <DeviceEmulator type=\"mobile\" withDeviceSwitch withRotator url=\"https://nestjs.com/\"></DeviceEmulator>\n                                )\n                            }\n                        },\n                    ]}\n\n                    editable={{\n                        onRowAdd: newData =>\n                            new Promise((resolve, reject) => {\n\n                            }),\n                        onRowUpdate: (newData, oldData) => this.updateAd(newData),\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                this.deleteEntry(oldData).then(r => resolve())\n                            })\n                    }}\n\n\n                />\n            </YitPage>\n\n\n        )\n    }\n}\n\nexport default Ads","\nimport Home from \"./Pages/Home/Home\";\nimport Clients from \"./Pages/Clients/Clients\";\nimport Partners from \"./Pages/Partners/Partners\";\nimport Stations from \"./Pages/Stations/Stations\";\nimport PartnerDetails from \"./Pages/PartnerDetails/PartnerDetails\";\nimport Transactions from \"./Pages/Transactions/Transactions\";\nimport Ads from \"./Pages/Ads/Ads\";\n\n\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\nconst dashboardRoutes = [\n    {\n      path: \"/DashBoard/Dashboard\",\n      name: \"Dashboard\",\n      icon: MuiIcons.Dashboard,\n      component: Home,\n    },\n\n    {\n    path: \"/DashBoard/Stations\",\n    name: \"Stations\",\n    icon: MuiIcons.Apps,\n    component: Stations,\n     },\n\n    {\n        path: \"/DashBoard/Clients\",\n        name: \"Clients\",\n        rtlName: \"Sessions\",\n        icon: MuiIcons.PeopleAltSharp,\n        component: Clients,\n        layout: \"/admin\",\n    },\n    {\n        path: \"/DashBoard/Partners\",\n        name: \"Partners\",\n        icon: MuiIcons.PeopleOutlineRounded,\n        component: Partners,\n    },\n    {\n        path: \"/DashBoard/PartnerDetails/:id\",\n        parametrised: true,\n        component: PartnerDetails,\n        layout: \"/admin\",\n    },\n    {\n        path: \"/DashBoard/Transactions\",\n        name: \"Transactions\",\n        icon: MuiIcons.Receipt,\n        component: Transactions,\n    },\n    {\n        path: \"/DashBoard/Ads\",\n        name: \"Ads Manager\",\n        icon: MuiIcons.BurstModeSharp,\n        component: Ads,\n    },\n];\n\nexport default dashboardRoutes;\n","import React from \"react\";\nimport \"../Style/NavBar.css\"\nimport {Link, NavLink} from \"react-router-dom\";\n\nimport routes from \"../routes\";\nfunction createMenu (routes) {\n    return (\n        routes.map((prop, index) => {\n            if(prop.parametrised === undefined){\n                return (\n                    <NavLink className={\"navEntry\"} to={prop.path} key={index}>\n                        <div className={\"navIcon\"}>{<prop.icon style={{fontSize: \"xx-large\"}}/>}</div>\n                        <span className={\"navText\"}>{prop.name}</span>\n                    </NavLink>\n                );\n            }\n            return\n\n        })\n    )\n};\n\nclass NavBar extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n\n    componentDidMount() {\n\n    }\n    render(){\n        return(\n            <div className={\"NavBar\"}>\n                {createMenu(routes)}\n            </div>\n        )\n    }\n}\nexport default NavBar","import React from \"react\";\nimport {render} from \"react-dom\";\nimport \"../Style/Logo.css\"\nimport logoImage from \"../Imgs/logo.svg\"\n\nclass Logo extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <img className={\"Logo\"} src={logoImage}/>\n            </React.Fragment>\n\n        )\n    }\n}\n\n\nexport default Logo","import React from \"react\";\nimport \"../Style/LeftPane.css\"\nimport {Link} from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport Logo from \"./Logo\";\n\nimport {LOCALSTORAGE} from \"../Apis/GlobalConfig\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Button from \"@mui/material/Button\";\nconst MuiIcons = require(\"@mui/icons-material\")\n\n\nclass LeftPane extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state ={\n            openDialog : false\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    logOut(){\n        LOCALSTORAGE.removeItem(\"adminMail\")\n        LOCALSTORAGE.removeItem(\"adminToken\")\n        window.location.assign(\"/Login\")\n    }\n    render(){\n        return(\n            <React.Fragment>\n                <div className=\"LeftPane\">\n                    <Dialog\n                        open={this.state.openDialog}\n                        onClose={()=>{\n\n                        }}\n                    >\n\n                        <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">\n                                You are about to leave the application\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.logOut}>Log Out</Button>\n                            <Button onClick={() => {\n                                    this.setState({\n                                        openDialog : false\n                                    })\n                                }}>\n                                close\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n\n                    <div className=\"logoContainer\">\n                        <Logo/>\n                    </div>\n                    <div className=\"navBarContainer\">\n                        <NavBar/>\n                    </div>\n\n                    <span className={\"logOutButton\"} onClick={\n                        () => {\n                            this.setState({\n                                openDialog : true\n                            })\n                        } }>\n                        <MuiIcons.LogoutOutlined/>\n                        <p className={\"navText\"}>Log Out</p>\n                    </span>\n                </div>\n            </React.Fragment>\n\n        )\n    }\n}\nexport default LeftPane","import React from \"react\";\nimport \"../Style/RightPane.css\"\nimport {Redirect, Route} from \"react-router-dom\";\n\nimport { Switch } from \"react-router-dom\";\n\nimport routes from \"../routes\";\n\nfunction switchRoutes (routes) {\n    return (\n        <Switch>\n            {routes.map((route, key) => {\n                if((route.parametrised === undefined) || (route.parametrised) === false){\n                    return (<Route key={key} exact path={route.path}  component={route.component}></Route>)\n                }else {\n                    return(\n                        <Route key={key} exact path={route.path} render={(props) => {\n                            return (<route.component id={props.match.params.id}/>);\n                        }}>\n                        </Route>\n                    )\n                }\n            })}\n            <Redirect from={\"/\"} to={\"/DashBoard/Dashboard\"}></Redirect>\n        </Switch>\n    )\n};\n\nclass RightPane extends React.Component{\n    render(){\n        return(\n            <React.Fragment>\n                    <div className=\"RightPane\" id={\"RightPane\"}>\n                        {switchRoutes(routes)}\n                    </div>\n\n            </React.Fragment>\n        )\n    }\n}\nexport default RightPane","import {SERVER} from \"../Apis/GlobalConfig\";\nimport server from \"../config/globalConfig\";\nimport RequestHandler from \"../Apis/RequestHandler\";\n\n\nlet actor = \"Session/\"\nconst _Admin  = {\n\n    login: async (postData) => {\n        try {\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(postData)\n            };\n            const response = await fetch(SERVER+\"Guest/adminLogin\", requestOptions);\n            const data = await response.json();\n            return data;\n        } catch (e){\n            return {finalResult: false, error: \"Could not connect to the server\"}\n        }\n    },\n\n    HeartBit: async () => {\n        try {\n            let result = await RequestHandler.GET(SERVER+\"HeartBit\")\n            return result\n        } catch (e){\n            return {finalResult : false, error: e}\n        }\n    }\n}\nexport default _Admin;","const server = 'http://localhost:3000/admin'\nlet myStorage = window.localStorage;\n\n\nexport  default server;","import {LOCALSTORAGE} from \"./GlobalConfig\";\n\nconst authOperations = {\n    isLoggedIn :  () => {\n        let adminMail =  LOCALSTORAGE.getItem(\"adminMail\")\n        return adminMail != null\n    },\n}\n\nexport {authOperations}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport \"./LoginPage.css\"\n\n\nimport {Link} from \"react-router-dom\";\nimport _Admin from \"../../Models/_Admin\";\nimport {LOCALSTORAGE} from \"../../Apis/GlobalConfig\";\nimport Alert from \"@mui/material/Alert\";\nimport {authOperations} from \"../../Apis/authOperations\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Typography from \"@mui/material/Typography\";\n\nfunction Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                CBC ALTEC\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\nfunction validateLogin(mail, admin, token){\n    LOCALSTORAGE.setItem(\"adminMail\", mail)\n    LOCALSTORAGE.setItem(\"admin\", admin)\n    LOCALSTORAGE.setItem(\"adminToken\", token)\n    ReactDOM.render(\n        <Alert  severity=\"success\" onClose={() => {}}>Login success, redirecting...</Alert>,\n        document.getElementById(\"resultContainer\"))\n        setTimeout(function(){ window.location.assign(\"/DashBoard\") }, 1500);\n}\n\nexport default function LoginPage() {\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        // eslint-disable-next-line no-console\n        let mail = data.get(\"email\")\n        let password = data.get(\"password\")\n        let loginResult = await _Admin.login({mail , password})\n        if(loginResult !== undefined){\n            if(loginResult.finalResult === true){\n                validateLogin(mail, loginResult.admin, loginResult.token)\n            }else {\n                ReactDOM.render(\n                    <Alert  severity=\"error\" onClose={() => {}}>{loginResult.error}</Alert>,\n                    document.getElementById(\"resultContainer\"))\n            }\n        }else {\n            ReactDOM.render(\n                <Alert  severity=\"error\" onClose={() => {}}>Unknown error occurred</Alert>,\n                document.getElementById(\"resultContainer\"))\n        }\n\n    };\n    authOperations.isLoggedIn() ?   window.location.assign(\"/Dashboard/Dashboard\") : void(0)\n\n    return (\n            <section className={\"LoginPage\"}>\n                <div className=\"leftSide\" style={{\n                    backgroundImage: 'url(https://source.unsplash.com/random)',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                }}>\n                </div>\n                <div className=\"rightSide\">\n                    <div className=\"resultContainer\" id=\"resultContainer\">\n\n                    </div>\n\n                    <Box\n                        sx={{\n                            my: 8,\n                            mx: 4,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            backgroundColor: \"grey\"\n                        }}\n                    >\n                            Sign in\n                        <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                autoFocus\n                            />\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"current-password\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                                label=\"Remember me\"\n                            />\n                            <Button\n                                color={\"primary\"}\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                sx={{ mt: 3, mb: 2 }}\n                            >\n                                Sign In\n                            </Button>\n                            <Grid container>\n                                <Grid item xs>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        Forgot password?\n                                    </Link>\n                                </Grid>\n                                <Grid item>\n                                    <Link href=\"#\" variant=\"body2\">\n                                        {\"Don't have an account? Sign Up\"}\n                                    </Link>\n                                </Grid>\n                            </Grid>\n\n                            <Copyright sx={{ mt: 5 }} />\n                        </Box>\n                    </Box>\n                </div>\n\n            </section>\n    );\n}","import {HeartBit, Internet} from '../Actions/Types';\n\nconst initialState = {\n    items: [],\n    item: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case HeartBit:\n            return {\n                ...state,\n                server: action.payLoad\n            };\n            break;\n        case Internet:\n            return {\n                ...state,\n                internet: action.payLoad\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport serverReducers from './serverReducers';\n\nexport default combineReducers({\n    AppStates: serverReducers\n});\n\n\nexport const serverStatToProps = state => ({\n    server: state.AppStates.server,\n    internet : state.AppStates.internet\n})","export const HeartBit = 'HeartBit';\nexport const Internet = 'internet';","import React from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport \"../../Style/yitClasses.css\"\nimport \"./Main.css\"\nimport LeftPane from \"../../Components/LeftPane\";\nimport RightPane from \"../../Components/RightPane\";\nimport LoginPage from \"../../Pages/LoginPage/LoginPage\";\nimport {serverStatToProps} from \"../../Apis/Redux/Reducers\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n\nclass Main extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state= {\n            server:true\n        }\n    }\n    async componentDidMount() {\n\n    }\n\n\n\n    drawStatus(internet, server){\n        if(internet){\n            if(server != false){\n\n            }else {\n                return(<Alert  variant={\"filled\"} severity=\"error\" style={{fontSize: \"1.1vw\", fontWeight: \"bold\"}}>Server connection lost</Alert>)\n            }\n        }else{\n            return(<Alert  variant={\"filled\"} severity=\"error\" style={{fontSize: \"1.1vw\", fontWeight: \"bold\"}}>Internet connection lost !!</Alert>)\n\n        }\n\n\n    }\n    render() {\n        if(false){\n            return (\n                <div></div>\n            )\n        }else {\n            return (\n                <div className={\"Main\"}>\n                    <div className=\"statusBar\" id={\"statusBar\"}>\n                        {this.drawStatus(this.props.internet, this.props.server)}\n                    </div>\n                    <div className=\"Content\">\n                        <BrowserRouter>\n                            <Switch>\n                                <Route path={\"/Login\"} component={LoginPage}></Route>\n                                <Route path={\"/DashBoard\"}>\n                                    <LeftPane/>\n                                    <RightPane/>\n                                </Route>\n                            </Switch>\n                        </BrowserRouter>\n                    </div>\n                </div>\n            );\n        }\n\n    }\n}\n\nexport default connect(serverStatToProps, {})(Main)\n","import React from 'react';\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\nimport \"./Style/yitClasses.css\"\nimport {connect, Provider} from 'react-redux'\nimport LeftPane from \"./Components/LeftPane\";\nimport RightPane from \"./Components/RightPane\";\nimport { Switch } from \"react-router-dom\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\nimport Main from \"./Layouts/MAIN/Main\";\nimport _Admin from \"./Models/_Admin\";\nimport {HeartBit} from \"./Apis/Redux/Actions/Types\";\nimport {Internet} from \"./Apis/Redux/Actions/Types\";\nimport {serverStatToProps} from \"./Apis/Redux/Reducers\";\nimport {LOCALSTORAGE} from \"./Apis/GlobalConfig\";\nimport {authOperations} from \"./Apis/authOperations\";\n\n\nconst checkServer = () => async dispatch => {\n    let heartBit = await _Admin.HeartBit()\n    if (heartBit.finalResult) {\n        dispatch({\n            type: HeartBit,\n            payLoad: true\n        })\n    } else {\n        dispatch({\n            type: HeartBit,\n            payLoad: false\n        })\n    }\n    let internet = navigator.onLine\n\n    dispatch({\n        type: Internet,\n        payLoad: internet\n    })\n\n}\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n\n        let adminMail = LOCALSTORAGE.getItem(\"adminMail\")\n        let adminToken = LOCALSTORAGE.getItem(\"adminToken\")\n        authOperations.isLoggedIn() ?   void(0) : window.location.assign(\"/Login\")\n    }\n    componentDidMount() {\n\n    }\n\n    async componentWillMount() {\n        let test = this.props.checkServer\n        setInterval(()=>{test()}, 1000)\n    }\n\n    render() {\n\n\n    return (\n        <React.Fragment>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={\"/\"} >\n                        <Main/>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </React.Fragment>\n    );\n    }\n}\n\nexport default connect(serverStatToProps,  {checkServer})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reduxStore = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default reduxStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reduxStore from \"./Apis/Redux/reduxStore\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\n\n\nReactDOM.render(\n\n      <React.StrictMode>\n          <Provider store={reduxStore}>\n              <BrowserRouter>\n                  <Switch>\n                      <Route path={\"/Login\"}>\n                          <LoginPage></LoginPage>\n                      </Route>\n                      <Route path={\"/DashBoard\"}>\n                          <App></App>\n                      </Route>\n                  </Switch>\n              </BrowserRouter>\n          </Provider>\n      </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}